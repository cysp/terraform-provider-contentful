// Code generated by ogen, DO NOT EDIT.

package client

import (
	"time"

	"github.com/go-faster/errors"
)

type AccessToken struct {
	Token string
}

// GetToken returns the value of Token.
func (s *AccessToken) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *AccessToken) SetToken(val string) {
	s.Token = val
}

// Merged schema.
// Ref: #/components/schemas/Error
type Error struct {
	Sys     ErrorSys  `json:"sys"`
	Message string    `json:"message"`
	Details OptString `json:"details"`
}

// GetSys returns the value of Sys.
func (s *Error) GetSys() ErrorSys {
	return s.Sys
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *Error) GetDetails() OptString {
	return s.Details
}

// SetSys sets the value of Sys.
func (s *Error) SetSys(val ErrorSys) {
	s.Sys = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *Error) SetDetails(val OptString) {
	s.Details = val
}

func (*Error) getAuthenticatedUserRes() {}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

func (*ErrorStatusCode) getAuthenticatedUserRes() {}

// Ref: #/components/schemas/ErrorSys
type ErrorSys struct {
	Type ErrorSysType `json:"type"`
	ID   string       `json:"id"`
}

// GetType returns the value of Type.
func (s *ErrorSys) GetType() ErrorSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *ErrorSys) GetID() string {
	return s.ID
}

// SetType sets the value of Type.
func (s *ErrorSys) SetType(val ErrorSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ErrorSys) SetID(val string) {
	s.ID = val
}

type ErrorSysType string

const (
	ErrorSysTypeError ErrorSysType = "Error"
)

// AllValues returns all ErrorSysType values.
func (ErrorSysType) AllValues() []ErrorSysType {
	return []ErrorSysType{
		ErrorSysTypeError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ErrorSysType) MarshalText() ([]byte, error) {
	switch s {
	case ErrorSysTypeError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ErrorSysType) UnmarshalText(data []byte) error {
	switch ErrorSysType(data) {
	case ErrorSysTypeError:
		*s = ErrorSysTypeError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Merged schema.
// Ref: #/components/schemas/User
type User struct {
	Sys       UserSys `json:"sys"`
	Email     string  `json:"email"`
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
}

// GetSys returns the value of Sys.
func (s *User) GetSys() UserSys {
	return s.Sys
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() string {
	return s.Email
}

// GetFirstName returns the value of FirstName.
func (s *User) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *User) GetLastName() string {
	return s.LastName
}

// SetSys sets the value of Sys.
func (s *User) SetSys(val UserSys) {
	s.Sys = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val string) {
	s.Email = val
}

// SetFirstName sets the value of FirstName.
func (s *User) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *User) SetLastName(val string) {
	s.LastName = val
}

func (*User) getAuthenticatedUserRes() {}

// Merged schema.
// Ref: #/components/schemas/UserSys
type UserSys struct {
	// Merged property.
	Type      UserSysType `json:"type"`
	ID        string      `json:"id"`
	Version   int         `json:"version"`
	CreatedAt OptDateTime `json:"createdAt"`
	UpdatedAt OptDateTime `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *UserSys) GetType() UserSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *UserSys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *UserSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UserSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *UserSys) SetType(val UserSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *UserSys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *UserSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UserSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type UserSysType string

const (
	UserSysTypeUser UserSysType = "User"
)

// AllValues returns all UserSysType values.
func (UserSysType) AllValues() []UserSysType {
	return []UserSysType{
		UserSysTypeUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserSysType) MarshalText() ([]byte, error) {
	switch s {
	case UserSysTypeUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserSysType) UnmarshalText(data []byte) error {
	switch UserSysType(data) {
	case UserSysTypeUser:
		*s = UserSysTypeUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
