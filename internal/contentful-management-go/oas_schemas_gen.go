// Code generated by ogen, DO NOT EDIT.

package client

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

type AccessToken struct {
	Token string
}

// GetToken returns the value of Token.
func (s *AccessToken) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *AccessToken) SetToken(val string) {
	s.Token = val
}

// Merged schema.
// Ref: #/components/schemas/ApiKey
type ApiKey struct {
	Sys           ApiKeySys              `json:"sys"`
	Name          string                 `json:"name"`
	Description   OptNilString           `json:"description"`
	Environments  []EnvironmentLink      `json:"environments"`
	AccessToken   string                 `json:"accessToken"`
	PreviewAPIKey OptApiKeyPreviewAPIKey `json:"preview_api_key"`
}

// GetSys returns the value of Sys.
func (s *ApiKey) GetSys() ApiKeySys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *ApiKey) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ApiKey) GetDescription() OptNilString {
	return s.Description
}

// GetEnvironments returns the value of Environments.
func (s *ApiKey) GetEnvironments() []EnvironmentLink {
	return s.Environments
}

// GetAccessToken returns the value of AccessToken.
func (s *ApiKey) GetAccessToken() string {
	return s.AccessToken
}

// GetPreviewAPIKey returns the value of PreviewAPIKey.
func (s *ApiKey) GetPreviewAPIKey() OptApiKeyPreviewAPIKey {
	return s.PreviewAPIKey
}

// SetSys sets the value of Sys.
func (s *ApiKey) SetSys(val ApiKeySys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *ApiKey) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ApiKey) SetDescription(val OptNilString) {
	s.Description = val
}

// SetEnvironments sets the value of Environments.
func (s *ApiKey) SetEnvironments(val []EnvironmentLink) {
	s.Environments = val
}

// SetAccessToken sets the value of AccessToken.
func (s *ApiKey) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetPreviewAPIKey sets the value of PreviewAPIKey.
func (s *ApiKey) SetPreviewAPIKey(val OptApiKeyPreviewAPIKey) {
	s.PreviewAPIKey = val
}

func (*ApiKey) createDeliveryApiKeyRes() {}
func (*ApiKey) getDeliveryApiKeyRes()    {}
func (*ApiKey) updateDeliveryApiKeyRes() {}

type ApiKeyPreviewAPIKey struct {
	Sys ApiKeyPreviewAPIKeySys `json:"sys"`
}

// GetSys returns the value of Sys.
func (s *ApiKeyPreviewAPIKey) GetSys() ApiKeyPreviewAPIKeySys {
	return s.Sys
}

// SetSys sets the value of Sys.
func (s *ApiKeyPreviewAPIKey) SetSys(val ApiKeyPreviewAPIKeySys) {
	s.Sys = val
}

// Merged schema.
type ApiKeyPreviewAPIKeySys struct {
	// Merged property.
	Type ApiKeyPreviewAPIKeySysType `json:"type"`
	ID   string                     `json:"id"`
	// Merged property.
	LinkType ApiKeyPreviewAPIKeySysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *ApiKeyPreviewAPIKeySys) GetType() ApiKeyPreviewAPIKeySysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *ApiKeyPreviewAPIKeySys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *ApiKeyPreviewAPIKeySys) GetLinkType() ApiKeyPreviewAPIKeySysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *ApiKeyPreviewAPIKeySys) SetType(val ApiKeyPreviewAPIKeySysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ApiKeyPreviewAPIKeySys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *ApiKeyPreviewAPIKeySys) SetLinkType(val ApiKeyPreviewAPIKeySysLinkType) {
	s.LinkType = val
}

// Merged schema.
type ApiKeyPreviewAPIKeySysLinkType string

const (
	ApiKeyPreviewAPIKeySysLinkTypePreviewApiKey ApiKeyPreviewAPIKeySysLinkType = "PreviewApiKey"
)

// AllValues returns all ApiKeyPreviewAPIKeySysLinkType values.
func (ApiKeyPreviewAPIKeySysLinkType) AllValues() []ApiKeyPreviewAPIKeySysLinkType {
	return []ApiKeyPreviewAPIKeySysLinkType{
		ApiKeyPreviewAPIKeySysLinkTypePreviewApiKey,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ApiKeyPreviewAPIKeySysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case ApiKeyPreviewAPIKeySysLinkTypePreviewApiKey:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApiKeyPreviewAPIKeySysLinkType) UnmarshalText(data []byte) error {
	switch ApiKeyPreviewAPIKeySysLinkType(data) {
	case ApiKeyPreviewAPIKeySysLinkTypePreviewApiKey:
		*s = ApiKeyPreviewAPIKeySysLinkTypePreviewApiKey
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type ApiKeyPreviewAPIKeySysType string

const (
	ApiKeyPreviewAPIKeySysTypeLink ApiKeyPreviewAPIKeySysType = "Link"
)

// AllValues returns all ApiKeyPreviewAPIKeySysType values.
func (ApiKeyPreviewAPIKeySysType) AllValues() []ApiKeyPreviewAPIKeySysType {
	return []ApiKeyPreviewAPIKeySysType{
		ApiKeyPreviewAPIKeySysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ApiKeyPreviewAPIKeySysType) MarshalText() ([]byte, error) {
	switch s {
	case ApiKeyPreviewAPIKeySysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApiKeyPreviewAPIKeySysType) UnmarshalText(data []byte) error {
	switch ApiKeyPreviewAPIKeySysType(data) {
	case ApiKeyPreviewAPIKeySysTypeLink:
		*s = ApiKeyPreviewAPIKeySysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/ApiKeySys
type ApiKeySys struct {
	// Merged property.
	Type      ApiKeySysType `json:"type"`
	ID        string        `json:"id"`
	Version   int           `json:"version"`
	CreatedAt OptDateTime   `json:"createdAt"`
	UpdatedAt OptDateTime   `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *ApiKeySys) GetType() ApiKeySysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *ApiKeySys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *ApiKeySys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ApiKeySys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ApiKeySys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *ApiKeySys) SetType(val ApiKeySysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ApiKeySys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *ApiKeySys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ApiKeySys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ApiKeySys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type ApiKeySysType string

const (
	ApiKeySysTypeApiKey ApiKeySysType = "ApiKey"
)

// AllValues returns all ApiKeySysType values.
func (ApiKeySysType) AllValues() []ApiKeySysType {
	return []ApiKeySysType{
		ApiKeySysTypeApiKey,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ApiKeySysType) MarshalText() ([]byte, error) {
	switch s {
	case ApiKeySysTypeApiKey:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApiKeySysType) UnmarshalText(data []byte) error {
	switch ApiKeySysType(data) {
	case ApiKeySysTypeApiKey:
		*s = ApiKeySysTypeApiKey
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/AppInstallation
type AppInstallation struct {
	Sys        AppInstallationSys `json:"sys"`
	Parameters jx.Raw             `json:"parameters"`
}

// GetSys returns the value of Sys.
func (s *AppInstallation) GetSys() AppInstallationSys {
	return s.Sys
}

// GetParameters returns the value of Parameters.
func (s *AppInstallation) GetParameters() jx.Raw {
	return s.Parameters
}

// SetSys sets the value of Sys.
func (s *AppInstallation) SetSys(val AppInstallationSys) {
	s.Sys = val
}

// SetParameters sets the value of Parameters.
func (s *AppInstallation) SetParameters(val jx.Raw) {
	s.Parameters = val
}

func (*AppInstallation) getAppInstallationRes() {}
func (*AppInstallation) putAppInstallationRes() {}

// Merged schema.
// Ref: #/components/schemas/AppInstallationSys
type AppInstallationSys struct {
	// Merged property.
	Type AppInstallationSysType `json:"type"`
}

// GetType returns the value of Type.
func (s *AppInstallationSys) GetType() AppInstallationSysType {
	return s.Type
}

// SetType sets the value of Type.
func (s *AppInstallationSys) SetType(val AppInstallationSysType) {
	s.Type = val
}

// Merged schema.
type AppInstallationSysType string

const (
	AppInstallationSysTypeAppInstallation AppInstallationSysType = "AppInstallation"
)

// AllValues returns all AppInstallationSysType values.
func (AppInstallationSysType) AllValues() []AppInstallationSysType {
	return []AppInstallationSysType{
		AppInstallationSysTypeAppInstallation,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppInstallationSysType) MarshalText() ([]byte, error) {
	switch s {
	case AppInstallationSysTypeAppInstallation:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppInstallationSysType) UnmarshalText(data []byte) error {
	switch AppInstallationSysType(data) {
	case AppInstallationSysTypeAppInstallation:
		*s = AppInstallationSysTypeAppInstallation
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/ContentType
type ContentType struct {
	Sys  ContentTypeSys `json:"sys"`
	Name string         `json:"name"`
	// Merged property.
	Description NilString `json:"description"`
	// Merged property.
	DisplayField NilString               `json:"displayField"`
	Fields       []ContentTypeFieldsItem `json:"fields"`
}

// GetSys returns the value of Sys.
func (s *ContentType) GetSys() ContentTypeSys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *ContentType) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ContentType) GetDescription() NilString {
	return s.Description
}

// GetDisplayField returns the value of DisplayField.
func (s *ContentType) GetDisplayField() NilString {
	return s.DisplayField
}

// GetFields returns the value of Fields.
func (s *ContentType) GetFields() []ContentTypeFieldsItem {
	return s.Fields
}

// SetSys sets the value of Sys.
func (s *ContentType) SetSys(val ContentTypeSys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *ContentType) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ContentType) SetDescription(val NilString) {
	s.Description = val
}

// SetDisplayField sets the value of DisplayField.
func (s *ContentType) SetDisplayField(val NilString) {
	s.DisplayField = val
}

// SetFields sets the value of Fields.
func (s *ContentType) SetFields(val []ContentTypeFieldsItem) {
	s.Fields = val
}

func (*ContentType) activateContentTypeRes()   {}
func (*ContentType) deactivateContentTypeRes() {}
func (*ContentType) getContentTypeRes()        {}

type ContentTypeFieldsItem struct {
	ID           string                        `json:"id"`
	Name         string                        `json:"name"`
	Type         string                        `json:"type"`
	LinkType     OptString                     `json:"linkType"`
	Items        OptContentTypeFieldsItemItems `json:"items"`
	Localized    OptBool                       `json:"localized"`
	Omitted      OptBool                       `json:"omitted"`
	Required     OptBool                       `json:"required"`
	Disabled     OptBool                       `json:"disabled"`
	DefaultValue jx.Raw                        `json:"defaultValue"`
	Validations  []jx.Raw                      `json:"validations"`
}

// GetID returns the value of ID.
func (s *ContentTypeFieldsItem) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *ContentTypeFieldsItem) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *ContentTypeFieldsItem) GetType() string {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *ContentTypeFieldsItem) GetLinkType() OptString {
	return s.LinkType
}

// GetItems returns the value of Items.
func (s *ContentTypeFieldsItem) GetItems() OptContentTypeFieldsItemItems {
	return s.Items
}

// GetLocalized returns the value of Localized.
func (s *ContentTypeFieldsItem) GetLocalized() OptBool {
	return s.Localized
}

// GetOmitted returns the value of Omitted.
func (s *ContentTypeFieldsItem) GetOmitted() OptBool {
	return s.Omitted
}

// GetRequired returns the value of Required.
func (s *ContentTypeFieldsItem) GetRequired() OptBool {
	return s.Required
}

// GetDisabled returns the value of Disabled.
func (s *ContentTypeFieldsItem) GetDisabled() OptBool {
	return s.Disabled
}

// GetDefaultValue returns the value of DefaultValue.
func (s *ContentTypeFieldsItem) GetDefaultValue() jx.Raw {
	return s.DefaultValue
}

// GetValidations returns the value of Validations.
func (s *ContentTypeFieldsItem) GetValidations() []jx.Raw {
	return s.Validations
}

// SetID sets the value of ID.
func (s *ContentTypeFieldsItem) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ContentTypeFieldsItem) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *ContentTypeFieldsItem) SetType(val string) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *ContentTypeFieldsItem) SetLinkType(val OptString) {
	s.LinkType = val
}

// SetItems sets the value of Items.
func (s *ContentTypeFieldsItem) SetItems(val OptContentTypeFieldsItemItems) {
	s.Items = val
}

// SetLocalized sets the value of Localized.
func (s *ContentTypeFieldsItem) SetLocalized(val OptBool) {
	s.Localized = val
}

// SetOmitted sets the value of Omitted.
func (s *ContentTypeFieldsItem) SetOmitted(val OptBool) {
	s.Omitted = val
}

// SetRequired sets the value of Required.
func (s *ContentTypeFieldsItem) SetRequired(val OptBool) {
	s.Required = val
}

// SetDisabled sets the value of Disabled.
func (s *ContentTypeFieldsItem) SetDisabled(val OptBool) {
	s.Disabled = val
}

// SetDefaultValue sets the value of DefaultValue.
func (s *ContentTypeFieldsItem) SetDefaultValue(val jx.Raw) {
	s.DefaultValue = val
}

// SetValidations sets the value of Validations.
func (s *ContentTypeFieldsItem) SetValidations(val []jx.Raw) {
	s.Validations = val
}

type ContentTypeFieldsItemItems struct {
	Type        OptString `json:"type"`
	LinkType    OptString `json:"linkType"`
	Validations []jx.Raw  `json:"validations"`
}

// GetType returns the value of Type.
func (s *ContentTypeFieldsItemItems) GetType() OptString {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *ContentTypeFieldsItemItems) GetLinkType() OptString {
	return s.LinkType
}

// GetValidations returns the value of Validations.
func (s *ContentTypeFieldsItemItems) GetValidations() []jx.Raw {
	return s.Validations
}

// SetType sets the value of Type.
func (s *ContentTypeFieldsItemItems) SetType(val OptString) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *ContentTypeFieldsItemItems) SetLinkType(val OptString) {
	s.LinkType = val
}

// SetValidations sets the value of Validations.
func (s *ContentTypeFieldsItemItems) SetValidations(val []jx.Raw) {
	s.Validations = val
}

// Merged schema.
// Ref: #/components/schemas/ContentTypeSys
type ContentTypeSys struct {
	// Merged property.
	Type             ContentTypeSysType `json:"type"`
	ID               string             `json:"id"`
	Version          int                `json:"version"`
	CreatedAt        OptDateTime        `json:"createdAt"`
	UpdatedAt        OptDateTime        `json:"updatedAt"`
	PublishedVersion OptInt             `json:"publishedVersion"`
	PublishedAt      OptDateTime        `json:"publishedAt"`
}

// GetType returns the value of Type.
func (s *ContentTypeSys) GetType() ContentTypeSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *ContentTypeSys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *ContentTypeSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ContentTypeSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ContentTypeSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetPublishedVersion returns the value of PublishedVersion.
func (s *ContentTypeSys) GetPublishedVersion() OptInt {
	return s.PublishedVersion
}

// GetPublishedAt returns the value of PublishedAt.
func (s *ContentTypeSys) GetPublishedAt() OptDateTime {
	return s.PublishedAt
}

// SetType sets the value of Type.
func (s *ContentTypeSys) SetType(val ContentTypeSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ContentTypeSys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *ContentTypeSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ContentTypeSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ContentTypeSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetPublishedVersion sets the value of PublishedVersion.
func (s *ContentTypeSys) SetPublishedVersion(val OptInt) {
	s.PublishedVersion = val
}

// SetPublishedAt sets the value of PublishedAt.
func (s *ContentTypeSys) SetPublishedAt(val OptDateTime) {
	s.PublishedAt = val
}

// Merged schema.
type ContentTypeSysType string

const (
	ContentTypeSysTypeContentType ContentTypeSysType = "ContentType"
)

// AllValues returns all ContentTypeSysType values.
func (ContentTypeSysType) AllValues() []ContentTypeSysType {
	return []ContentTypeSysType{
		ContentTypeSysTypeContentType,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContentTypeSysType) MarshalText() ([]byte, error) {
	switch s {
	case ContentTypeSysTypeContentType:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContentTypeSysType) UnmarshalText(data []byte) error {
	switch ContentTypeSysType(data) {
	case ContentTypeSysTypeContentType:
		*s = ContentTypeSysTypeContentType
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateDeliveryApiKeyReq struct {
	Name         string            `json:"name"`
	Description  OptNilString      `json:"description"`
	Environments []EnvironmentLink `json:"environments"`
}

// GetName returns the value of Name.
func (s *CreateDeliveryApiKeyReq) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CreateDeliveryApiKeyReq) GetDescription() OptNilString {
	return s.Description
}

// GetEnvironments returns the value of Environments.
func (s *CreateDeliveryApiKeyReq) GetEnvironments() []EnvironmentLink {
	return s.Environments
}

// SetName sets the value of Name.
func (s *CreateDeliveryApiKeyReq) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CreateDeliveryApiKeyReq) SetDescription(val OptNilString) {
	s.Description = val
}

// SetEnvironments sets the value of Environments.
func (s *CreateDeliveryApiKeyReq) SetEnvironments(val []EnvironmentLink) {
	s.Environments = val
}

type CreatePersonalAccessTokenReq struct {
	Name      string    `json:"name"`
	Scopes    []string  `json:"scopes"`
	ExpiresIn OptNilInt `json:"expiresIn"`
}

// GetName returns the value of Name.
func (s *CreatePersonalAccessTokenReq) GetName() string {
	return s.Name
}

// GetScopes returns the value of Scopes.
func (s *CreatePersonalAccessTokenReq) GetScopes() []string {
	return s.Scopes
}

// GetExpiresIn returns the value of ExpiresIn.
func (s *CreatePersonalAccessTokenReq) GetExpiresIn() OptNilInt {
	return s.ExpiresIn
}

// SetName sets the value of Name.
func (s *CreatePersonalAccessTokenReq) SetName(val string) {
	s.Name = val
}

// SetScopes sets the value of Scopes.
func (s *CreatePersonalAccessTokenReq) SetScopes(val []string) {
	s.Scopes = val
}

// SetExpiresIn sets the value of ExpiresIn.
func (s *CreatePersonalAccessTokenReq) SetExpiresIn(val OptNilInt) {
	s.ExpiresIn = val
}

type CreateRoleReq struct {
	Name        string                      `json:"name"`
	Description OptNilString                `json:"description"`
	Permissions CreateRoleReqPermissions    `json:"permissions"`
	Policies    []CreateRoleReqPoliciesItem `json:"policies"`
}

// GetName returns the value of Name.
func (s *CreateRoleReq) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CreateRoleReq) GetDescription() OptNilString {
	return s.Description
}

// GetPermissions returns the value of Permissions.
func (s *CreateRoleReq) GetPermissions() CreateRoleReqPermissions {
	return s.Permissions
}

// GetPolicies returns the value of Policies.
func (s *CreateRoleReq) GetPolicies() []CreateRoleReqPoliciesItem {
	return s.Policies
}

// SetName sets the value of Name.
func (s *CreateRoleReq) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CreateRoleReq) SetDescription(val OptNilString) {
	s.Description = val
}

// SetPermissions sets the value of Permissions.
func (s *CreateRoleReq) SetPermissions(val CreateRoleReqPermissions) {
	s.Permissions = val
}

// SetPolicies sets the value of Policies.
func (s *CreateRoleReq) SetPolicies(val []CreateRoleReqPoliciesItem) {
	s.Policies = val
}

type CreateRoleReqPermissions map[string]CreateRoleReqPermissionsItem

func (s *CreateRoleReqPermissions) init() CreateRoleReqPermissions {
	m := *s
	if m == nil {
		m = map[string]CreateRoleReqPermissionsItem{}
		*s = m
	}
	return m
}

// CreateRoleReqPermissionsItem represents sum type.
type CreateRoleReqPermissionsItem struct {
	Type        CreateRoleReqPermissionsItemType // switch on this field
	String      string
	StringArray []string
}

// CreateRoleReqPermissionsItemType is oneOf type of CreateRoleReqPermissionsItem.
type CreateRoleReqPermissionsItemType string

// Possible values for CreateRoleReqPermissionsItemType.
const (
	StringCreateRoleReqPermissionsItem      CreateRoleReqPermissionsItemType = "string"
	StringArrayCreateRoleReqPermissionsItem CreateRoleReqPermissionsItemType = "[]string"
)

// IsString reports whether CreateRoleReqPermissionsItem is string.
func (s CreateRoleReqPermissionsItem) IsString() bool {
	return s.Type == StringCreateRoleReqPermissionsItem
}

// IsStringArray reports whether CreateRoleReqPermissionsItem is []string.
func (s CreateRoleReqPermissionsItem) IsStringArray() bool {
	return s.Type == StringArrayCreateRoleReqPermissionsItem
}

// SetString sets CreateRoleReqPermissionsItem to string.
func (s *CreateRoleReqPermissionsItem) SetString(v string) {
	s.Type = StringCreateRoleReqPermissionsItem
	s.String = v
}

// GetString returns string and true boolean if CreateRoleReqPermissionsItem is string.
func (s CreateRoleReqPermissionsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringCreateRoleReqPermissionsItem returns new CreateRoleReqPermissionsItem from string.
func NewStringCreateRoleReqPermissionsItem(v string) CreateRoleReqPermissionsItem {
	var s CreateRoleReqPermissionsItem
	s.SetString(v)
	return s
}

// SetStringArray sets CreateRoleReqPermissionsItem to []string.
func (s *CreateRoleReqPermissionsItem) SetStringArray(v []string) {
	s.Type = StringArrayCreateRoleReqPermissionsItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if CreateRoleReqPermissionsItem is []string.
func (s CreateRoleReqPermissionsItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayCreateRoleReqPermissionsItem returns new CreateRoleReqPermissionsItem from []string.
func NewStringArrayCreateRoleReqPermissionsItem(v []string) CreateRoleReqPermissionsItem {
	var s CreateRoleReqPermissionsItem
	s.SetStringArray(v)
	return s
}

type CreateRoleReqPoliciesItem struct {
	Effect     CreateRoleReqPoliciesItemEffect  `json:"effect"`
	Actions    CreateRoleReqPoliciesItemActions `json:"actions"`
	Constraint jx.Raw                           `json:"constraint"`
}

// GetEffect returns the value of Effect.
func (s *CreateRoleReqPoliciesItem) GetEffect() CreateRoleReqPoliciesItemEffect {
	return s.Effect
}

// GetActions returns the value of Actions.
func (s *CreateRoleReqPoliciesItem) GetActions() CreateRoleReqPoliciesItemActions {
	return s.Actions
}

// GetConstraint returns the value of Constraint.
func (s *CreateRoleReqPoliciesItem) GetConstraint() jx.Raw {
	return s.Constraint
}

// SetEffect sets the value of Effect.
func (s *CreateRoleReqPoliciesItem) SetEffect(val CreateRoleReqPoliciesItemEffect) {
	s.Effect = val
}

// SetActions sets the value of Actions.
func (s *CreateRoleReqPoliciesItem) SetActions(val CreateRoleReqPoliciesItemActions) {
	s.Actions = val
}

// SetConstraint sets the value of Constraint.
func (s *CreateRoleReqPoliciesItem) SetConstraint(val jx.Raw) {
	s.Constraint = val
}

// CreateRoleReqPoliciesItemActions represents sum type.
type CreateRoleReqPoliciesItemActions struct {
	Type        CreateRoleReqPoliciesItemActionsType // switch on this field
	String      string
	StringArray []string
}

// CreateRoleReqPoliciesItemActionsType is oneOf type of CreateRoleReqPoliciesItemActions.
type CreateRoleReqPoliciesItemActionsType string

// Possible values for CreateRoleReqPoliciesItemActionsType.
const (
	StringCreateRoleReqPoliciesItemActions      CreateRoleReqPoliciesItemActionsType = "string"
	StringArrayCreateRoleReqPoliciesItemActions CreateRoleReqPoliciesItemActionsType = "[]string"
)

// IsString reports whether CreateRoleReqPoliciesItemActions is string.
func (s CreateRoleReqPoliciesItemActions) IsString() bool {
	return s.Type == StringCreateRoleReqPoliciesItemActions
}

// IsStringArray reports whether CreateRoleReqPoliciesItemActions is []string.
func (s CreateRoleReqPoliciesItemActions) IsStringArray() bool {
	return s.Type == StringArrayCreateRoleReqPoliciesItemActions
}

// SetString sets CreateRoleReqPoliciesItemActions to string.
func (s *CreateRoleReqPoliciesItemActions) SetString(v string) {
	s.Type = StringCreateRoleReqPoliciesItemActions
	s.String = v
}

// GetString returns string and true boolean if CreateRoleReqPoliciesItemActions is string.
func (s CreateRoleReqPoliciesItemActions) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringCreateRoleReqPoliciesItemActions returns new CreateRoleReqPoliciesItemActions from string.
func NewStringCreateRoleReqPoliciesItemActions(v string) CreateRoleReqPoliciesItemActions {
	var s CreateRoleReqPoliciesItemActions
	s.SetString(v)
	return s
}

// SetStringArray sets CreateRoleReqPoliciesItemActions to []string.
func (s *CreateRoleReqPoliciesItemActions) SetStringArray(v []string) {
	s.Type = StringArrayCreateRoleReqPoliciesItemActions
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if CreateRoleReqPoliciesItemActions is []string.
func (s CreateRoleReqPoliciesItemActions) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayCreateRoleReqPoliciesItemActions returns new CreateRoleReqPoliciesItemActions from []string.
func NewStringArrayCreateRoleReqPoliciesItemActions(v []string) CreateRoleReqPoliciesItemActions {
	var s CreateRoleReqPoliciesItemActions
	s.SetStringArray(v)
	return s
}

type CreateRoleReqPoliciesItemEffect string

const (
	CreateRoleReqPoliciesItemEffectAllow CreateRoleReqPoliciesItemEffect = "allow"
	CreateRoleReqPoliciesItemEffectDeny  CreateRoleReqPoliciesItemEffect = "deny"
)

// AllValues returns all CreateRoleReqPoliciesItemEffect values.
func (CreateRoleReqPoliciesItemEffect) AllValues() []CreateRoleReqPoliciesItemEffect {
	return []CreateRoleReqPoliciesItemEffect{
		CreateRoleReqPoliciesItemEffectAllow,
		CreateRoleReqPoliciesItemEffectDeny,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateRoleReqPoliciesItemEffect) MarshalText() ([]byte, error) {
	switch s {
	case CreateRoleReqPoliciesItemEffectAllow:
		return []byte(s), nil
	case CreateRoleReqPoliciesItemEffectDeny:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateRoleReqPoliciesItemEffect) UnmarshalText(data []byte) error {
	switch CreateRoleReqPoliciesItemEffect(data) {
	case CreateRoleReqPoliciesItemEffectAllow:
		*s = CreateRoleReqPoliciesItemEffectAllow
		return nil
	case CreateRoleReqPoliciesItemEffectDeny:
		*s = CreateRoleReqPoliciesItemEffectDeny
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/EditorInterface
type EditorInterface struct {
	Sys           EditorInterfaceSys                          `json:"sys"`
	EditorLayout  OptNilEditorInterfaceEditorLayoutItemArray  `json:"editorLayout"`
	Controls      OptNilEditorInterfaceControlsItemArray      `json:"controls"`
	GroupControls OptNilEditorInterfaceGroupControlsItemArray `json:"groupControls"`
	Sidebar       OptNilEditorInterfaceSidebarItemArray       `json:"sidebar"`
}

// GetSys returns the value of Sys.
func (s *EditorInterface) GetSys() EditorInterfaceSys {
	return s.Sys
}

// GetEditorLayout returns the value of EditorLayout.
func (s *EditorInterface) GetEditorLayout() OptNilEditorInterfaceEditorLayoutItemArray {
	return s.EditorLayout
}

// GetControls returns the value of Controls.
func (s *EditorInterface) GetControls() OptNilEditorInterfaceControlsItemArray {
	return s.Controls
}

// GetGroupControls returns the value of GroupControls.
func (s *EditorInterface) GetGroupControls() OptNilEditorInterfaceGroupControlsItemArray {
	return s.GroupControls
}

// GetSidebar returns the value of Sidebar.
func (s *EditorInterface) GetSidebar() OptNilEditorInterfaceSidebarItemArray {
	return s.Sidebar
}

// SetSys sets the value of Sys.
func (s *EditorInterface) SetSys(val EditorInterfaceSys) {
	s.Sys = val
}

// SetEditorLayout sets the value of EditorLayout.
func (s *EditorInterface) SetEditorLayout(val OptNilEditorInterfaceEditorLayoutItemArray) {
	s.EditorLayout = val
}

// SetControls sets the value of Controls.
func (s *EditorInterface) SetControls(val OptNilEditorInterfaceControlsItemArray) {
	s.Controls = val
}

// SetGroupControls sets the value of GroupControls.
func (s *EditorInterface) SetGroupControls(val OptNilEditorInterfaceGroupControlsItemArray) {
	s.GroupControls = val
}

// SetSidebar sets the value of Sidebar.
func (s *EditorInterface) SetSidebar(val OptNilEditorInterfaceSidebarItemArray) {
	s.Sidebar = val
}

func (*EditorInterface) getEditorInterfaceRes() {}
func (*EditorInterface) putEditorInterfaceRes() {}

type EditorInterfaceControlsItem struct {
	FieldId         string    `json:"fieldId"`
	WidgetNamespace OptString `json:"widgetNamespace"`
	WidgetId        OptString `json:"widgetId"`
	Settings        jx.Raw    `json:"settings"`
}

// GetFieldId returns the value of FieldId.
func (s *EditorInterfaceControlsItem) GetFieldId() string {
	return s.FieldId
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *EditorInterfaceControlsItem) GetWidgetNamespace() OptString {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *EditorInterfaceControlsItem) GetWidgetId() OptString {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *EditorInterfaceControlsItem) GetSettings() jx.Raw {
	return s.Settings
}

// SetFieldId sets the value of FieldId.
func (s *EditorInterfaceControlsItem) SetFieldId(val string) {
	s.FieldId = val
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *EditorInterfaceControlsItem) SetWidgetNamespace(val OptString) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *EditorInterfaceControlsItem) SetWidgetId(val OptString) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *EditorInterfaceControlsItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

type EditorInterfaceEditorLayoutItem struct {
	GroupId string   `json:"groupId"`
	Name    string   `json:"name"`
	Items   []jx.Raw `json:"items"`
}

// GetGroupId returns the value of GroupId.
func (s *EditorInterfaceEditorLayoutItem) GetGroupId() string {
	return s.GroupId
}

// GetName returns the value of Name.
func (s *EditorInterfaceEditorLayoutItem) GetName() string {
	return s.Name
}

// GetItems returns the value of Items.
func (s *EditorInterfaceEditorLayoutItem) GetItems() []jx.Raw {
	return s.Items
}

// SetGroupId sets the value of GroupId.
func (s *EditorInterfaceEditorLayoutItem) SetGroupId(val string) {
	s.GroupId = val
}

// SetName sets the value of Name.
func (s *EditorInterfaceEditorLayoutItem) SetName(val string) {
	s.Name = val
}

// SetItems sets the value of Items.
func (s *EditorInterfaceEditorLayoutItem) SetItems(val []jx.Raw) {
	s.Items = val
}

type EditorInterfaceGroupControlsItem struct {
	GroupId         string    `json:"groupId"`
	WidgetNamespace OptString `json:"widgetNamespace"`
	WidgetId        OptString `json:"widgetId"`
	Settings        jx.Raw    `json:"settings"`
}

// GetGroupId returns the value of GroupId.
func (s *EditorInterfaceGroupControlsItem) GetGroupId() string {
	return s.GroupId
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *EditorInterfaceGroupControlsItem) GetWidgetNamespace() OptString {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *EditorInterfaceGroupControlsItem) GetWidgetId() OptString {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *EditorInterfaceGroupControlsItem) GetSettings() jx.Raw {
	return s.Settings
}

// SetGroupId sets the value of GroupId.
func (s *EditorInterfaceGroupControlsItem) SetGroupId(val string) {
	s.GroupId = val
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *EditorInterfaceGroupControlsItem) SetWidgetNamespace(val OptString) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *EditorInterfaceGroupControlsItem) SetWidgetId(val OptString) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *EditorInterfaceGroupControlsItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

type EditorInterfaceSidebarItem struct {
	WidgetNamespace string  `json:"widgetNamespace"`
	WidgetId        string  `json:"widgetId"`
	Settings        jx.Raw  `json:"settings"`
	Disabled        OptBool `json:"disabled"`
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *EditorInterfaceSidebarItem) GetWidgetNamespace() string {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *EditorInterfaceSidebarItem) GetWidgetId() string {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *EditorInterfaceSidebarItem) GetSettings() jx.Raw {
	return s.Settings
}

// GetDisabled returns the value of Disabled.
func (s *EditorInterfaceSidebarItem) GetDisabled() OptBool {
	return s.Disabled
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *EditorInterfaceSidebarItem) SetWidgetNamespace(val string) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *EditorInterfaceSidebarItem) SetWidgetId(val string) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *EditorInterfaceSidebarItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

// SetDisabled sets the value of Disabled.
func (s *EditorInterfaceSidebarItem) SetDisabled(val OptBool) {
	s.Disabled = val
}

// Merged schema.
// Ref: #/components/schemas/EditorInterfaceSys
type EditorInterfaceSys struct {
	// Merged property.
	Type      EditorInterfaceSysType `json:"type"`
	ID        string                 `json:"id"`
	Version   int                    `json:"version"`
	CreatedAt OptDateTime            `json:"createdAt"`
	UpdatedAt OptDateTime            `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *EditorInterfaceSys) GetType() EditorInterfaceSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *EditorInterfaceSys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *EditorInterfaceSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *EditorInterfaceSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *EditorInterfaceSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *EditorInterfaceSys) SetType(val EditorInterfaceSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *EditorInterfaceSys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *EditorInterfaceSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *EditorInterfaceSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *EditorInterfaceSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type EditorInterfaceSysType string

const (
	EditorInterfaceSysTypeEditorInterface EditorInterfaceSysType = "EditorInterface"
)

// AllValues returns all EditorInterfaceSysType values.
func (EditorInterfaceSysType) AllValues() []EditorInterfaceSysType {
	return []EditorInterfaceSysType{
		EditorInterfaceSysTypeEditorInterface,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EditorInterfaceSysType) MarshalText() ([]byte, error) {
	switch s {
	case EditorInterfaceSysTypeEditorInterface:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EditorInterfaceSysType) UnmarshalText(data []byte) error {
	switch EditorInterfaceSysType(data) {
	case EditorInterfaceSysTypeEditorInterface:
		*s = EditorInterfaceSysTypeEditorInterface
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/EnvironmentLink
type EnvironmentLink struct {
	Sys EnvironmentLinkSys `json:"sys"`
}

// GetSys returns the value of Sys.
func (s *EnvironmentLink) GetSys() EnvironmentLinkSys {
	return s.Sys
}

// SetSys sets the value of Sys.
func (s *EnvironmentLink) SetSys(val EnvironmentLinkSys) {
	s.Sys = val
}

// Merged schema.
type EnvironmentLinkSys struct {
	// Merged property.
	Type EnvironmentLinkSysType `json:"type"`
	ID   string                 `json:"id"`
	// Merged property.
	LinkType EnvironmentLinkSysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *EnvironmentLinkSys) GetType() EnvironmentLinkSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *EnvironmentLinkSys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *EnvironmentLinkSys) GetLinkType() EnvironmentLinkSysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *EnvironmentLinkSys) SetType(val EnvironmentLinkSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *EnvironmentLinkSys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *EnvironmentLinkSys) SetLinkType(val EnvironmentLinkSysLinkType) {
	s.LinkType = val
}

// Merged schema.
type EnvironmentLinkSysLinkType string

const (
	EnvironmentLinkSysLinkTypeEnvironment EnvironmentLinkSysLinkType = "Environment"
)

// AllValues returns all EnvironmentLinkSysLinkType values.
func (EnvironmentLinkSysLinkType) AllValues() []EnvironmentLinkSysLinkType {
	return []EnvironmentLinkSysLinkType{
		EnvironmentLinkSysLinkTypeEnvironment,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentLinkSysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentLinkSysLinkTypeEnvironment:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentLinkSysLinkType) UnmarshalText(data []byte) error {
	switch EnvironmentLinkSysLinkType(data) {
	case EnvironmentLinkSysLinkTypeEnvironment:
		*s = EnvironmentLinkSysLinkTypeEnvironment
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type EnvironmentLinkSysType string

const (
	EnvironmentLinkSysTypeLink EnvironmentLinkSysType = "Link"
)

// AllValues returns all EnvironmentLinkSysType values.
func (EnvironmentLinkSysType) AllValues() []EnvironmentLinkSysType {
	return []EnvironmentLinkSysType{
		EnvironmentLinkSysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentLinkSysType) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentLinkSysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentLinkSysType) UnmarshalText(data []byte) error {
	switch EnvironmentLinkSysType(data) {
	case EnvironmentLinkSysTypeLink:
		*s = EnvironmentLinkSysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/Error
type Error struct {
	Sys     ErrorSys  `json:"sys"`
	Message OptString `json:"message"`
	Details jx.Raw    `json:"details"`
}

// GetSys returns the value of Sys.
func (s *Error) GetSys() ErrorSys {
	return s.Sys
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() OptString {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *Error) GetDetails() jx.Raw {
	return s.Details
}

// SetSys sets the value of Sys.
func (s *Error) SetSys(val ErrorSys) {
	s.Sys = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val OptString) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *Error) SetDetails(val jx.Raw) {
	s.Details = val
}

func (*Error) activateContentTypeRes()       {}
func (*Error) createDeliveryApiKeyRes()      {}
func (*Error) createPersonalAccessTokenRes() {}
func (*Error) createRoleRes()                {}
func (*Error) deactivateContentTypeRes()     {}
func (*Error) deleteAppInstallationRes()     {}
func (*Error) deleteContentTypeRes()         {}
func (*Error) deleteDeliveryApiKeyRes()      {}
func (*Error) deleteRoleRes()                {}
func (*Error) getAppInstallationRes()        {}
func (*Error) getAuthenticatedUserRes()      {}
func (*Error) getContentTypeRes()            {}
func (*Error) getDeliveryApiKeyRes()         {}
func (*Error) getEditorInterfaceRes()        {}
func (*Error) getPersonalAccessTokenRes()    {}
func (*Error) getPreviewApiKeyRes()          {}
func (*Error) getRoleRes()                   {}
func (*Error) putAppInstallationRes()        {}
func (*Error) putContentTypeRes()            {}
func (*Error) putEditorInterfaceRes()        {}
func (*Error) revokePersonalAccessTokenRes() {}
func (*Error) updateDeliveryApiKeyRes()      {}
func (*Error) updateRoleRes()                {}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

func (*ErrorStatusCode) activateContentTypeRes()       {}
func (*ErrorStatusCode) createDeliveryApiKeyRes()      {}
func (*ErrorStatusCode) createPersonalAccessTokenRes() {}
func (*ErrorStatusCode) createRoleRes()                {}
func (*ErrorStatusCode) deactivateContentTypeRes()     {}
func (*ErrorStatusCode) deleteAppInstallationRes()     {}
func (*ErrorStatusCode) deleteContentTypeRes()         {}
func (*ErrorStatusCode) deleteDeliveryApiKeyRes()      {}
func (*ErrorStatusCode) deleteRoleRes()                {}
func (*ErrorStatusCode) getAppInstallationRes()        {}
func (*ErrorStatusCode) getAuthenticatedUserRes()      {}
func (*ErrorStatusCode) getContentTypeRes()            {}
func (*ErrorStatusCode) getDeliveryApiKeyRes()         {}
func (*ErrorStatusCode) getEditorInterfaceRes()        {}
func (*ErrorStatusCode) getPersonalAccessTokenRes()    {}
func (*ErrorStatusCode) getPreviewApiKeyRes()          {}
func (*ErrorStatusCode) getRoleRes()                   {}
func (*ErrorStatusCode) putAppInstallationRes()        {}
func (*ErrorStatusCode) putContentTypeRes()            {}
func (*ErrorStatusCode) putEditorInterfaceRes()        {}
func (*ErrorStatusCode) revokePersonalAccessTokenRes() {}
func (*ErrorStatusCode) updateDeliveryApiKeyRes()      {}
func (*ErrorStatusCode) updateRoleRes()                {}

// Ref: #/components/schemas/ErrorSys
type ErrorSys struct {
	Type ErrorSysType `json:"type"`
	ID   string       `json:"id"`
}

// GetType returns the value of Type.
func (s *ErrorSys) GetType() ErrorSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *ErrorSys) GetID() string {
	return s.ID
}

// SetType sets the value of Type.
func (s *ErrorSys) SetType(val ErrorSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ErrorSys) SetID(val string) {
	s.ID = val
}

type ErrorSysType string

const (
	ErrorSysTypeError ErrorSysType = "Error"
)

// AllValues returns all ErrorSysType values.
func (ErrorSysType) AllValues() []ErrorSysType {
	return []ErrorSysType{
		ErrorSysTypeError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ErrorSysType) MarshalText() ([]byte, error) {
	switch s {
	case ErrorSysTypeError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ErrorSysType) UnmarshalText(data []byte) error {
	switch ErrorSysType(data) {
	case ErrorSysTypeError:
		*s = ErrorSysTypeError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilString) SetToNull() {
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/responses/no-content
type NoContent struct{}

func (*NoContent) deactivateContentTypeRes() {}
func (*NoContent) deleteAppInstallationRes() {}
func (*NoContent) deleteContentTypeRes()     {}
func (*NoContent) deleteDeliveryApiKeyRes()  {}
func (*NoContent) deleteRoleRes()            {}

// NewOptApiKeyPreviewAPIKey returns new OptApiKeyPreviewAPIKey with value set to v.
func NewOptApiKeyPreviewAPIKey(v ApiKeyPreviewAPIKey) OptApiKeyPreviewAPIKey {
	return OptApiKeyPreviewAPIKey{
		Value: v,
		Set:   true,
	}
}

// OptApiKeyPreviewAPIKey is optional ApiKeyPreviewAPIKey.
type OptApiKeyPreviewAPIKey struct {
	Value ApiKeyPreviewAPIKey
	Set   bool
}

// IsSet returns true if OptApiKeyPreviewAPIKey was set.
func (o OptApiKeyPreviewAPIKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptApiKeyPreviewAPIKey) Reset() {
	var v ApiKeyPreviewAPIKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptApiKeyPreviewAPIKey) SetTo(v ApiKeyPreviewAPIKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptApiKeyPreviewAPIKey) Get() (v ApiKeyPreviewAPIKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptApiKeyPreviewAPIKey) Or(d ApiKeyPreviewAPIKey) ApiKeyPreviewAPIKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContentTypeFieldsItemItems returns new OptContentTypeFieldsItemItems with value set to v.
func NewOptContentTypeFieldsItemItems(v ContentTypeFieldsItemItems) OptContentTypeFieldsItemItems {
	return OptContentTypeFieldsItemItems{
		Value: v,
		Set:   true,
	}
}

// OptContentTypeFieldsItemItems is optional ContentTypeFieldsItemItems.
type OptContentTypeFieldsItemItems struct {
	Value ContentTypeFieldsItemItems
	Set   bool
}

// IsSet returns true if OptContentTypeFieldsItemItems was set.
func (o OptContentTypeFieldsItemItems) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContentTypeFieldsItemItems) Reset() {
	var v ContentTypeFieldsItemItems
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContentTypeFieldsItemItems) SetTo(v ContentTypeFieldsItemItems) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContentTypeFieldsItemItems) Get() (v ContentTypeFieldsItemItems, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContentTypeFieldsItemItems) Or(d ContentTypeFieldsItemItems) ContentTypeFieldsItemItems {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceControlsItemArray returns new OptNilEditorInterfaceControlsItemArray with value set to v.
func NewOptNilEditorInterfaceControlsItemArray(v []EditorInterfaceControlsItem) OptNilEditorInterfaceControlsItemArray {
	return OptNilEditorInterfaceControlsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceControlsItemArray is optional nullable []EditorInterfaceControlsItem.
type OptNilEditorInterfaceControlsItemArray struct {
	Value []EditorInterfaceControlsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceControlsItemArray was set.
func (o OptNilEditorInterfaceControlsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceControlsItemArray) Reset() {
	var v []EditorInterfaceControlsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceControlsItemArray) SetTo(v []EditorInterfaceControlsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEditorInterfaceControlsItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEditorInterfaceControlsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceControlsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceControlsItemArray) Get() (v []EditorInterfaceControlsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceControlsItemArray) Or(d []EditorInterfaceControlsItem) []EditorInterfaceControlsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceEditorLayoutItemArray returns new OptNilEditorInterfaceEditorLayoutItemArray with value set to v.
func NewOptNilEditorInterfaceEditorLayoutItemArray(v []EditorInterfaceEditorLayoutItem) OptNilEditorInterfaceEditorLayoutItemArray {
	return OptNilEditorInterfaceEditorLayoutItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceEditorLayoutItemArray is optional nullable []EditorInterfaceEditorLayoutItem.
type OptNilEditorInterfaceEditorLayoutItemArray struct {
	Value []EditorInterfaceEditorLayoutItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceEditorLayoutItemArray was set.
func (o OptNilEditorInterfaceEditorLayoutItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceEditorLayoutItemArray) Reset() {
	var v []EditorInterfaceEditorLayoutItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceEditorLayoutItemArray) SetTo(v []EditorInterfaceEditorLayoutItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEditorInterfaceEditorLayoutItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEditorInterfaceEditorLayoutItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceEditorLayoutItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceEditorLayoutItemArray) Get() (v []EditorInterfaceEditorLayoutItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceEditorLayoutItemArray) Or(d []EditorInterfaceEditorLayoutItem) []EditorInterfaceEditorLayoutItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceGroupControlsItemArray returns new OptNilEditorInterfaceGroupControlsItemArray with value set to v.
func NewOptNilEditorInterfaceGroupControlsItemArray(v []EditorInterfaceGroupControlsItem) OptNilEditorInterfaceGroupControlsItemArray {
	return OptNilEditorInterfaceGroupControlsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceGroupControlsItemArray is optional nullable []EditorInterfaceGroupControlsItem.
type OptNilEditorInterfaceGroupControlsItemArray struct {
	Value []EditorInterfaceGroupControlsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceGroupControlsItemArray was set.
func (o OptNilEditorInterfaceGroupControlsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceGroupControlsItemArray) Reset() {
	var v []EditorInterfaceGroupControlsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceGroupControlsItemArray) SetTo(v []EditorInterfaceGroupControlsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEditorInterfaceGroupControlsItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEditorInterfaceGroupControlsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceGroupControlsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceGroupControlsItemArray) Get() (v []EditorInterfaceGroupControlsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceGroupControlsItemArray) Or(d []EditorInterfaceGroupControlsItem) []EditorInterfaceGroupControlsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceSidebarItemArray returns new OptNilEditorInterfaceSidebarItemArray with value set to v.
func NewOptNilEditorInterfaceSidebarItemArray(v []EditorInterfaceSidebarItem) OptNilEditorInterfaceSidebarItemArray {
	return OptNilEditorInterfaceSidebarItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceSidebarItemArray is optional nullable []EditorInterfaceSidebarItem.
type OptNilEditorInterfaceSidebarItemArray struct {
	Value []EditorInterfaceSidebarItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceSidebarItemArray was set.
func (o OptNilEditorInterfaceSidebarItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceSidebarItemArray) Reset() {
	var v []EditorInterfaceSidebarItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceSidebarItemArray) SetTo(v []EditorInterfaceSidebarItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEditorInterfaceSidebarItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEditorInterfaceSidebarItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceSidebarItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceSidebarItemArray) Get() (v []EditorInterfaceSidebarItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceSidebarItemArray) Or(d []EditorInterfaceSidebarItem) []EditorInterfaceSidebarItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt) SetToNull() {
	o.Set = true
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPutEditorInterfaceReqControlsItemArray returns new OptNilPutEditorInterfaceReqControlsItemArray with value set to v.
func NewOptNilPutEditorInterfaceReqControlsItemArray(v []PutEditorInterfaceReqControlsItem) OptNilPutEditorInterfaceReqControlsItemArray {
	return OptNilPutEditorInterfaceReqControlsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilPutEditorInterfaceReqControlsItemArray is optional nullable []PutEditorInterfaceReqControlsItem.
type OptNilPutEditorInterfaceReqControlsItemArray struct {
	Value []PutEditorInterfaceReqControlsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPutEditorInterfaceReqControlsItemArray was set.
func (o OptNilPutEditorInterfaceReqControlsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPutEditorInterfaceReqControlsItemArray) Reset() {
	var v []PutEditorInterfaceReqControlsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPutEditorInterfaceReqControlsItemArray) SetTo(v []PutEditorInterfaceReqControlsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPutEditorInterfaceReqControlsItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPutEditorInterfaceReqControlsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []PutEditorInterfaceReqControlsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPutEditorInterfaceReqControlsItemArray) Get() (v []PutEditorInterfaceReqControlsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPutEditorInterfaceReqControlsItemArray) Or(d []PutEditorInterfaceReqControlsItem) []PutEditorInterfaceReqControlsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPutEditorInterfaceReqEditorLayoutItemArray returns new OptNilPutEditorInterfaceReqEditorLayoutItemArray with value set to v.
func NewOptNilPutEditorInterfaceReqEditorLayoutItemArray(v []PutEditorInterfaceReqEditorLayoutItem) OptNilPutEditorInterfaceReqEditorLayoutItemArray {
	return OptNilPutEditorInterfaceReqEditorLayoutItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilPutEditorInterfaceReqEditorLayoutItemArray is optional nullable []PutEditorInterfaceReqEditorLayoutItem.
type OptNilPutEditorInterfaceReqEditorLayoutItemArray struct {
	Value []PutEditorInterfaceReqEditorLayoutItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPutEditorInterfaceReqEditorLayoutItemArray was set.
func (o OptNilPutEditorInterfaceReqEditorLayoutItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPutEditorInterfaceReqEditorLayoutItemArray) Reset() {
	var v []PutEditorInterfaceReqEditorLayoutItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPutEditorInterfaceReqEditorLayoutItemArray) SetTo(v []PutEditorInterfaceReqEditorLayoutItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPutEditorInterfaceReqEditorLayoutItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPutEditorInterfaceReqEditorLayoutItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []PutEditorInterfaceReqEditorLayoutItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPutEditorInterfaceReqEditorLayoutItemArray) Get() (v []PutEditorInterfaceReqEditorLayoutItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPutEditorInterfaceReqEditorLayoutItemArray) Or(d []PutEditorInterfaceReqEditorLayoutItem) []PutEditorInterfaceReqEditorLayoutItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPutEditorInterfaceReqGroupControlsItemArray returns new OptNilPutEditorInterfaceReqGroupControlsItemArray with value set to v.
func NewOptNilPutEditorInterfaceReqGroupControlsItemArray(v []PutEditorInterfaceReqGroupControlsItem) OptNilPutEditorInterfaceReqGroupControlsItemArray {
	return OptNilPutEditorInterfaceReqGroupControlsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilPutEditorInterfaceReqGroupControlsItemArray is optional nullable []PutEditorInterfaceReqGroupControlsItem.
type OptNilPutEditorInterfaceReqGroupControlsItemArray struct {
	Value []PutEditorInterfaceReqGroupControlsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPutEditorInterfaceReqGroupControlsItemArray was set.
func (o OptNilPutEditorInterfaceReqGroupControlsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPutEditorInterfaceReqGroupControlsItemArray) Reset() {
	var v []PutEditorInterfaceReqGroupControlsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPutEditorInterfaceReqGroupControlsItemArray) SetTo(v []PutEditorInterfaceReqGroupControlsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPutEditorInterfaceReqGroupControlsItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPutEditorInterfaceReqGroupControlsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []PutEditorInterfaceReqGroupControlsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPutEditorInterfaceReqGroupControlsItemArray) Get() (v []PutEditorInterfaceReqGroupControlsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPutEditorInterfaceReqGroupControlsItemArray) Or(d []PutEditorInterfaceReqGroupControlsItem) []PutEditorInterfaceReqGroupControlsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPutEditorInterfaceReqSidebarItemArray returns new OptNilPutEditorInterfaceReqSidebarItemArray with value set to v.
func NewOptNilPutEditorInterfaceReqSidebarItemArray(v []PutEditorInterfaceReqSidebarItem) OptNilPutEditorInterfaceReqSidebarItemArray {
	return OptNilPutEditorInterfaceReqSidebarItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilPutEditorInterfaceReqSidebarItemArray is optional nullable []PutEditorInterfaceReqSidebarItem.
type OptNilPutEditorInterfaceReqSidebarItemArray struct {
	Value []PutEditorInterfaceReqSidebarItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPutEditorInterfaceReqSidebarItemArray was set.
func (o OptNilPutEditorInterfaceReqSidebarItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPutEditorInterfaceReqSidebarItemArray) Reset() {
	var v []PutEditorInterfaceReqSidebarItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPutEditorInterfaceReqSidebarItemArray) SetTo(v []PutEditorInterfaceReqSidebarItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPutEditorInterfaceReqSidebarItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPutEditorInterfaceReqSidebarItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []PutEditorInterfaceReqSidebarItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPutEditorInterfaceReqSidebarItemArray) Get() (v []PutEditorInterfaceReqSidebarItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPutEditorInterfaceReqSidebarItemArray) Or(d []PutEditorInterfaceReqSidebarItem) []PutEditorInterfaceReqSidebarItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPutContentTypeReqFieldsItemItems returns new OptPutContentTypeReqFieldsItemItems with value set to v.
func NewOptPutContentTypeReqFieldsItemItems(v PutContentTypeReqFieldsItemItems) OptPutContentTypeReqFieldsItemItems {
	return OptPutContentTypeReqFieldsItemItems{
		Value: v,
		Set:   true,
	}
}

// OptPutContentTypeReqFieldsItemItems is optional PutContentTypeReqFieldsItemItems.
type OptPutContentTypeReqFieldsItemItems struct {
	Value PutContentTypeReqFieldsItemItems
	Set   bool
}

// IsSet returns true if OptPutContentTypeReqFieldsItemItems was set.
func (o OptPutContentTypeReqFieldsItemItems) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPutContentTypeReqFieldsItemItems) Reset() {
	var v PutContentTypeReqFieldsItemItems
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPutContentTypeReqFieldsItemItems) SetTo(v PutContentTypeReqFieldsItemItems) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPutContentTypeReqFieldsItemItems) Get() (v PutContentTypeReqFieldsItemItems, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPutContentTypeReqFieldsItemItems) Or(d PutContentTypeReqFieldsItemItems) PutContentTypeReqFieldsItemItems {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Merged schema.
// Ref: #/components/schemas/PersonalAccessToken
type PersonalAccessToken struct {
	Sys       PersonalAccessTokenSys `json:"sys"`
	Name      string                 `json:"name"`
	Scopes    []string               `json:"scopes"`
	Token     OptString              `json:"token"`
	RevokedAt OptNilDateTime         `json:"revokedAt"`
}

// GetSys returns the value of Sys.
func (s *PersonalAccessToken) GetSys() PersonalAccessTokenSys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *PersonalAccessToken) GetName() string {
	return s.Name
}

// GetScopes returns the value of Scopes.
func (s *PersonalAccessToken) GetScopes() []string {
	return s.Scopes
}

// GetToken returns the value of Token.
func (s *PersonalAccessToken) GetToken() OptString {
	return s.Token
}

// GetRevokedAt returns the value of RevokedAt.
func (s *PersonalAccessToken) GetRevokedAt() OptNilDateTime {
	return s.RevokedAt
}

// SetSys sets the value of Sys.
func (s *PersonalAccessToken) SetSys(val PersonalAccessTokenSys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *PersonalAccessToken) SetName(val string) {
	s.Name = val
}

// SetScopes sets the value of Scopes.
func (s *PersonalAccessToken) SetScopes(val []string) {
	s.Scopes = val
}

// SetToken sets the value of Token.
func (s *PersonalAccessToken) SetToken(val OptString) {
	s.Token = val
}

// SetRevokedAt sets the value of RevokedAt.
func (s *PersonalAccessToken) SetRevokedAt(val OptNilDateTime) {
	s.RevokedAt = val
}

func (*PersonalAccessToken) createPersonalAccessTokenRes() {}
func (*PersonalAccessToken) getPersonalAccessTokenRes()    {}
func (*PersonalAccessToken) revokePersonalAccessTokenRes() {}

// Merged schema.
// Ref: #/components/schemas/PersonalAccessTokenSys
type PersonalAccessTokenSys struct {
	// Merged property.
	Type          PersonalAccessTokenSysType `json:"type"`
	ID            string                     `json:"id"`
	ExpiresAt     OptNilDateTime             `json:"expiresAt"`
	LastUsedAt    OptNilDateTime             `json:"lastUsedAt"`
	RedactedValue OptString                  `json:"redactedValue"`
}

// GetType returns the value of Type.
func (s *PersonalAccessTokenSys) GetType() PersonalAccessTokenSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *PersonalAccessTokenSys) GetID() string {
	return s.ID
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *PersonalAccessTokenSys) GetExpiresAt() OptNilDateTime {
	return s.ExpiresAt
}

// GetLastUsedAt returns the value of LastUsedAt.
func (s *PersonalAccessTokenSys) GetLastUsedAt() OptNilDateTime {
	return s.LastUsedAt
}

// GetRedactedValue returns the value of RedactedValue.
func (s *PersonalAccessTokenSys) GetRedactedValue() OptString {
	return s.RedactedValue
}

// SetType sets the value of Type.
func (s *PersonalAccessTokenSys) SetType(val PersonalAccessTokenSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *PersonalAccessTokenSys) SetID(val string) {
	s.ID = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *PersonalAccessTokenSys) SetExpiresAt(val OptNilDateTime) {
	s.ExpiresAt = val
}

// SetLastUsedAt sets the value of LastUsedAt.
func (s *PersonalAccessTokenSys) SetLastUsedAt(val OptNilDateTime) {
	s.LastUsedAt = val
}

// SetRedactedValue sets the value of RedactedValue.
func (s *PersonalAccessTokenSys) SetRedactedValue(val OptString) {
	s.RedactedValue = val
}

// Merged schema.
type PersonalAccessTokenSysType string

const (
	PersonalAccessTokenSysTypePersonalAccessToken PersonalAccessTokenSysType = "PersonalAccessToken"
)

// AllValues returns all PersonalAccessTokenSysType values.
func (PersonalAccessTokenSysType) AllValues() []PersonalAccessTokenSysType {
	return []PersonalAccessTokenSysType{
		PersonalAccessTokenSysTypePersonalAccessToken,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PersonalAccessTokenSysType) MarshalText() ([]byte, error) {
	switch s {
	case PersonalAccessTokenSysTypePersonalAccessToken:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PersonalAccessTokenSysType) UnmarshalText(data []byte) error {
	switch PersonalAccessTokenSysType(data) {
	case PersonalAccessTokenSysTypePersonalAccessToken:
		*s = PersonalAccessTokenSysTypePersonalAccessToken
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/PreviewApiKey
type PreviewApiKey struct {
	Sys          PreviewApiKeySys  `json:"sys"`
	Name         string            `json:"name"`
	Description  OptNilString      `json:"description"`
	AccessToken  string            `json:"accessToken"`
	Environments []EnvironmentLink `json:"environments"`
}

// GetSys returns the value of Sys.
func (s *PreviewApiKey) GetSys() PreviewApiKeySys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *PreviewApiKey) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *PreviewApiKey) GetDescription() OptNilString {
	return s.Description
}

// GetAccessToken returns the value of AccessToken.
func (s *PreviewApiKey) GetAccessToken() string {
	return s.AccessToken
}

// GetEnvironments returns the value of Environments.
func (s *PreviewApiKey) GetEnvironments() []EnvironmentLink {
	return s.Environments
}

// SetSys sets the value of Sys.
func (s *PreviewApiKey) SetSys(val PreviewApiKeySys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *PreviewApiKey) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *PreviewApiKey) SetDescription(val OptNilString) {
	s.Description = val
}

// SetAccessToken sets the value of AccessToken.
func (s *PreviewApiKey) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetEnvironments sets the value of Environments.
func (s *PreviewApiKey) SetEnvironments(val []EnvironmentLink) {
	s.Environments = val
}

func (*PreviewApiKey) getPreviewApiKeyRes() {}

// Merged schema.
// Ref: #/components/schemas/PreviewApiKeySys
type PreviewApiKeySys struct {
	// Merged property.
	Type      PreviewApiKeySysType `json:"type"`
	ID        string               `json:"id"`
	Version   int                  `json:"version"`
	CreatedAt OptDateTime          `json:"createdAt"`
	UpdatedAt OptDateTime          `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *PreviewApiKeySys) GetType() PreviewApiKeySysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *PreviewApiKeySys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *PreviewApiKeySys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PreviewApiKeySys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PreviewApiKeySys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *PreviewApiKeySys) SetType(val PreviewApiKeySysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *PreviewApiKeySys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *PreviewApiKeySys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PreviewApiKeySys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PreviewApiKeySys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type PreviewApiKeySysType string

const (
	PreviewApiKeySysTypePreviewApiKey PreviewApiKeySysType = "PreviewApiKey"
)

// AllValues returns all PreviewApiKeySysType values.
func (PreviewApiKeySysType) AllValues() []PreviewApiKeySysType {
	return []PreviewApiKeySysType{
		PreviewApiKeySysTypePreviewApiKey,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PreviewApiKeySysType) MarshalText() ([]byte, error) {
	switch s {
	case PreviewApiKeySysTypePreviewApiKey:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PreviewApiKeySysType) UnmarshalText(data []byte) error {
	switch PreviewApiKeySysType(data) {
	case PreviewApiKeySysTypePreviewApiKey:
		*s = PreviewApiKeySysTypePreviewApiKey
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PutAppInstallationReq struct {
	Parameters jx.Raw `json:"parameters"`
}

// GetParameters returns the value of Parameters.
func (s *PutAppInstallationReq) GetParameters() jx.Raw {
	return s.Parameters
}

// SetParameters sets the value of Parameters.
func (s *PutAppInstallationReq) SetParameters(val jx.Raw) {
	s.Parameters = val
}

type PutContentTypeCreated ContentType

func (*PutContentTypeCreated) putContentTypeRes() {}

type PutContentTypeOK ContentType

func (*PutContentTypeOK) putContentTypeRes() {}

type PutContentTypeReq struct {
	Name         string                        `json:"name"`
	Description  string                        `json:"description"`
	DisplayField string                        `json:"displayField"`
	Fields       []PutContentTypeReqFieldsItem `json:"fields"`
}

// GetName returns the value of Name.
func (s *PutContentTypeReq) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *PutContentTypeReq) GetDescription() string {
	return s.Description
}

// GetDisplayField returns the value of DisplayField.
func (s *PutContentTypeReq) GetDisplayField() string {
	return s.DisplayField
}

// GetFields returns the value of Fields.
func (s *PutContentTypeReq) GetFields() []PutContentTypeReqFieldsItem {
	return s.Fields
}

// SetName sets the value of Name.
func (s *PutContentTypeReq) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *PutContentTypeReq) SetDescription(val string) {
	s.Description = val
}

// SetDisplayField sets the value of DisplayField.
func (s *PutContentTypeReq) SetDisplayField(val string) {
	s.DisplayField = val
}

// SetFields sets the value of Fields.
func (s *PutContentTypeReq) SetFields(val []PutContentTypeReqFieldsItem) {
	s.Fields = val
}

type PutContentTypeReqFieldsItem struct {
	ID           string                              `json:"id"`
	Name         string                              `json:"name"`
	Type         string                              `json:"type"`
	LinkType     OptString                           `json:"linkType"`
	Items        OptPutContentTypeReqFieldsItemItems `json:"items"`
	Localized    OptBool                             `json:"localized"`
	Omitted      OptBool                             `json:"omitted"`
	Required     OptBool                             `json:"required"`
	Disabled     OptBool                             `json:"disabled"`
	DefaultValue jx.Raw                              `json:"defaultValue"`
	Validations  []jx.Raw                            `json:"validations"`
}

// GetID returns the value of ID.
func (s *PutContentTypeReqFieldsItem) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *PutContentTypeReqFieldsItem) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *PutContentTypeReqFieldsItem) GetType() string {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *PutContentTypeReqFieldsItem) GetLinkType() OptString {
	return s.LinkType
}

// GetItems returns the value of Items.
func (s *PutContentTypeReqFieldsItem) GetItems() OptPutContentTypeReqFieldsItemItems {
	return s.Items
}

// GetLocalized returns the value of Localized.
func (s *PutContentTypeReqFieldsItem) GetLocalized() OptBool {
	return s.Localized
}

// GetOmitted returns the value of Omitted.
func (s *PutContentTypeReqFieldsItem) GetOmitted() OptBool {
	return s.Omitted
}

// GetRequired returns the value of Required.
func (s *PutContentTypeReqFieldsItem) GetRequired() OptBool {
	return s.Required
}

// GetDisabled returns the value of Disabled.
func (s *PutContentTypeReqFieldsItem) GetDisabled() OptBool {
	return s.Disabled
}

// GetDefaultValue returns the value of DefaultValue.
func (s *PutContentTypeReqFieldsItem) GetDefaultValue() jx.Raw {
	return s.DefaultValue
}

// GetValidations returns the value of Validations.
func (s *PutContentTypeReqFieldsItem) GetValidations() []jx.Raw {
	return s.Validations
}

// SetID sets the value of ID.
func (s *PutContentTypeReqFieldsItem) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PutContentTypeReqFieldsItem) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *PutContentTypeReqFieldsItem) SetType(val string) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *PutContentTypeReqFieldsItem) SetLinkType(val OptString) {
	s.LinkType = val
}

// SetItems sets the value of Items.
func (s *PutContentTypeReqFieldsItem) SetItems(val OptPutContentTypeReqFieldsItemItems) {
	s.Items = val
}

// SetLocalized sets the value of Localized.
func (s *PutContentTypeReqFieldsItem) SetLocalized(val OptBool) {
	s.Localized = val
}

// SetOmitted sets the value of Omitted.
func (s *PutContentTypeReqFieldsItem) SetOmitted(val OptBool) {
	s.Omitted = val
}

// SetRequired sets the value of Required.
func (s *PutContentTypeReqFieldsItem) SetRequired(val OptBool) {
	s.Required = val
}

// SetDisabled sets the value of Disabled.
func (s *PutContentTypeReqFieldsItem) SetDisabled(val OptBool) {
	s.Disabled = val
}

// SetDefaultValue sets the value of DefaultValue.
func (s *PutContentTypeReqFieldsItem) SetDefaultValue(val jx.Raw) {
	s.DefaultValue = val
}

// SetValidations sets the value of Validations.
func (s *PutContentTypeReqFieldsItem) SetValidations(val []jx.Raw) {
	s.Validations = val
}

type PutContentTypeReqFieldsItemItems struct {
	Type        OptString `json:"type"`
	LinkType    OptString `json:"linkType"`
	Validations []jx.Raw  `json:"validations"`
}

// GetType returns the value of Type.
func (s *PutContentTypeReqFieldsItemItems) GetType() OptString {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *PutContentTypeReqFieldsItemItems) GetLinkType() OptString {
	return s.LinkType
}

// GetValidations returns the value of Validations.
func (s *PutContentTypeReqFieldsItemItems) GetValidations() []jx.Raw {
	return s.Validations
}

// SetType sets the value of Type.
func (s *PutContentTypeReqFieldsItemItems) SetType(val OptString) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *PutContentTypeReqFieldsItemItems) SetLinkType(val OptString) {
	s.LinkType = val
}

// SetValidations sets the value of Validations.
func (s *PutContentTypeReqFieldsItemItems) SetValidations(val []jx.Raw) {
	s.Validations = val
}

type PutEditorInterfaceReq struct {
	EditorLayout  OptNilPutEditorInterfaceReqEditorLayoutItemArray  `json:"editorLayout"`
	Controls      OptNilPutEditorInterfaceReqControlsItemArray      `json:"controls"`
	GroupControls OptNilPutEditorInterfaceReqGroupControlsItemArray `json:"groupControls"`
	Sidebar       OptNilPutEditorInterfaceReqSidebarItemArray       `json:"sidebar"`
}

// GetEditorLayout returns the value of EditorLayout.
func (s *PutEditorInterfaceReq) GetEditorLayout() OptNilPutEditorInterfaceReqEditorLayoutItemArray {
	return s.EditorLayout
}

// GetControls returns the value of Controls.
func (s *PutEditorInterfaceReq) GetControls() OptNilPutEditorInterfaceReqControlsItemArray {
	return s.Controls
}

// GetGroupControls returns the value of GroupControls.
func (s *PutEditorInterfaceReq) GetGroupControls() OptNilPutEditorInterfaceReqGroupControlsItemArray {
	return s.GroupControls
}

// GetSidebar returns the value of Sidebar.
func (s *PutEditorInterfaceReq) GetSidebar() OptNilPutEditorInterfaceReqSidebarItemArray {
	return s.Sidebar
}

// SetEditorLayout sets the value of EditorLayout.
func (s *PutEditorInterfaceReq) SetEditorLayout(val OptNilPutEditorInterfaceReqEditorLayoutItemArray) {
	s.EditorLayout = val
}

// SetControls sets the value of Controls.
func (s *PutEditorInterfaceReq) SetControls(val OptNilPutEditorInterfaceReqControlsItemArray) {
	s.Controls = val
}

// SetGroupControls sets the value of GroupControls.
func (s *PutEditorInterfaceReq) SetGroupControls(val OptNilPutEditorInterfaceReqGroupControlsItemArray) {
	s.GroupControls = val
}

// SetSidebar sets the value of Sidebar.
func (s *PutEditorInterfaceReq) SetSidebar(val OptNilPutEditorInterfaceReqSidebarItemArray) {
	s.Sidebar = val
}

type PutEditorInterfaceReqControlsItem struct {
	FieldId         string    `json:"fieldId"`
	WidgetNamespace OptString `json:"widgetNamespace"`
	WidgetId        OptString `json:"widgetId"`
	Settings        jx.Raw    `json:"settings"`
}

// GetFieldId returns the value of FieldId.
func (s *PutEditorInterfaceReqControlsItem) GetFieldId() string {
	return s.FieldId
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *PutEditorInterfaceReqControlsItem) GetWidgetNamespace() OptString {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *PutEditorInterfaceReqControlsItem) GetWidgetId() OptString {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *PutEditorInterfaceReqControlsItem) GetSettings() jx.Raw {
	return s.Settings
}

// SetFieldId sets the value of FieldId.
func (s *PutEditorInterfaceReqControlsItem) SetFieldId(val string) {
	s.FieldId = val
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *PutEditorInterfaceReqControlsItem) SetWidgetNamespace(val OptString) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *PutEditorInterfaceReqControlsItem) SetWidgetId(val OptString) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *PutEditorInterfaceReqControlsItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

type PutEditorInterfaceReqEditorLayoutItem struct {
	GroupId string   `json:"groupId"`
	Name    string   `json:"name"`
	Items   []jx.Raw `json:"items"`
}

// GetGroupId returns the value of GroupId.
func (s *PutEditorInterfaceReqEditorLayoutItem) GetGroupId() string {
	return s.GroupId
}

// GetName returns the value of Name.
func (s *PutEditorInterfaceReqEditorLayoutItem) GetName() string {
	return s.Name
}

// GetItems returns the value of Items.
func (s *PutEditorInterfaceReqEditorLayoutItem) GetItems() []jx.Raw {
	return s.Items
}

// SetGroupId sets the value of GroupId.
func (s *PutEditorInterfaceReqEditorLayoutItem) SetGroupId(val string) {
	s.GroupId = val
}

// SetName sets the value of Name.
func (s *PutEditorInterfaceReqEditorLayoutItem) SetName(val string) {
	s.Name = val
}

// SetItems sets the value of Items.
func (s *PutEditorInterfaceReqEditorLayoutItem) SetItems(val []jx.Raw) {
	s.Items = val
}

type PutEditorInterfaceReqGroupControlsItem struct {
	GroupId         string    `json:"groupId"`
	WidgetNamespace OptString `json:"widgetNamespace"`
	WidgetId        OptString `json:"widgetId"`
	Settings        jx.Raw    `json:"settings"`
}

// GetGroupId returns the value of GroupId.
func (s *PutEditorInterfaceReqGroupControlsItem) GetGroupId() string {
	return s.GroupId
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *PutEditorInterfaceReqGroupControlsItem) GetWidgetNamespace() OptString {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *PutEditorInterfaceReqGroupControlsItem) GetWidgetId() OptString {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *PutEditorInterfaceReqGroupControlsItem) GetSettings() jx.Raw {
	return s.Settings
}

// SetGroupId sets the value of GroupId.
func (s *PutEditorInterfaceReqGroupControlsItem) SetGroupId(val string) {
	s.GroupId = val
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *PutEditorInterfaceReqGroupControlsItem) SetWidgetNamespace(val OptString) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *PutEditorInterfaceReqGroupControlsItem) SetWidgetId(val OptString) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *PutEditorInterfaceReqGroupControlsItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

type PutEditorInterfaceReqSidebarItem struct {
	WidgetNamespace string  `json:"widgetNamespace"`
	WidgetId        string  `json:"widgetId"`
	Settings        jx.Raw  `json:"settings"`
	Disabled        OptBool `json:"disabled"`
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *PutEditorInterfaceReqSidebarItem) GetWidgetNamespace() string {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *PutEditorInterfaceReqSidebarItem) GetWidgetId() string {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *PutEditorInterfaceReqSidebarItem) GetSettings() jx.Raw {
	return s.Settings
}

// GetDisabled returns the value of Disabled.
func (s *PutEditorInterfaceReqSidebarItem) GetDisabled() OptBool {
	return s.Disabled
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *PutEditorInterfaceReqSidebarItem) SetWidgetNamespace(val string) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *PutEditorInterfaceReqSidebarItem) SetWidgetId(val string) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *PutEditorInterfaceReqSidebarItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

// SetDisabled sets the value of Disabled.
func (s *PutEditorInterfaceReqSidebarItem) SetDisabled(val OptBool) {
	s.Disabled = val
}

// Merged schema.
// Ref: #/components/schemas/Role
type Role struct {
	Sys         RoleSys            `json:"sys"`
	Name        string             `json:"name"`
	Description OptNilString       `json:"description"`
	Permissions RolePermissions    `json:"permissions"`
	Policies    []RolePoliciesItem `json:"policies"`
}

// GetSys returns the value of Sys.
func (s *Role) GetSys() RoleSys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *Role) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Role) GetDescription() OptNilString {
	return s.Description
}

// GetPermissions returns the value of Permissions.
func (s *Role) GetPermissions() RolePermissions {
	return s.Permissions
}

// GetPolicies returns the value of Policies.
func (s *Role) GetPolicies() []RolePoliciesItem {
	return s.Policies
}

// SetSys sets the value of Sys.
func (s *Role) SetSys(val RoleSys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *Role) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Role) SetDescription(val OptNilString) {
	s.Description = val
}

// SetPermissions sets the value of Permissions.
func (s *Role) SetPermissions(val RolePermissions) {
	s.Permissions = val
}

// SetPolicies sets the value of Policies.
func (s *Role) SetPolicies(val []RolePoliciesItem) {
	s.Policies = val
}

func (*Role) createRoleRes() {}
func (*Role) getRoleRes()    {}
func (*Role) updateRoleRes() {}

type RolePermissions map[string]RolePermissionsItem

func (s *RolePermissions) init() RolePermissions {
	m := *s
	if m == nil {
		m = map[string]RolePermissionsItem{}
		*s = m
	}
	return m
}

// RolePermissionsItem represents sum type.
type RolePermissionsItem struct {
	Type        RolePermissionsItemType // switch on this field
	String      string
	StringArray []string
}

// RolePermissionsItemType is oneOf type of RolePermissionsItem.
type RolePermissionsItemType string

// Possible values for RolePermissionsItemType.
const (
	StringRolePermissionsItem      RolePermissionsItemType = "string"
	StringArrayRolePermissionsItem RolePermissionsItemType = "[]string"
)

// IsString reports whether RolePermissionsItem is string.
func (s RolePermissionsItem) IsString() bool { return s.Type == StringRolePermissionsItem }

// IsStringArray reports whether RolePermissionsItem is []string.
func (s RolePermissionsItem) IsStringArray() bool { return s.Type == StringArrayRolePermissionsItem }

// SetString sets RolePermissionsItem to string.
func (s *RolePermissionsItem) SetString(v string) {
	s.Type = StringRolePermissionsItem
	s.String = v
}

// GetString returns string and true boolean if RolePermissionsItem is string.
func (s RolePermissionsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringRolePermissionsItem returns new RolePermissionsItem from string.
func NewStringRolePermissionsItem(v string) RolePermissionsItem {
	var s RolePermissionsItem
	s.SetString(v)
	return s
}

// SetStringArray sets RolePermissionsItem to []string.
func (s *RolePermissionsItem) SetStringArray(v []string) {
	s.Type = StringArrayRolePermissionsItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if RolePermissionsItem is []string.
func (s RolePermissionsItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayRolePermissionsItem returns new RolePermissionsItem from []string.
func NewStringArrayRolePermissionsItem(v []string) RolePermissionsItem {
	var s RolePermissionsItem
	s.SetStringArray(v)
	return s
}

type RolePoliciesItem struct {
	Effect     RolePoliciesItemEffect  `json:"effect"`
	Actions    RolePoliciesItemActions `json:"actions"`
	Constraint jx.Raw                  `json:"constraint"`
}

// GetEffect returns the value of Effect.
func (s *RolePoliciesItem) GetEffect() RolePoliciesItemEffect {
	return s.Effect
}

// GetActions returns the value of Actions.
func (s *RolePoliciesItem) GetActions() RolePoliciesItemActions {
	return s.Actions
}

// GetConstraint returns the value of Constraint.
func (s *RolePoliciesItem) GetConstraint() jx.Raw {
	return s.Constraint
}

// SetEffect sets the value of Effect.
func (s *RolePoliciesItem) SetEffect(val RolePoliciesItemEffect) {
	s.Effect = val
}

// SetActions sets the value of Actions.
func (s *RolePoliciesItem) SetActions(val RolePoliciesItemActions) {
	s.Actions = val
}

// SetConstraint sets the value of Constraint.
func (s *RolePoliciesItem) SetConstraint(val jx.Raw) {
	s.Constraint = val
}

// RolePoliciesItemActions represents sum type.
type RolePoliciesItemActions struct {
	Type        RolePoliciesItemActionsType // switch on this field
	String      string
	StringArray []string
}

// RolePoliciesItemActionsType is oneOf type of RolePoliciesItemActions.
type RolePoliciesItemActionsType string

// Possible values for RolePoliciesItemActionsType.
const (
	StringRolePoliciesItemActions      RolePoliciesItemActionsType = "string"
	StringArrayRolePoliciesItemActions RolePoliciesItemActionsType = "[]string"
)

// IsString reports whether RolePoliciesItemActions is string.
func (s RolePoliciesItemActions) IsString() bool { return s.Type == StringRolePoliciesItemActions }

// IsStringArray reports whether RolePoliciesItemActions is []string.
func (s RolePoliciesItemActions) IsStringArray() bool {
	return s.Type == StringArrayRolePoliciesItemActions
}

// SetString sets RolePoliciesItemActions to string.
func (s *RolePoliciesItemActions) SetString(v string) {
	s.Type = StringRolePoliciesItemActions
	s.String = v
}

// GetString returns string and true boolean if RolePoliciesItemActions is string.
func (s RolePoliciesItemActions) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringRolePoliciesItemActions returns new RolePoliciesItemActions from string.
func NewStringRolePoliciesItemActions(v string) RolePoliciesItemActions {
	var s RolePoliciesItemActions
	s.SetString(v)
	return s
}

// SetStringArray sets RolePoliciesItemActions to []string.
func (s *RolePoliciesItemActions) SetStringArray(v []string) {
	s.Type = StringArrayRolePoliciesItemActions
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if RolePoliciesItemActions is []string.
func (s RolePoliciesItemActions) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayRolePoliciesItemActions returns new RolePoliciesItemActions from []string.
func NewStringArrayRolePoliciesItemActions(v []string) RolePoliciesItemActions {
	var s RolePoliciesItemActions
	s.SetStringArray(v)
	return s
}

type RolePoliciesItemEffect string

const (
	RolePoliciesItemEffectAllow RolePoliciesItemEffect = "allow"
	RolePoliciesItemEffectDeny  RolePoliciesItemEffect = "deny"
)

// AllValues returns all RolePoliciesItemEffect values.
func (RolePoliciesItemEffect) AllValues() []RolePoliciesItemEffect {
	return []RolePoliciesItemEffect{
		RolePoliciesItemEffectAllow,
		RolePoliciesItemEffectDeny,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RolePoliciesItemEffect) MarshalText() ([]byte, error) {
	switch s {
	case RolePoliciesItemEffectAllow:
		return []byte(s), nil
	case RolePoliciesItemEffectDeny:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RolePoliciesItemEffect) UnmarshalText(data []byte) error {
	switch RolePoliciesItemEffect(data) {
	case RolePoliciesItemEffectAllow:
		*s = RolePoliciesItemEffectAllow
		return nil
	case RolePoliciesItemEffectDeny:
		*s = RolePoliciesItemEffectDeny
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/RoleSys
type RoleSys struct {
	// Merged property.
	Type      RoleSysType `json:"type"`
	ID        string      `json:"id"`
	Version   int         `json:"version"`
	CreatedAt OptDateTime `json:"createdAt"`
	UpdatedAt OptDateTime `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *RoleSys) GetType() RoleSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *RoleSys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *RoleSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RoleSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *RoleSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *RoleSys) SetType(val RoleSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *RoleSys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *RoleSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RoleSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *RoleSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type RoleSysType string

const (
	RoleSysTypeRole RoleSysType = "Role"
)

// AllValues returns all RoleSysType values.
func (RoleSysType) AllValues() []RoleSysType {
	return []RoleSysType{
		RoleSysTypeRole,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RoleSysType) MarshalText() ([]byte, error) {
	switch s {
	case RoleSysTypeRole:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RoleSysType) UnmarshalText(data []byte) error {
	switch RoleSysType(data) {
	case RoleSysTypeRole:
		*s = RoleSysTypeRole
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateDeliveryApiKeyReq struct {
	Name         string            `json:"name"`
	Description  OptNilString      `json:"description"`
	Environments []EnvironmentLink `json:"environments"`
}

// GetName returns the value of Name.
func (s *UpdateDeliveryApiKeyReq) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *UpdateDeliveryApiKeyReq) GetDescription() OptNilString {
	return s.Description
}

// GetEnvironments returns the value of Environments.
func (s *UpdateDeliveryApiKeyReq) GetEnvironments() []EnvironmentLink {
	return s.Environments
}

// SetName sets the value of Name.
func (s *UpdateDeliveryApiKeyReq) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *UpdateDeliveryApiKeyReq) SetDescription(val OptNilString) {
	s.Description = val
}

// SetEnvironments sets the value of Environments.
func (s *UpdateDeliveryApiKeyReq) SetEnvironments(val []EnvironmentLink) {
	s.Environments = val
}

type UpdateRoleReq struct {
	Name        string                      `json:"name"`
	Description OptNilString                `json:"description"`
	Permissions UpdateRoleReqPermissions    `json:"permissions"`
	Policies    []UpdateRoleReqPoliciesItem `json:"policies"`
}

// GetName returns the value of Name.
func (s *UpdateRoleReq) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *UpdateRoleReq) GetDescription() OptNilString {
	return s.Description
}

// GetPermissions returns the value of Permissions.
func (s *UpdateRoleReq) GetPermissions() UpdateRoleReqPermissions {
	return s.Permissions
}

// GetPolicies returns the value of Policies.
func (s *UpdateRoleReq) GetPolicies() []UpdateRoleReqPoliciesItem {
	return s.Policies
}

// SetName sets the value of Name.
func (s *UpdateRoleReq) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *UpdateRoleReq) SetDescription(val OptNilString) {
	s.Description = val
}

// SetPermissions sets the value of Permissions.
func (s *UpdateRoleReq) SetPermissions(val UpdateRoleReqPermissions) {
	s.Permissions = val
}

// SetPolicies sets the value of Policies.
func (s *UpdateRoleReq) SetPolicies(val []UpdateRoleReqPoliciesItem) {
	s.Policies = val
}

type UpdateRoleReqPermissions map[string]UpdateRoleReqPermissionsItem

func (s *UpdateRoleReqPermissions) init() UpdateRoleReqPermissions {
	m := *s
	if m == nil {
		m = map[string]UpdateRoleReqPermissionsItem{}
		*s = m
	}
	return m
}

// UpdateRoleReqPermissionsItem represents sum type.
type UpdateRoleReqPermissionsItem struct {
	Type        UpdateRoleReqPermissionsItemType // switch on this field
	String      string
	StringArray []string
}

// UpdateRoleReqPermissionsItemType is oneOf type of UpdateRoleReqPermissionsItem.
type UpdateRoleReqPermissionsItemType string

// Possible values for UpdateRoleReqPermissionsItemType.
const (
	StringUpdateRoleReqPermissionsItem      UpdateRoleReqPermissionsItemType = "string"
	StringArrayUpdateRoleReqPermissionsItem UpdateRoleReqPermissionsItemType = "[]string"
)

// IsString reports whether UpdateRoleReqPermissionsItem is string.
func (s UpdateRoleReqPermissionsItem) IsString() bool {
	return s.Type == StringUpdateRoleReqPermissionsItem
}

// IsStringArray reports whether UpdateRoleReqPermissionsItem is []string.
func (s UpdateRoleReqPermissionsItem) IsStringArray() bool {
	return s.Type == StringArrayUpdateRoleReqPermissionsItem
}

// SetString sets UpdateRoleReqPermissionsItem to string.
func (s *UpdateRoleReqPermissionsItem) SetString(v string) {
	s.Type = StringUpdateRoleReqPermissionsItem
	s.String = v
}

// GetString returns string and true boolean if UpdateRoleReqPermissionsItem is string.
func (s UpdateRoleReqPermissionsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringUpdateRoleReqPermissionsItem returns new UpdateRoleReqPermissionsItem from string.
func NewStringUpdateRoleReqPermissionsItem(v string) UpdateRoleReqPermissionsItem {
	var s UpdateRoleReqPermissionsItem
	s.SetString(v)
	return s
}

// SetStringArray sets UpdateRoleReqPermissionsItem to []string.
func (s *UpdateRoleReqPermissionsItem) SetStringArray(v []string) {
	s.Type = StringArrayUpdateRoleReqPermissionsItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if UpdateRoleReqPermissionsItem is []string.
func (s UpdateRoleReqPermissionsItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayUpdateRoleReqPermissionsItem returns new UpdateRoleReqPermissionsItem from []string.
func NewStringArrayUpdateRoleReqPermissionsItem(v []string) UpdateRoleReqPermissionsItem {
	var s UpdateRoleReqPermissionsItem
	s.SetStringArray(v)
	return s
}

type UpdateRoleReqPoliciesItem struct {
	Effect     UpdateRoleReqPoliciesItemEffect  `json:"effect"`
	Actions    UpdateRoleReqPoliciesItemActions `json:"actions"`
	Constraint jx.Raw                           `json:"constraint"`
}

// GetEffect returns the value of Effect.
func (s *UpdateRoleReqPoliciesItem) GetEffect() UpdateRoleReqPoliciesItemEffect {
	return s.Effect
}

// GetActions returns the value of Actions.
func (s *UpdateRoleReqPoliciesItem) GetActions() UpdateRoleReqPoliciesItemActions {
	return s.Actions
}

// GetConstraint returns the value of Constraint.
func (s *UpdateRoleReqPoliciesItem) GetConstraint() jx.Raw {
	return s.Constraint
}

// SetEffect sets the value of Effect.
func (s *UpdateRoleReqPoliciesItem) SetEffect(val UpdateRoleReqPoliciesItemEffect) {
	s.Effect = val
}

// SetActions sets the value of Actions.
func (s *UpdateRoleReqPoliciesItem) SetActions(val UpdateRoleReqPoliciesItemActions) {
	s.Actions = val
}

// SetConstraint sets the value of Constraint.
func (s *UpdateRoleReqPoliciesItem) SetConstraint(val jx.Raw) {
	s.Constraint = val
}

// UpdateRoleReqPoliciesItemActions represents sum type.
type UpdateRoleReqPoliciesItemActions struct {
	Type        UpdateRoleReqPoliciesItemActionsType // switch on this field
	String      string
	StringArray []string
}

// UpdateRoleReqPoliciesItemActionsType is oneOf type of UpdateRoleReqPoliciesItemActions.
type UpdateRoleReqPoliciesItemActionsType string

// Possible values for UpdateRoleReqPoliciesItemActionsType.
const (
	StringUpdateRoleReqPoliciesItemActions      UpdateRoleReqPoliciesItemActionsType = "string"
	StringArrayUpdateRoleReqPoliciesItemActions UpdateRoleReqPoliciesItemActionsType = "[]string"
)

// IsString reports whether UpdateRoleReqPoliciesItemActions is string.
func (s UpdateRoleReqPoliciesItemActions) IsString() bool {
	return s.Type == StringUpdateRoleReqPoliciesItemActions
}

// IsStringArray reports whether UpdateRoleReqPoliciesItemActions is []string.
func (s UpdateRoleReqPoliciesItemActions) IsStringArray() bool {
	return s.Type == StringArrayUpdateRoleReqPoliciesItemActions
}

// SetString sets UpdateRoleReqPoliciesItemActions to string.
func (s *UpdateRoleReqPoliciesItemActions) SetString(v string) {
	s.Type = StringUpdateRoleReqPoliciesItemActions
	s.String = v
}

// GetString returns string and true boolean if UpdateRoleReqPoliciesItemActions is string.
func (s UpdateRoleReqPoliciesItemActions) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringUpdateRoleReqPoliciesItemActions returns new UpdateRoleReqPoliciesItemActions from string.
func NewStringUpdateRoleReqPoliciesItemActions(v string) UpdateRoleReqPoliciesItemActions {
	var s UpdateRoleReqPoliciesItemActions
	s.SetString(v)
	return s
}

// SetStringArray sets UpdateRoleReqPoliciesItemActions to []string.
func (s *UpdateRoleReqPoliciesItemActions) SetStringArray(v []string) {
	s.Type = StringArrayUpdateRoleReqPoliciesItemActions
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if UpdateRoleReqPoliciesItemActions is []string.
func (s UpdateRoleReqPoliciesItemActions) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayUpdateRoleReqPoliciesItemActions returns new UpdateRoleReqPoliciesItemActions from []string.
func NewStringArrayUpdateRoleReqPoliciesItemActions(v []string) UpdateRoleReqPoliciesItemActions {
	var s UpdateRoleReqPoliciesItemActions
	s.SetStringArray(v)
	return s
}

type UpdateRoleReqPoliciesItemEffect string

const (
	UpdateRoleReqPoliciesItemEffectAllow UpdateRoleReqPoliciesItemEffect = "allow"
	UpdateRoleReqPoliciesItemEffectDeny  UpdateRoleReqPoliciesItemEffect = "deny"
)

// AllValues returns all UpdateRoleReqPoliciesItemEffect values.
func (UpdateRoleReqPoliciesItemEffect) AllValues() []UpdateRoleReqPoliciesItemEffect {
	return []UpdateRoleReqPoliciesItemEffect{
		UpdateRoleReqPoliciesItemEffectAllow,
		UpdateRoleReqPoliciesItemEffectDeny,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateRoleReqPoliciesItemEffect) MarshalText() ([]byte, error) {
	switch s {
	case UpdateRoleReqPoliciesItemEffectAllow:
		return []byte(s), nil
	case UpdateRoleReqPoliciesItemEffectDeny:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateRoleReqPoliciesItemEffect) UnmarshalText(data []byte) error {
	switch UpdateRoleReqPoliciesItemEffect(data) {
	case UpdateRoleReqPoliciesItemEffectAllow:
		*s = UpdateRoleReqPoliciesItemEffectAllow
		return nil
	case UpdateRoleReqPoliciesItemEffectDeny:
		*s = UpdateRoleReqPoliciesItemEffectDeny
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/User
type User struct {
	Sys       UserSys `json:"sys"`
	Email     string  `json:"email"`
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
}

// GetSys returns the value of Sys.
func (s *User) GetSys() UserSys {
	return s.Sys
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() string {
	return s.Email
}

// GetFirstName returns the value of FirstName.
func (s *User) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *User) GetLastName() string {
	return s.LastName
}

// SetSys sets the value of Sys.
func (s *User) SetSys(val UserSys) {
	s.Sys = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val string) {
	s.Email = val
}

// SetFirstName sets the value of FirstName.
func (s *User) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *User) SetLastName(val string) {
	s.LastName = val
}

func (*User) getAuthenticatedUserRes() {}

// Merged schema.
// Ref: #/components/schemas/UserSys
type UserSys struct {
	// Merged property.
	Type      UserSysType `json:"type"`
	ID        string      `json:"id"`
	Version   int         `json:"version"`
	CreatedAt OptDateTime `json:"createdAt"`
	UpdatedAt OptDateTime `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *UserSys) GetType() UserSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *UserSys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *UserSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UserSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *UserSys) SetType(val UserSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *UserSys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *UserSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UserSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type UserSysType string

const (
	UserSysTypeUser UserSysType = "User"
)

// AllValues returns all UserSysType values.
func (UserSysType) AllValues() []UserSysType {
	return []UserSysType{
		UserSysTypeUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserSysType) MarshalText() ([]byte, error) {
	switch s {
	case UserSysTypeUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserSysType) UnmarshalText(data []byte) error {
	switch UserSysType(data) {
	case UserSysTypeUser:
		*s = UserSysTypeUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
