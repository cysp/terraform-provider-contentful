// Code generated by ogen, DO NOT EDIT.

package client

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

type AccessToken struct {
	Token string
}

// GetToken returns the value of Token.
func (s *AccessToken) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *AccessToken) SetToken(val string) {
	s.Token = val
}

// Merged schema.
// Ref: #/components/schemas/ApiKey
type ApiKey struct {
	Sys           ApiKeySys              `json:"sys"`
	Name          string                 `json:"name"`
	Description   OptNilString           `json:"description"`
	Environments  []EnvironmentLink      `json:"environments"`
	AccessToken   string                 `json:"accessToken"`
	PreviewAPIKey OptApiKeyPreviewAPIKey `json:"preview_api_key"`
}

// GetSys returns the value of Sys.
func (s *ApiKey) GetSys() ApiKeySys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *ApiKey) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ApiKey) GetDescription() OptNilString {
	return s.Description
}

// GetEnvironments returns the value of Environments.
func (s *ApiKey) GetEnvironments() []EnvironmentLink {
	return s.Environments
}

// GetAccessToken returns the value of AccessToken.
func (s *ApiKey) GetAccessToken() string {
	return s.AccessToken
}

// GetPreviewAPIKey returns the value of PreviewAPIKey.
func (s *ApiKey) GetPreviewAPIKey() OptApiKeyPreviewAPIKey {
	return s.PreviewAPIKey
}

// SetSys sets the value of Sys.
func (s *ApiKey) SetSys(val ApiKeySys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *ApiKey) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ApiKey) SetDescription(val OptNilString) {
	s.Description = val
}

// SetEnvironments sets the value of Environments.
func (s *ApiKey) SetEnvironments(val []EnvironmentLink) {
	s.Environments = val
}

// SetAccessToken sets the value of AccessToken.
func (s *ApiKey) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetPreviewAPIKey sets the value of PreviewAPIKey.
func (s *ApiKey) SetPreviewAPIKey(val OptApiKeyPreviewAPIKey) {
	s.PreviewAPIKey = val
}

func (*ApiKey) createDeliveryApiKeyRes() {}
func (*ApiKey) getDeliveryApiKeyRes()    {}
func (*ApiKey) updateDeliveryApiKeyRes() {}

type ApiKeyPreviewAPIKey struct {
	Sys ApiKeyPreviewAPIKeySys `json:"sys"`
}

// GetSys returns the value of Sys.
func (s *ApiKeyPreviewAPIKey) GetSys() ApiKeyPreviewAPIKeySys {
	return s.Sys
}

// SetSys sets the value of Sys.
func (s *ApiKeyPreviewAPIKey) SetSys(val ApiKeyPreviewAPIKeySys) {
	s.Sys = val
}

// Merged schema.
type ApiKeyPreviewAPIKeySys struct {
	// Merged property.
	Type ApiKeyPreviewAPIKeySysType `json:"type"`
	ID   string                     `json:"id"`
	// Merged property.
	LinkType ApiKeyPreviewAPIKeySysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *ApiKeyPreviewAPIKeySys) GetType() ApiKeyPreviewAPIKeySysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *ApiKeyPreviewAPIKeySys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *ApiKeyPreviewAPIKeySys) GetLinkType() ApiKeyPreviewAPIKeySysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *ApiKeyPreviewAPIKeySys) SetType(val ApiKeyPreviewAPIKeySysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ApiKeyPreviewAPIKeySys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *ApiKeyPreviewAPIKeySys) SetLinkType(val ApiKeyPreviewAPIKeySysLinkType) {
	s.LinkType = val
}

// Merged schema.
type ApiKeyPreviewAPIKeySysLinkType string

const (
	ApiKeyPreviewAPIKeySysLinkTypePreviewApiKey ApiKeyPreviewAPIKeySysLinkType = "PreviewApiKey"
)

// AllValues returns all ApiKeyPreviewAPIKeySysLinkType values.
func (ApiKeyPreviewAPIKeySysLinkType) AllValues() []ApiKeyPreviewAPIKeySysLinkType {
	return []ApiKeyPreviewAPIKeySysLinkType{
		ApiKeyPreviewAPIKeySysLinkTypePreviewApiKey,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ApiKeyPreviewAPIKeySysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case ApiKeyPreviewAPIKeySysLinkTypePreviewApiKey:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApiKeyPreviewAPIKeySysLinkType) UnmarshalText(data []byte) error {
	switch ApiKeyPreviewAPIKeySysLinkType(data) {
	case ApiKeyPreviewAPIKeySysLinkTypePreviewApiKey:
		*s = ApiKeyPreviewAPIKeySysLinkTypePreviewApiKey
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type ApiKeyPreviewAPIKeySysType string

const (
	ApiKeyPreviewAPIKeySysTypeLink ApiKeyPreviewAPIKeySysType = "Link"
)

// AllValues returns all ApiKeyPreviewAPIKeySysType values.
func (ApiKeyPreviewAPIKeySysType) AllValues() []ApiKeyPreviewAPIKeySysType {
	return []ApiKeyPreviewAPIKeySysType{
		ApiKeyPreviewAPIKeySysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ApiKeyPreviewAPIKeySysType) MarshalText() ([]byte, error) {
	switch s {
	case ApiKeyPreviewAPIKeySysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApiKeyPreviewAPIKeySysType) UnmarshalText(data []byte) error {
	switch ApiKeyPreviewAPIKeySysType(data) {
	case ApiKeyPreviewAPIKeySysTypeLink:
		*s = ApiKeyPreviewAPIKeySysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ApiKeyRequestFields
type ApiKeyRequestFields struct {
	Name         string            `json:"name"`
	Description  OptNilString      `json:"description"`
	Environments []EnvironmentLink `json:"environments"`
}

// GetName returns the value of Name.
func (s *ApiKeyRequestFields) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ApiKeyRequestFields) GetDescription() OptNilString {
	return s.Description
}

// GetEnvironments returns the value of Environments.
func (s *ApiKeyRequestFields) GetEnvironments() []EnvironmentLink {
	return s.Environments
}

// SetName sets the value of Name.
func (s *ApiKeyRequestFields) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ApiKeyRequestFields) SetDescription(val OptNilString) {
	s.Description = val
}

// SetEnvironments sets the value of Environments.
func (s *ApiKeyRequestFields) SetEnvironments(val []EnvironmentLink) {
	s.Environments = val
}

// Merged schema.
// Ref: #/components/schemas/ApiKeySys
type ApiKeySys struct {
	// Merged property.
	Type      ApiKeySysType `json:"type"`
	Space     SpaceLink     `json:"space"`
	ID        string        `json:"id"`
	Version   int           `json:"version"`
	CreatedAt OptDateTime   `json:"createdAt"`
	UpdatedAt OptDateTime   `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *ApiKeySys) GetType() ApiKeySysType {
	return s.Type
}

// GetSpace returns the value of Space.
func (s *ApiKeySys) GetSpace() SpaceLink {
	return s.Space
}

// GetID returns the value of ID.
func (s *ApiKeySys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *ApiKeySys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ApiKeySys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ApiKeySys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *ApiKeySys) SetType(val ApiKeySysType) {
	s.Type = val
}

// SetSpace sets the value of Space.
func (s *ApiKeySys) SetSpace(val SpaceLink) {
	s.Space = val
}

// SetID sets the value of ID.
func (s *ApiKeySys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *ApiKeySys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ApiKeySys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ApiKeySys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type ApiKeySysType string

const (
	ApiKeySysTypeApiKey ApiKeySysType = "ApiKey"
)

// AllValues returns all ApiKeySysType values.
func (ApiKeySysType) AllValues() []ApiKeySysType {
	return []ApiKeySysType{
		ApiKeySysTypeApiKey,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ApiKeySysType) MarshalText() ([]byte, error) {
	switch s {
	case ApiKeySysTypeApiKey:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApiKeySysType) UnmarshalText(data []byte) error {
	switch ApiKeySysType(data) {
	case ApiKeySysTypeApiKey:
		*s = ApiKeySysTypeApiKey
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AppDefinitionLink
type AppDefinitionLink struct {
	Sys AppDefinitionLinkSys `json:"sys"`
}

// GetSys returns the value of Sys.
func (s *AppDefinitionLink) GetSys() AppDefinitionLinkSys {
	return s.Sys
}

// SetSys sets the value of Sys.
func (s *AppDefinitionLink) SetSys(val AppDefinitionLinkSys) {
	s.Sys = val
}

// Merged schema.
type AppDefinitionLinkSys struct {
	// Merged property.
	Type AppDefinitionLinkSysType `json:"type"`
	ID   string                   `json:"id"`
	// Merged property.
	LinkType AppDefinitionLinkSysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *AppDefinitionLinkSys) GetType() AppDefinitionLinkSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *AppDefinitionLinkSys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *AppDefinitionLinkSys) GetLinkType() AppDefinitionLinkSysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *AppDefinitionLinkSys) SetType(val AppDefinitionLinkSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *AppDefinitionLinkSys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *AppDefinitionLinkSys) SetLinkType(val AppDefinitionLinkSysLinkType) {
	s.LinkType = val
}

// Merged schema.
type AppDefinitionLinkSysLinkType string

const (
	AppDefinitionLinkSysLinkTypeAppDefinition AppDefinitionLinkSysLinkType = "AppDefinition"
)

// AllValues returns all AppDefinitionLinkSysLinkType values.
func (AppDefinitionLinkSysLinkType) AllValues() []AppDefinitionLinkSysLinkType {
	return []AppDefinitionLinkSysLinkType{
		AppDefinitionLinkSysLinkTypeAppDefinition,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppDefinitionLinkSysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case AppDefinitionLinkSysLinkTypeAppDefinition:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppDefinitionLinkSysLinkType) UnmarshalText(data []byte) error {
	switch AppDefinitionLinkSysLinkType(data) {
	case AppDefinitionLinkSysLinkTypeAppDefinition:
		*s = AppDefinitionLinkSysLinkTypeAppDefinition
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type AppDefinitionLinkSysType string

const (
	AppDefinitionLinkSysTypeLink AppDefinitionLinkSysType = "Link"
)

// AllValues returns all AppDefinitionLinkSysType values.
func (AppDefinitionLinkSysType) AllValues() []AppDefinitionLinkSysType {
	return []AppDefinitionLinkSysType{
		AppDefinitionLinkSysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppDefinitionLinkSysType) MarshalText() ([]byte, error) {
	switch s {
	case AppDefinitionLinkSysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppDefinitionLinkSysType) UnmarshalText(data []byte) error {
	switch AppDefinitionLinkSysType(data) {
	case AppDefinitionLinkSysTypeLink:
		*s = AppDefinitionLinkSysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/AppInstallation
type AppInstallation struct {
	Sys        AppInstallationSys `json:"sys"`
	Parameters jx.Raw             `json:"parameters"`
}

// GetSys returns the value of Sys.
func (s *AppInstallation) GetSys() AppInstallationSys {
	return s.Sys
}

// GetParameters returns the value of Parameters.
func (s *AppInstallation) GetParameters() jx.Raw {
	return s.Parameters
}

// SetSys sets the value of Sys.
func (s *AppInstallation) SetSys(val AppInstallationSys) {
	s.Sys = val
}

// SetParameters sets the value of Parameters.
func (s *AppInstallation) SetParameters(val jx.Raw) {
	s.Parameters = val
}

func (*AppInstallation) getAppInstallationRes() {}
func (*AppInstallation) putAppInstallationRes() {}

// Ref: #/components/schemas/AppInstallationFields
type AppInstallationFields struct {
	Parameters jx.Raw `json:"parameters"`
}

// GetParameters returns the value of Parameters.
func (s *AppInstallationFields) GetParameters() jx.Raw {
	return s.Parameters
}

// SetParameters sets the value of Parameters.
func (s *AppInstallationFields) SetParameters(val jx.Raw) {
	s.Parameters = val
}

// Merged schema.
// Ref: #/components/schemas/AppInstallationSys
type AppInstallationSys struct {
	// Merged property.
	Type          AppInstallationSysType `json:"type"`
	Space         SpaceLink              `json:"space"`
	Environment   EnvironmentLink        `json:"environment"`
	AppDefinition AppDefinitionLink      `json:"appDefinition"`
}

// GetType returns the value of Type.
func (s *AppInstallationSys) GetType() AppInstallationSysType {
	return s.Type
}

// GetSpace returns the value of Space.
func (s *AppInstallationSys) GetSpace() SpaceLink {
	return s.Space
}

// GetEnvironment returns the value of Environment.
func (s *AppInstallationSys) GetEnvironment() EnvironmentLink {
	return s.Environment
}

// GetAppDefinition returns the value of AppDefinition.
func (s *AppInstallationSys) GetAppDefinition() AppDefinitionLink {
	return s.AppDefinition
}

// SetType sets the value of Type.
func (s *AppInstallationSys) SetType(val AppInstallationSysType) {
	s.Type = val
}

// SetSpace sets the value of Space.
func (s *AppInstallationSys) SetSpace(val SpaceLink) {
	s.Space = val
}

// SetEnvironment sets the value of Environment.
func (s *AppInstallationSys) SetEnvironment(val EnvironmentLink) {
	s.Environment = val
}

// SetAppDefinition sets the value of AppDefinition.
func (s *AppInstallationSys) SetAppDefinition(val AppDefinitionLink) {
	s.AppDefinition = val
}

// Merged schema.
type AppInstallationSysType string

const (
	AppInstallationSysTypeAppInstallation AppInstallationSysType = "AppInstallation"
)

// AllValues returns all AppInstallationSysType values.
func (AppInstallationSysType) AllValues() []AppInstallationSysType {
	return []AppInstallationSysType{
		AppInstallationSysTypeAppInstallation,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppInstallationSysType) MarshalText() ([]byte, error) {
	switch s {
	case AppInstallationSysTypeAppInstallation:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppInstallationSysType) UnmarshalText(data []byte) error {
	switch AppInstallationSysType(data) {
	case AppInstallationSysTypeAppInstallation:
		*s = AppInstallationSysTypeAppInstallation
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/ContentType
type ContentType struct {
	Sys  ContentTypeSys `json:"sys"`
	Name string         `json:"name"`
	// Merged property.
	Description OptNilString `json:"description"`
	// Merged property.
	DisplayField NilString               `json:"displayField"`
	Fields       []ContentTypeFieldsItem `json:"fields"`
}

// GetSys returns the value of Sys.
func (s *ContentType) GetSys() ContentTypeSys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *ContentType) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ContentType) GetDescription() OptNilString {
	return s.Description
}

// GetDisplayField returns the value of DisplayField.
func (s *ContentType) GetDisplayField() NilString {
	return s.DisplayField
}

// GetFields returns the value of Fields.
func (s *ContentType) GetFields() []ContentTypeFieldsItem {
	return s.Fields
}

// SetSys sets the value of Sys.
func (s *ContentType) SetSys(val ContentTypeSys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *ContentType) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ContentType) SetDescription(val OptNilString) {
	s.Description = val
}

// SetDisplayField sets the value of DisplayField.
func (s *ContentType) SetDisplayField(val NilString) {
	s.DisplayField = val
}

// SetFields sets the value of Fields.
func (s *ContentType) SetFields(val []ContentTypeFieldsItem) {
	s.Fields = val
}

func (*ContentType) activateContentTypeRes()   {}
func (*ContentType) deactivateContentTypeRes() {}
func (*ContentType) getContentTypeRes()        {}

type ContentTypeFieldsItem struct {
	ID           string                        `json:"id"`
	Name         string                        `json:"name"`
	Type         string                        `json:"type"`
	LinkType     OptString                     `json:"linkType"`
	Items        OptContentTypeFieldsItemItems `json:"items"`
	Localized    OptBool                       `json:"localized"`
	Omitted      OptBool                       `json:"omitted"`
	Required     OptBool                       `json:"required"`
	Disabled     OptBool                       `json:"disabled"`
	DefaultValue jx.Raw                        `json:"defaultValue"`
	Validations  []jx.Raw                      `json:"validations"`
}

// GetID returns the value of ID.
func (s *ContentTypeFieldsItem) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *ContentTypeFieldsItem) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *ContentTypeFieldsItem) GetType() string {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *ContentTypeFieldsItem) GetLinkType() OptString {
	return s.LinkType
}

// GetItems returns the value of Items.
func (s *ContentTypeFieldsItem) GetItems() OptContentTypeFieldsItemItems {
	return s.Items
}

// GetLocalized returns the value of Localized.
func (s *ContentTypeFieldsItem) GetLocalized() OptBool {
	return s.Localized
}

// GetOmitted returns the value of Omitted.
func (s *ContentTypeFieldsItem) GetOmitted() OptBool {
	return s.Omitted
}

// GetRequired returns the value of Required.
func (s *ContentTypeFieldsItem) GetRequired() OptBool {
	return s.Required
}

// GetDisabled returns the value of Disabled.
func (s *ContentTypeFieldsItem) GetDisabled() OptBool {
	return s.Disabled
}

// GetDefaultValue returns the value of DefaultValue.
func (s *ContentTypeFieldsItem) GetDefaultValue() jx.Raw {
	return s.DefaultValue
}

// GetValidations returns the value of Validations.
func (s *ContentTypeFieldsItem) GetValidations() []jx.Raw {
	return s.Validations
}

// SetID sets the value of ID.
func (s *ContentTypeFieldsItem) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ContentTypeFieldsItem) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *ContentTypeFieldsItem) SetType(val string) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *ContentTypeFieldsItem) SetLinkType(val OptString) {
	s.LinkType = val
}

// SetItems sets the value of Items.
func (s *ContentTypeFieldsItem) SetItems(val OptContentTypeFieldsItemItems) {
	s.Items = val
}

// SetLocalized sets the value of Localized.
func (s *ContentTypeFieldsItem) SetLocalized(val OptBool) {
	s.Localized = val
}

// SetOmitted sets the value of Omitted.
func (s *ContentTypeFieldsItem) SetOmitted(val OptBool) {
	s.Omitted = val
}

// SetRequired sets the value of Required.
func (s *ContentTypeFieldsItem) SetRequired(val OptBool) {
	s.Required = val
}

// SetDisabled sets the value of Disabled.
func (s *ContentTypeFieldsItem) SetDisabled(val OptBool) {
	s.Disabled = val
}

// SetDefaultValue sets the value of DefaultValue.
func (s *ContentTypeFieldsItem) SetDefaultValue(val jx.Raw) {
	s.DefaultValue = val
}

// SetValidations sets the value of Validations.
func (s *ContentTypeFieldsItem) SetValidations(val []jx.Raw) {
	s.Validations = val
}

type ContentTypeFieldsItemItems struct {
	Type        OptString `json:"type"`
	LinkType    OptString `json:"linkType"`
	Validations []jx.Raw  `json:"validations"`
}

// GetType returns the value of Type.
func (s *ContentTypeFieldsItemItems) GetType() OptString {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *ContentTypeFieldsItemItems) GetLinkType() OptString {
	return s.LinkType
}

// GetValidations returns the value of Validations.
func (s *ContentTypeFieldsItemItems) GetValidations() []jx.Raw {
	return s.Validations
}

// SetType sets the value of Type.
func (s *ContentTypeFieldsItemItems) SetType(val OptString) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *ContentTypeFieldsItemItems) SetLinkType(val OptString) {
	s.LinkType = val
}

// SetValidations sets the value of Validations.
func (s *ContentTypeFieldsItemItems) SetValidations(val []jx.Raw) {
	s.Validations = val
}

// Ref: #/components/schemas/ContentTypeLink
type ContentTypeLink struct {
	Sys ContentTypeLinkSys `json:"sys"`
}

// GetSys returns the value of Sys.
func (s *ContentTypeLink) GetSys() ContentTypeLinkSys {
	return s.Sys
}

// SetSys sets the value of Sys.
func (s *ContentTypeLink) SetSys(val ContentTypeLinkSys) {
	s.Sys = val
}

// Merged schema.
type ContentTypeLinkSys struct {
	// Merged property.
	Type ContentTypeLinkSysType `json:"type"`
	ID   string                 `json:"id"`
	// Merged property.
	LinkType ContentTypeLinkSysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *ContentTypeLinkSys) GetType() ContentTypeLinkSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *ContentTypeLinkSys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *ContentTypeLinkSys) GetLinkType() ContentTypeLinkSysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *ContentTypeLinkSys) SetType(val ContentTypeLinkSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ContentTypeLinkSys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *ContentTypeLinkSys) SetLinkType(val ContentTypeLinkSysLinkType) {
	s.LinkType = val
}

// Merged schema.
type ContentTypeLinkSysLinkType string

const (
	ContentTypeLinkSysLinkTypeContentType ContentTypeLinkSysLinkType = "ContentType"
)

// AllValues returns all ContentTypeLinkSysLinkType values.
func (ContentTypeLinkSysLinkType) AllValues() []ContentTypeLinkSysLinkType {
	return []ContentTypeLinkSysLinkType{
		ContentTypeLinkSysLinkTypeContentType,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContentTypeLinkSysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case ContentTypeLinkSysLinkTypeContentType:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContentTypeLinkSysLinkType) UnmarshalText(data []byte) error {
	switch ContentTypeLinkSysLinkType(data) {
	case ContentTypeLinkSysLinkTypeContentType:
		*s = ContentTypeLinkSysLinkTypeContentType
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type ContentTypeLinkSysType string

const (
	ContentTypeLinkSysTypeLink ContentTypeLinkSysType = "Link"
)

// AllValues returns all ContentTypeLinkSysType values.
func (ContentTypeLinkSysType) AllValues() []ContentTypeLinkSysType {
	return []ContentTypeLinkSysType{
		ContentTypeLinkSysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContentTypeLinkSysType) MarshalText() ([]byte, error) {
	switch s {
	case ContentTypeLinkSysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContentTypeLinkSysType) UnmarshalText(data []byte) error {
	switch ContentTypeLinkSysType(data) {
	case ContentTypeLinkSysTypeLink:
		*s = ContentTypeLinkSysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ContentTypeRequestFields
type ContentTypeRequestFields struct {
	Name         string                               `json:"name"`
	Description  OptNilString                         `json:"description"`
	DisplayField string                               `json:"displayField"`
	Fields       []ContentTypeRequestFieldsFieldsItem `json:"fields"`
}

// GetName returns the value of Name.
func (s *ContentTypeRequestFields) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ContentTypeRequestFields) GetDescription() OptNilString {
	return s.Description
}

// GetDisplayField returns the value of DisplayField.
func (s *ContentTypeRequestFields) GetDisplayField() string {
	return s.DisplayField
}

// GetFields returns the value of Fields.
func (s *ContentTypeRequestFields) GetFields() []ContentTypeRequestFieldsFieldsItem {
	return s.Fields
}

// SetName sets the value of Name.
func (s *ContentTypeRequestFields) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ContentTypeRequestFields) SetDescription(val OptNilString) {
	s.Description = val
}

// SetDisplayField sets the value of DisplayField.
func (s *ContentTypeRequestFields) SetDisplayField(val string) {
	s.DisplayField = val
}

// SetFields sets the value of Fields.
func (s *ContentTypeRequestFields) SetFields(val []ContentTypeRequestFieldsFieldsItem) {
	s.Fields = val
}

type ContentTypeRequestFieldsFieldsItem struct {
	ID           string                                     `json:"id"`
	Name         string                                     `json:"name"`
	Type         string                                     `json:"type"`
	LinkType     OptString                                  `json:"linkType"`
	Items        OptContentTypeRequestFieldsFieldsItemItems `json:"items"`
	Localized    OptBool                                    `json:"localized"`
	Omitted      OptBool                                    `json:"omitted"`
	Required     OptBool                                    `json:"required"`
	Disabled     OptBool                                    `json:"disabled"`
	DefaultValue jx.Raw                                     `json:"defaultValue"`
	Validations  []jx.Raw                                   `json:"validations"`
}

// GetID returns the value of ID.
func (s *ContentTypeRequestFieldsFieldsItem) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *ContentTypeRequestFieldsFieldsItem) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *ContentTypeRequestFieldsFieldsItem) GetType() string {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *ContentTypeRequestFieldsFieldsItem) GetLinkType() OptString {
	return s.LinkType
}

// GetItems returns the value of Items.
func (s *ContentTypeRequestFieldsFieldsItem) GetItems() OptContentTypeRequestFieldsFieldsItemItems {
	return s.Items
}

// GetLocalized returns the value of Localized.
func (s *ContentTypeRequestFieldsFieldsItem) GetLocalized() OptBool {
	return s.Localized
}

// GetOmitted returns the value of Omitted.
func (s *ContentTypeRequestFieldsFieldsItem) GetOmitted() OptBool {
	return s.Omitted
}

// GetRequired returns the value of Required.
func (s *ContentTypeRequestFieldsFieldsItem) GetRequired() OptBool {
	return s.Required
}

// GetDisabled returns the value of Disabled.
func (s *ContentTypeRequestFieldsFieldsItem) GetDisabled() OptBool {
	return s.Disabled
}

// GetDefaultValue returns the value of DefaultValue.
func (s *ContentTypeRequestFieldsFieldsItem) GetDefaultValue() jx.Raw {
	return s.DefaultValue
}

// GetValidations returns the value of Validations.
func (s *ContentTypeRequestFieldsFieldsItem) GetValidations() []jx.Raw {
	return s.Validations
}

// SetID sets the value of ID.
func (s *ContentTypeRequestFieldsFieldsItem) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ContentTypeRequestFieldsFieldsItem) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *ContentTypeRequestFieldsFieldsItem) SetType(val string) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *ContentTypeRequestFieldsFieldsItem) SetLinkType(val OptString) {
	s.LinkType = val
}

// SetItems sets the value of Items.
func (s *ContentTypeRequestFieldsFieldsItem) SetItems(val OptContentTypeRequestFieldsFieldsItemItems) {
	s.Items = val
}

// SetLocalized sets the value of Localized.
func (s *ContentTypeRequestFieldsFieldsItem) SetLocalized(val OptBool) {
	s.Localized = val
}

// SetOmitted sets the value of Omitted.
func (s *ContentTypeRequestFieldsFieldsItem) SetOmitted(val OptBool) {
	s.Omitted = val
}

// SetRequired sets the value of Required.
func (s *ContentTypeRequestFieldsFieldsItem) SetRequired(val OptBool) {
	s.Required = val
}

// SetDisabled sets the value of Disabled.
func (s *ContentTypeRequestFieldsFieldsItem) SetDisabled(val OptBool) {
	s.Disabled = val
}

// SetDefaultValue sets the value of DefaultValue.
func (s *ContentTypeRequestFieldsFieldsItem) SetDefaultValue(val jx.Raw) {
	s.DefaultValue = val
}

// SetValidations sets the value of Validations.
func (s *ContentTypeRequestFieldsFieldsItem) SetValidations(val []jx.Raw) {
	s.Validations = val
}

type ContentTypeRequestFieldsFieldsItemItems struct {
	Type        OptString `json:"type"`
	LinkType    OptString `json:"linkType"`
	Validations []jx.Raw  `json:"validations"`
}

// GetType returns the value of Type.
func (s *ContentTypeRequestFieldsFieldsItemItems) GetType() OptString {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *ContentTypeRequestFieldsFieldsItemItems) GetLinkType() OptString {
	return s.LinkType
}

// GetValidations returns the value of Validations.
func (s *ContentTypeRequestFieldsFieldsItemItems) GetValidations() []jx.Raw {
	return s.Validations
}

// SetType sets the value of Type.
func (s *ContentTypeRequestFieldsFieldsItemItems) SetType(val OptString) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *ContentTypeRequestFieldsFieldsItemItems) SetLinkType(val OptString) {
	s.LinkType = val
}

// SetValidations sets the value of Validations.
func (s *ContentTypeRequestFieldsFieldsItemItems) SetValidations(val []jx.Raw) {
	s.Validations = val
}

// Merged schema.
// Ref: #/components/schemas/ContentTypeSys
type ContentTypeSys struct {
	// Merged property.
	Type             ContentTypeSysType `json:"type"`
	Space            SpaceLink          `json:"space"`
	Environment      EnvironmentLink    `json:"environment"`
	ID               string             `json:"id"`
	Version          int                `json:"version"`
	CreatedAt        OptDateTime        `json:"createdAt"`
	UpdatedAt        OptDateTime        `json:"updatedAt"`
	PublishedVersion OptInt             `json:"publishedVersion"`
	PublishedAt      OptDateTime        `json:"publishedAt"`
}

// GetType returns the value of Type.
func (s *ContentTypeSys) GetType() ContentTypeSysType {
	return s.Type
}

// GetSpace returns the value of Space.
func (s *ContentTypeSys) GetSpace() SpaceLink {
	return s.Space
}

// GetEnvironment returns the value of Environment.
func (s *ContentTypeSys) GetEnvironment() EnvironmentLink {
	return s.Environment
}

// GetID returns the value of ID.
func (s *ContentTypeSys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *ContentTypeSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ContentTypeSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ContentTypeSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetPublishedVersion returns the value of PublishedVersion.
func (s *ContentTypeSys) GetPublishedVersion() OptInt {
	return s.PublishedVersion
}

// GetPublishedAt returns the value of PublishedAt.
func (s *ContentTypeSys) GetPublishedAt() OptDateTime {
	return s.PublishedAt
}

// SetType sets the value of Type.
func (s *ContentTypeSys) SetType(val ContentTypeSysType) {
	s.Type = val
}

// SetSpace sets the value of Space.
func (s *ContentTypeSys) SetSpace(val SpaceLink) {
	s.Space = val
}

// SetEnvironment sets the value of Environment.
func (s *ContentTypeSys) SetEnvironment(val EnvironmentLink) {
	s.Environment = val
}

// SetID sets the value of ID.
func (s *ContentTypeSys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *ContentTypeSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ContentTypeSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ContentTypeSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetPublishedVersion sets the value of PublishedVersion.
func (s *ContentTypeSys) SetPublishedVersion(val OptInt) {
	s.PublishedVersion = val
}

// SetPublishedAt sets the value of PublishedAt.
func (s *ContentTypeSys) SetPublishedAt(val OptDateTime) {
	s.PublishedAt = val
}

// Merged schema.
type ContentTypeSysType string

const (
	ContentTypeSysTypeContentType ContentTypeSysType = "ContentType"
)

// AllValues returns all ContentTypeSysType values.
func (ContentTypeSysType) AllValues() []ContentTypeSysType {
	return []ContentTypeSysType{
		ContentTypeSysTypeContentType,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContentTypeSysType) MarshalText() ([]byte, error) {
	switch s {
	case ContentTypeSysTypeContentType:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContentTypeSysType) UnmarshalText(data []byte) error {
	switch ContentTypeSysType(data) {
	case ContentTypeSysTypeContentType:
		*s = ContentTypeSysTypeContentType
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/EditorInterface
type EditorInterface struct {
	Sys           EditorInterfaceSys                          `json:"sys"`
	EditorLayout  OptNilEditorInterfaceEditorLayoutItemArray  `json:"editorLayout"`
	Controls      OptNilEditorInterfaceControlsItemArray      `json:"controls"`
	GroupControls OptNilEditorInterfaceGroupControlsItemArray `json:"groupControls"`
	Sidebar       OptNilEditorInterfaceSidebarItemArray       `json:"sidebar"`
}

// GetSys returns the value of Sys.
func (s *EditorInterface) GetSys() EditorInterfaceSys {
	return s.Sys
}

// GetEditorLayout returns the value of EditorLayout.
func (s *EditorInterface) GetEditorLayout() OptNilEditorInterfaceEditorLayoutItemArray {
	return s.EditorLayout
}

// GetControls returns the value of Controls.
func (s *EditorInterface) GetControls() OptNilEditorInterfaceControlsItemArray {
	return s.Controls
}

// GetGroupControls returns the value of GroupControls.
func (s *EditorInterface) GetGroupControls() OptNilEditorInterfaceGroupControlsItemArray {
	return s.GroupControls
}

// GetSidebar returns the value of Sidebar.
func (s *EditorInterface) GetSidebar() OptNilEditorInterfaceSidebarItemArray {
	return s.Sidebar
}

// SetSys sets the value of Sys.
func (s *EditorInterface) SetSys(val EditorInterfaceSys) {
	s.Sys = val
}

// SetEditorLayout sets the value of EditorLayout.
func (s *EditorInterface) SetEditorLayout(val OptNilEditorInterfaceEditorLayoutItemArray) {
	s.EditorLayout = val
}

// SetControls sets the value of Controls.
func (s *EditorInterface) SetControls(val OptNilEditorInterfaceControlsItemArray) {
	s.Controls = val
}

// SetGroupControls sets the value of GroupControls.
func (s *EditorInterface) SetGroupControls(val OptNilEditorInterfaceGroupControlsItemArray) {
	s.GroupControls = val
}

// SetSidebar sets the value of Sidebar.
func (s *EditorInterface) SetSidebar(val OptNilEditorInterfaceSidebarItemArray) {
	s.Sidebar = val
}

func (*EditorInterface) getEditorInterfaceRes() {}
func (*EditorInterface) putEditorInterfaceRes() {}

type EditorInterfaceControlsItem struct {
	FieldId         string    `json:"fieldId"`
	WidgetNamespace OptString `json:"widgetNamespace"`
	WidgetId        OptString `json:"widgetId"`
	Settings        jx.Raw    `json:"settings"`
}

// GetFieldId returns the value of FieldId.
func (s *EditorInterfaceControlsItem) GetFieldId() string {
	return s.FieldId
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *EditorInterfaceControlsItem) GetWidgetNamespace() OptString {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *EditorInterfaceControlsItem) GetWidgetId() OptString {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *EditorInterfaceControlsItem) GetSettings() jx.Raw {
	return s.Settings
}

// SetFieldId sets the value of FieldId.
func (s *EditorInterfaceControlsItem) SetFieldId(val string) {
	s.FieldId = val
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *EditorInterfaceControlsItem) SetWidgetNamespace(val OptString) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *EditorInterfaceControlsItem) SetWidgetId(val OptString) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *EditorInterfaceControlsItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

type EditorInterfaceEditorLayoutItem struct {
	GroupId string   `json:"groupId"`
	Name    string   `json:"name"`
	Items   []jx.Raw `json:"items"`
}

// GetGroupId returns the value of GroupId.
func (s *EditorInterfaceEditorLayoutItem) GetGroupId() string {
	return s.GroupId
}

// GetName returns the value of Name.
func (s *EditorInterfaceEditorLayoutItem) GetName() string {
	return s.Name
}

// GetItems returns the value of Items.
func (s *EditorInterfaceEditorLayoutItem) GetItems() []jx.Raw {
	return s.Items
}

// SetGroupId sets the value of GroupId.
func (s *EditorInterfaceEditorLayoutItem) SetGroupId(val string) {
	s.GroupId = val
}

// SetName sets the value of Name.
func (s *EditorInterfaceEditorLayoutItem) SetName(val string) {
	s.Name = val
}

// SetItems sets the value of Items.
func (s *EditorInterfaceEditorLayoutItem) SetItems(val []jx.Raw) {
	s.Items = val
}

// Ref: #/components/schemas/EditorInterfaceFields
type EditorInterfaceFields struct {
	EditorLayout  OptNilEditorInterfaceFieldsEditorLayoutItemArray  `json:"editorLayout"`
	Controls      OptNilEditorInterfaceFieldsControlsItemArray      `json:"controls"`
	GroupControls OptNilEditorInterfaceFieldsGroupControlsItemArray `json:"groupControls"`
	Sidebar       OptNilEditorInterfaceFieldsSidebarItemArray       `json:"sidebar"`
}

// GetEditorLayout returns the value of EditorLayout.
func (s *EditorInterfaceFields) GetEditorLayout() OptNilEditorInterfaceFieldsEditorLayoutItemArray {
	return s.EditorLayout
}

// GetControls returns the value of Controls.
func (s *EditorInterfaceFields) GetControls() OptNilEditorInterfaceFieldsControlsItemArray {
	return s.Controls
}

// GetGroupControls returns the value of GroupControls.
func (s *EditorInterfaceFields) GetGroupControls() OptNilEditorInterfaceFieldsGroupControlsItemArray {
	return s.GroupControls
}

// GetSidebar returns the value of Sidebar.
func (s *EditorInterfaceFields) GetSidebar() OptNilEditorInterfaceFieldsSidebarItemArray {
	return s.Sidebar
}

// SetEditorLayout sets the value of EditorLayout.
func (s *EditorInterfaceFields) SetEditorLayout(val OptNilEditorInterfaceFieldsEditorLayoutItemArray) {
	s.EditorLayout = val
}

// SetControls sets the value of Controls.
func (s *EditorInterfaceFields) SetControls(val OptNilEditorInterfaceFieldsControlsItemArray) {
	s.Controls = val
}

// SetGroupControls sets the value of GroupControls.
func (s *EditorInterfaceFields) SetGroupControls(val OptNilEditorInterfaceFieldsGroupControlsItemArray) {
	s.GroupControls = val
}

// SetSidebar sets the value of Sidebar.
func (s *EditorInterfaceFields) SetSidebar(val OptNilEditorInterfaceFieldsSidebarItemArray) {
	s.Sidebar = val
}

type EditorInterfaceFieldsControlsItem struct {
	FieldId         string    `json:"fieldId"`
	WidgetNamespace OptString `json:"widgetNamespace"`
	WidgetId        OptString `json:"widgetId"`
	Settings        jx.Raw    `json:"settings"`
}

// GetFieldId returns the value of FieldId.
func (s *EditorInterfaceFieldsControlsItem) GetFieldId() string {
	return s.FieldId
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *EditorInterfaceFieldsControlsItem) GetWidgetNamespace() OptString {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *EditorInterfaceFieldsControlsItem) GetWidgetId() OptString {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *EditorInterfaceFieldsControlsItem) GetSettings() jx.Raw {
	return s.Settings
}

// SetFieldId sets the value of FieldId.
func (s *EditorInterfaceFieldsControlsItem) SetFieldId(val string) {
	s.FieldId = val
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *EditorInterfaceFieldsControlsItem) SetWidgetNamespace(val OptString) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *EditorInterfaceFieldsControlsItem) SetWidgetId(val OptString) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *EditorInterfaceFieldsControlsItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

type EditorInterfaceFieldsEditorLayoutItem struct {
	GroupId string   `json:"groupId"`
	Name    string   `json:"name"`
	Items   []jx.Raw `json:"items"`
}

// GetGroupId returns the value of GroupId.
func (s *EditorInterfaceFieldsEditorLayoutItem) GetGroupId() string {
	return s.GroupId
}

// GetName returns the value of Name.
func (s *EditorInterfaceFieldsEditorLayoutItem) GetName() string {
	return s.Name
}

// GetItems returns the value of Items.
func (s *EditorInterfaceFieldsEditorLayoutItem) GetItems() []jx.Raw {
	return s.Items
}

// SetGroupId sets the value of GroupId.
func (s *EditorInterfaceFieldsEditorLayoutItem) SetGroupId(val string) {
	s.GroupId = val
}

// SetName sets the value of Name.
func (s *EditorInterfaceFieldsEditorLayoutItem) SetName(val string) {
	s.Name = val
}

// SetItems sets the value of Items.
func (s *EditorInterfaceFieldsEditorLayoutItem) SetItems(val []jx.Raw) {
	s.Items = val
}

type EditorInterfaceFieldsGroupControlsItem struct {
	GroupId         string    `json:"groupId"`
	WidgetNamespace OptString `json:"widgetNamespace"`
	WidgetId        OptString `json:"widgetId"`
	Settings        jx.Raw    `json:"settings"`
}

// GetGroupId returns the value of GroupId.
func (s *EditorInterfaceFieldsGroupControlsItem) GetGroupId() string {
	return s.GroupId
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *EditorInterfaceFieldsGroupControlsItem) GetWidgetNamespace() OptString {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *EditorInterfaceFieldsGroupControlsItem) GetWidgetId() OptString {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *EditorInterfaceFieldsGroupControlsItem) GetSettings() jx.Raw {
	return s.Settings
}

// SetGroupId sets the value of GroupId.
func (s *EditorInterfaceFieldsGroupControlsItem) SetGroupId(val string) {
	s.GroupId = val
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *EditorInterfaceFieldsGroupControlsItem) SetWidgetNamespace(val OptString) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *EditorInterfaceFieldsGroupControlsItem) SetWidgetId(val OptString) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *EditorInterfaceFieldsGroupControlsItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

type EditorInterfaceFieldsSidebarItem struct {
	WidgetNamespace string  `json:"widgetNamespace"`
	WidgetId        string  `json:"widgetId"`
	Settings        jx.Raw  `json:"settings"`
	Disabled        OptBool `json:"disabled"`
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *EditorInterfaceFieldsSidebarItem) GetWidgetNamespace() string {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *EditorInterfaceFieldsSidebarItem) GetWidgetId() string {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *EditorInterfaceFieldsSidebarItem) GetSettings() jx.Raw {
	return s.Settings
}

// GetDisabled returns the value of Disabled.
func (s *EditorInterfaceFieldsSidebarItem) GetDisabled() OptBool {
	return s.Disabled
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *EditorInterfaceFieldsSidebarItem) SetWidgetNamespace(val string) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *EditorInterfaceFieldsSidebarItem) SetWidgetId(val string) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *EditorInterfaceFieldsSidebarItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

// SetDisabled sets the value of Disabled.
func (s *EditorInterfaceFieldsSidebarItem) SetDisabled(val OptBool) {
	s.Disabled = val
}

type EditorInterfaceGroupControlsItem struct {
	GroupId         string    `json:"groupId"`
	WidgetNamespace OptString `json:"widgetNamespace"`
	WidgetId        OptString `json:"widgetId"`
	Settings        jx.Raw    `json:"settings"`
}

// GetGroupId returns the value of GroupId.
func (s *EditorInterfaceGroupControlsItem) GetGroupId() string {
	return s.GroupId
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *EditorInterfaceGroupControlsItem) GetWidgetNamespace() OptString {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *EditorInterfaceGroupControlsItem) GetWidgetId() OptString {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *EditorInterfaceGroupControlsItem) GetSettings() jx.Raw {
	return s.Settings
}

// SetGroupId sets the value of GroupId.
func (s *EditorInterfaceGroupControlsItem) SetGroupId(val string) {
	s.GroupId = val
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *EditorInterfaceGroupControlsItem) SetWidgetNamespace(val OptString) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *EditorInterfaceGroupControlsItem) SetWidgetId(val OptString) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *EditorInterfaceGroupControlsItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

type EditorInterfaceSidebarItem struct {
	WidgetNamespace string  `json:"widgetNamespace"`
	WidgetId        string  `json:"widgetId"`
	Settings        jx.Raw  `json:"settings"`
	Disabled        OptBool `json:"disabled"`
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *EditorInterfaceSidebarItem) GetWidgetNamespace() string {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *EditorInterfaceSidebarItem) GetWidgetId() string {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *EditorInterfaceSidebarItem) GetSettings() jx.Raw {
	return s.Settings
}

// GetDisabled returns the value of Disabled.
func (s *EditorInterfaceSidebarItem) GetDisabled() OptBool {
	return s.Disabled
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *EditorInterfaceSidebarItem) SetWidgetNamespace(val string) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *EditorInterfaceSidebarItem) SetWidgetId(val string) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *EditorInterfaceSidebarItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

// SetDisabled sets the value of Disabled.
func (s *EditorInterfaceSidebarItem) SetDisabled(val OptBool) {
	s.Disabled = val
}

// Merged schema.
// Ref: #/components/schemas/EditorInterfaceSys
type EditorInterfaceSys struct {
	// Merged property.
	Type        EditorInterfaceSysType `json:"type"`
	Space       SpaceLink              `json:"space"`
	Environment EnvironmentLink        `json:"environment"`
	ID          string                 `json:"id"`
	Version     int                    `json:"version"`
	CreatedAt   OptDateTime            `json:"createdAt"`
	UpdatedAt   OptDateTime            `json:"updatedAt"`
	ContentType ContentTypeLink        `json:"contentType"`
}

// GetType returns the value of Type.
func (s *EditorInterfaceSys) GetType() EditorInterfaceSysType {
	return s.Type
}

// GetSpace returns the value of Space.
func (s *EditorInterfaceSys) GetSpace() SpaceLink {
	return s.Space
}

// GetEnvironment returns the value of Environment.
func (s *EditorInterfaceSys) GetEnvironment() EnvironmentLink {
	return s.Environment
}

// GetID returns the value of ID.
func (s *EditorInterfaceSys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *EditorInterfaceSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *EditorInterfaceSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *EditorInterfaceSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetContentType returns the value of ContentType.
func (s *EditorInterfaceSys) GetContentType() ContentTypeLink {
	return s.ContentType
}

// SetType sets the value of Type.
func (s *EditorInterfaceSys) SetType(val EditorInterfaceSysType) {
	s.Type = val
}

// SetSpace sets the value of Space.
func (s *EditorInterfaceSys) SetSpace(val SpaceLink) {
	s.Space = val
}

// SetEnvironment sets the value of Environment.
func (s *EditorInterfaceSys) SetEnvironment(val EnvironmentLink) {
	s.Environment = val
}

// SetID sets the value of ID.
func (s *EditorInterfaceSys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *EditorInterfaceSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *EditorInterfaceSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *EditorInterfaceSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetContentType sets the value of ContentType.
func (s *EditorInterfaceSys) SetContentType(val ContentTypeLink) {
	s.ContentType = val
}

// Merged schema.
type EditorInterfaceSysType string

const (
	EditorInterfaceSysTypeEditorInterface EditorInterfaceSysType = "EditorInterface"
)

// AllValues returns all EditorInterfaceSysType values.
func (EditorInterfaceSysType) AllValues() []EditorInterfaceSysType {
	return []EditorInterfaceSysType{
		EditorInterfaceSysTypeEditorInterface,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EditorInterfaceSysType) MarshalText() ([]byte, error) {
	switch s {
	case EditorInterfaceSysTypeEditorInterface:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EditorInterfaceSysType) UnmarshalText(data []byte) error {
	switch EditorInterfaceSysType(data) {
	case EditorInterfaceSysTypeEditorInterface:
		*s = EditorInterfaceSysTypeEditorInterface
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/EnvironmentLink
type EnvironmentLink struct {
	Sys EnvironmentLinkSys `json:"sys"`
}

// GetSys returns the value of Sys.
func (s *EnvironmentLink) GetSys() EnvironmentLinkSys {
	return s.Sys
}

// SetSys sets the value of Sys.
func (s *EnvironmentLink) SetSys(val EnvironmentLinkSys) {
	s.Sys = val
}

// Merged schema.
type EnvironmentLinkSys struct {
	// Merged property.
	Type EnvironmentLinkSysType `json:"type"`
	ID   string                 `json:"id"`
	// Merged property.
	LinkType EnvironmentLinkSysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *EnvironmentLinkSys) GetType() EnvironmentLinkSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *EnvironmentLinkSys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *EnvironmentLinkSys) GetLinkType() EnvironmentLinkSysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *EnvironmentLinkSys) SetType(val EnvironmentLinkSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *EnvironmentLinkSys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *EnvironmentLinkSys) SetLinkType(val EnvironmentLinkSysLinkType) {
	s.LinkType = val
}

// Merged schema.
type EnvironmentLinkSysLinkType string

const (
	EnvironmentLinkSysLinkTypeEnvironment EnvironmentLinkSysLinkType = "Environment"
)

// AllValues returns all EnvironmentLinkSysLinkType values.
func (EnvironmentLinkSysLinkType) AllValues() []EnvironmentLinkSysLinkType {
	return []EnvironmentLinkSysLinkType{
		EnvironmentLinkSysLinkTypeEnvironment,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentLinkSysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentLinkSysLinkTypeEnvironment:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentLinkSysLinkType) UnmarshalText(data []byte) error {
	switch EnvironmentLinkSysLinkType(data) {
	case EnvironmentLinkSysLinkTypeEnvironment:
		*s = EnvironmentLinkSysLinkTypeEnvironment
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type EnvironmentLinkSysType string

const (
	EnvironmentLinkSysTypeLink EnvironmentLinkSysType = "Link"
)

// AllValues returns all EnvironmentLinkSysType values.
func (EnvironmentLinkSysType) AllValues() []EnvironmentLinkSysType {
	return []EnvironmentLinkSysType{
		EnvironmentLinkSysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentLinkSysType) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentLinkSysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentLinkSysType) UnmarshalText(data []byte) error {
	switch EnvironmentLinkSysType(data) {
	case EnvironmentLinkSysTypeLink:
		*s = EnvironmentLinkSysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/Error
type Error struct {
	Sys     ErrorSys  `json:"sys"`
	Message OptString `json:"message"`
	Details jx.Raw    `json:"details"`
}

// GetSys returns the value of Sys.
func (s *Error) GetSys() ErrorSys {
	return s.Sys
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() OptString {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *Error) GetDetails() jx.Raw {
	return s.Details
}

// SetSys sets the value of Sys.
func (s *Error) SetSys(val ErrorSys) {
	s.Sys = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val OptString) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *Error) SetDetails(val jx.Raw) {
	s.Details = val
}

func (*Error) activateContentTypeRes()       {}
func (*Error) createDeliveryApiKeyRes()      {}
func (*Error) createPersonalAccessTokenRes() {}
func (*Error) createRoleRes()                {}
func (*Error) createWebhookDefinitionRes()   {}
func (*Error) deactivateContentTypeRes()     {}
func (*Error) deleteAppInstallationRes()     {}
func (*Error) deleteContentTypeRes()         {}
func (*Error) deleteDeliveryApiKeyRes()      {}
func (*Error) deleteRoleRes()                {}
func (*Error) deleteWebhookDefinitionRes()   {}
func (*Error) getAppInstallationRes()        {}
func (*Error) getAuthenticatedUserRes()      {}
func (*Error) getContentTypeRes()            {}
func (*Error) getDeliveryApiKeyRes()         {}
func (*Error) getEditorInterfaceRes()        {}
func (*Error) getPersonalAccessTokenRes()    {}
func (*Error) getPreviewApiKeyRes()          {}
func (*Error) getRoleRes()                   {}
func (*Error) getWebhookDefinitionRes()      {}
func (*Error) putAppInstallationRes()        {}
func (*Error) putContentTypeRes()            {}
func (*Error) putEditorInterfaceRes()        {}
func (*Error) revokePersonalAccessTokenRes() {}
func (*Error) updateDeliveryApiKeyRes()      {}
func (*Error) updateRoleRes()                {}
func (*Error) updateWebhookDefinitionRes()   {}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

func (*ErrorStatusCode) activateContentTypeRes()       {}
func (*ErrorStatusCode) createDeliveryApiKeyRes()      {}
func (*ErrorStatusCode) createPersonalAccessTokenRes() {}
func (*ErrorStatusCode) createRoleRes()                {}
func (*ErrorStatusCode) createWebhookDefinitionRes()   {}
func (*ErrorStatusCode) deactivateContentTypeRes()     {}
func (*ErrorStatusCode) deleteAppInstallationRes()     {}
func (*ErrorStatusCode) deleteContentTypeRes()         {}
func (*ErrorStatusCode) deleteDeliveryApiKeyRes()      {}
func (*ErrorStatusCode) deleteRoleRes()                {}
func (*ErrorStatusCode) deleteWebhookDefinitionRes()   {}
func (*ErrorStatusCode) getAppInstallationRes()        {}
func (*ErrorStatusCode) getAuthenticatedUserRes()      {}
func (*ErrorStatusCode) getContentTypeRes()            {}
func (*ErrorStatusCode) getDeliveryApiKeyRes()         {}
func (*ErrorStatusCode) getEditorInterfaceRes()        {}
func (*ErrorStatusCode) getPersonalAccessTokenRes()    {}
func (*ErrorStatusCode) getPreviewApiKeyRes()          {}
func (*ErrorStatusCode) getRoleRes()                   {}
func (*ErrorStatusCode) getWebhookDefinitionRes()      {}
func (*ErrorStatusCode) putAppInstallationRes()        {}
func (*ErrorStatusCode) putContentTypeRes()            {}
func (*ErrorStatusCode) putEditorInterfaceRes()        {}
func (*ErrorStatusCode) revokePersonalAccessTokenRes() {}
func (*ErrorStatusCode) updateDeliveryApiKeyRes()      {}
func (*ErrorStatusCode) updateRoleRes()                {}
func (*ErrorStatusCode) updateWebhookDefinitionRes()   {}

// Ref: #/components/schemas/ErrorSys
type ErrorSys struct {
	Type ErrorSysType `json:"type"`
	ID   string       `json:"id"`
}

// GetType returns the value of Type.
func (s *ErrorSys) GetType() ErrorSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *ErrorSys) GetID() string {
	return s.ID
}

// SetType sets the value of Type.
func (s *ErrorSys) SetType(val ErrorSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ErrorSys) SetID(val string) {
	s.ID = val
}

type ErrorSysType string

const (
	ErrorSysTypeError ErrorSysType = "Error"
)

// AllValues returns all ErrorSysType values.
func (ErrorSysType) AllValues() []ErrorSysType {
	return []ErrorSysType{
		ErrorSysTypeError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ErrorSysType) MarshalText() ([]byte, error) {
	switch s {
	case ErrorSysTypeError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ErrorSysType) UnmarshalText(data []byte) error {
	switch ErrorSysType(data) {
	case ErrorSysTypeError:
		*s = ErrorSysTypeError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilString) SetToNull() {
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/responses/no-content
type NoContent struct{}

func (*NoContent) deactivateContentTypeRes()   {}
func (*NoContent) deleteAppInstallationRes()   {}
func (*NoContent) deleteContentTypeRes()       {}
func (*NoContent) deleteDeliveryApiKeyRes()    {}
func (*NoContent) deleteRoleRes()              {}
func (*NoContent) deleteWebhookDefinitionRes() {}

// NewOptApiKeyPreviewAPIKey returns new OptApiKeyPreviewAPIKey with value set to v.
func NewOptApiKeyPreviewAPIKey(v ApiKeyPreviewAPIKey) OptApiKeyPreviewAPIKey {
	return OptApiKeyPreviewAPIKey{
		Value: v,
		Set:   true,
	}
}

// OptApiKeyPreviewAPIKey is optional ApiKeyPreviewAPIKey.
type OptApiKeyPreviewAPIKey struct {
	Value ApiKeyPreviewAPIKey
	Set   bool
}

// IsSet returns true if OptApiKeyPreviewAPIKey was set.
func (o OptApiKeyPreviewAPIKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptApiKeyPreviewAPIKey) Reset() {
	var v ApiKeyPreviewAPIKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptApiKeyPreviewAPIKey) SetTo(v ApiKeyPreviewAPIKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptApiKeyPreviewAPIKey) Get() (v ApiKeyPreviewAPIKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptApiKeyPreviewAPIKey) Or(d ApiKeyPreviewAPIKey) ApiKeyPreviewAPIKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContentTypeFieldsItemItems returns new OptContentTypeFieldsItemItems with value set to v.
func NewOptContentTypeFieldsItemItems(v ContentTypeFieldsItemItems) OptContentTypeFieldsItemItems {
	return OptContentTypeFieldsItemItems{
		Value: v,
		Set:   true,
	}
}

// OptContentTypeFieldsItemItems is optional ContentTypeFieldsItemItems.
type OptContentTypeFieldsItemItems struct {
	Value ContentTypeFieldsItemItems
	Set   bool
}

// IsSet returns true if OptContentTypeFieldsItemItems was set.
func (o OptContentTypeFieldsItemItems) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContentTypeFieldsItemItems) Reset() {
	var v ContentTypeFieldsItemItems
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContentTypeFieldsItemItems) SetTo(v ContentTypeFieldsItemItems) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContentTypeFieldsItemItems) Get() (v ContentTypeFieldsItemItems, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContentTypeFieldsItemItems) Or(d ContentTypeFieldsItemItems) ContentTypeFieldsItemItems {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContentTypeRequestFieldsFieldsItemItems returns new OptContentTypeRequestFieldsFieldsItemItems with value set to v.
func NewOptContentTypeRequestFieldsFieldsItemItems(v ContentTypeRequestFieldsFieldsItemItems) OptContentTypeRequestFieldsFieldsItemItems {
	return OptContentTypeRequestFieldsFieldsItemItems{
		Value: v,
		Set:   true,
	}
}

// OptContentTypeRequestFieldsFieldsItemItems is optional ContentTypeRequestFieldsFieldsItemItems.
type OptContentTypeRequestFieldsFieldsItemItems struct {
	Value ContentTypeRequestFieldsFieldsItemItems
	Set   bool
}

// IsSet returns true if OptContentTypeRequestFieldsFieldsItemItems was set.
func (o OptContentTypeRequestFieldsFieldsItemItems) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContentTypeRequestFieldsFieldsItemItems) Reset() {
	var v ContentTypeRequestFieldsFieldsItemItems
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContentTypeRequestFieldsFieldsItemItems) SetTo(v ContentTypeRequestFieldsFieldsItemItems) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContentTypeRequestFieldsFieldsItemItems) Get() (v ContentTypeRequestFieldsFieldsItemItems, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContentTypeRequestFieldsFieldsItemItems) Or(d ContentTypeRequestFieldsFieldsItemItems) ContentTypeRequestFieldsFieldsItemItems {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceControlsItemArray returns new OptNilEditorInterfaceControlsItemArray with value set to v.
func NewOptNilEditorInterfaceControlsItemArray(v []EditorInterfaceControlsItem) OptNilEditorInterfaceControlsItemArray {
	return OptNilEditorInterfaceControlsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceControlsItemArray is optional nullable []EditorInterfaceControlsItem.
type OptNilEditorInterfaceControlsItemArray struct {
	Value []EditorInterfaceControlsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceControlsItemArray was set.
func (o OptNilEditorInterfaceControlsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceControlsItemArray) Reset() {
	var v []EditorInterfaceControlsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceControlsItemArray) SetTo(v []EditorInterfaceControlsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEditorInterfaceControlsItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEditorInterfaceControlsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceControlsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceControlsItemArray) Get() (v []EditorInterfaceControlsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceControlsItemArray) Or(d []EditorInterfaceControlsItem) []EditorInterfaceControlsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceEditorLayoutItemArray returns new OptNilEditorInterfaceEditorLayoutItemArray with value set to v.
func NewOptNilEditorInterfaceEditorLayoutItemArray(v []EditorInterfaceEditorLayoutItem) OptNilEditorInterfaceEditorLayoutItemArray {
	return OptNilEditorInterfaceEditorLayoutItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceEditorLayoutItemArray is optional nullable []EditorInterfaceEditorLayoutItem.
type OptNilEditorInterfaceEditorLayoutItemArray struct {
	Value []EditorInterfaceEditorLayoutItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceEditorLayoutItemArray was set.
func (o OptNilEditorInterfaceEditorLayoutItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceEditorLayoutItemArray) Reset() {
	var v []EditorInterfaceEditorLayoutItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceEditorLayoutItemArray) SetTo(v []EditorInterfaceEditorLayoutItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEditorInterfaceEditorLayoutItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEditorInterfaceEditorLayoutItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceEditorLayoutItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceEditorLayoutItemArray) Get() (v []EditorInterfaceEditorLayoutItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceEditorLayoutItemArray) Or(d []EditorInterfaceEditorLayoutItem) []EditorInterfaceEditorLayoutItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceFieldsControlsItemArray returns new OptNilEditorInterfaceFieldsControlsItemArray with value set to v.
func NewOptNilEditorInterfaceFieldsControlsItemArray(v []EditorInterfaceFieldsControlsItem) OptNilEditorInterfaceFieldsControlsItemArray {
	return OptNilEditorInterfaceFieldsControlsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceFieldsControlsItemArray is optional nullable []EditorInterfaceFieldsControlsItem.
type OptNilEditorInterfaceFieldsControlsItemArray struct {
	Value []EditorInterfaceFieldsControlsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceFieldsControlsItemArray was set.
func (o OptNilEditorInterfaceFieldsControlsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceFieldsControlsItemArray) Reset() {
	var v []EditorInterfaceFieldsControlsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceFieldsControlsItemArray) SetTo(v []EditorInterfaceFieldsControlsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEditorInterfaceFieldsControlsItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEditorInterfaceFieldsControlsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceFieldsControlsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceFieldsControlsItemArray) Get() (v []EditorInterfaceFieldsControlsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceFieldsControlsItemArray) Or(d []EditorInterfaceFieldsControlsItem) []EditorInterfaceFieldsControlsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceFieldsEditorLayoutItemArray returns new OptNilEditorInterfaceFieldsEditorLayoutItemArray with value set to v.
func NewOptNilEditorInterfaceFieldsEditorLayoutItemArray(v []EditorInterfaceFieldsEditorLayoutItem) OptNilEditorInterfaceFieldsEditorLayoutItemArray {
	return OptNilEditorInterfaceFieldsEditorLayoutItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceFieldsEditorLayoutItemArray is optional nullable []EditorInterfaceFieldsEditorLayoutItem.
type OptNilEditorInterfaceFieldsEditorLayoutItemArray struct {
	Value []EditorInterfaceFieldsEditorLayoutItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceFieldsEditorLayoutItemArray was set.
func (o OptNilEditorInterfaceFieldsEditorLayoutItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceFieldsEditorLayoutItemArray) Reset() {
	var v []EditorInterfaceFieldsEditorLayoutItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceFieldsEditorLayoutItemArray) SetTo(v []EditorInterfaceFieldsEditorLayoutItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEditorInterfaceFieldsEditorLayoutItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEditorInterfaceFieldsEditorLayoutItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceFieldsEditorLayoutItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceFieldsEditorLayoutItemArray) Get() (v []EditorInterfaceFieldsEditorLayoutItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceFieldsEditorLayoutItemArray) Or(d []EditorInterfaceFieldsEditorLayoutItem) []EditorInterfaceFieldsEditorLayoutItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceFieldsGroupControlsItemArray returns new OptNilEditorInterfaceFieldsGroupControlsItemArray with value set to v.
func NewOptNilEditorInterfaceFieldsGroupControlsItemArray(v []EditorInterfaceFieldsGroupControlsItem) OptNilEditorInterfaceFieldsGroupControlsItemArray {
	return OptNilEditorInterfaceFieldsGroupControlsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceFieldsGroupControlsItemArray is optional nullable []EditorInterfaceFieldsGroupControlsItem.
type OptNilEditorInterfaceFieldsGroupControlsItemArray struct {
	Value []EditorInterfaceFieldsGroupControlsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceFieldsGroupControlsItemArray was set.
func (o OptNilEditorInterfaceFieldsGroupControlsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceFieldsGroupControlsItemArray) Reset() {
	var v []EditorInterfaceFieldsGroupControlsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceFieldsGroupControlsItemArray) SetTo(v []EditorInterfaceFieldsGroupControlsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEditorInterfaceFieldsGroupControlsItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEditorInterfaceFieldsGroupControlsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceFieldsGroupControlsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceFieldsGroupControlsItemArray) Get() (v []EditorInterfaceFieldsGroupControlsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceFieldsGroupControlsItemArray) Or(d []EditorInterfaceFieldsGroupControlsItem) []EditorInterfaceFieldsGroupControlsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceFieldsSidebarItemArray returns new OptNilEditorInterfaceFieldsSidebarItemArray with value set to v.
func NewOptNilEditorInterfaceFieldsSidebarItemArray(v []EditorInterfaceFieldsSidebarItem) OptNilEditorInterfaceFieldsSidebarItemArray {
	return OptNilEditorInterfaceFieldsSidebarItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceFieldsSidebarItemArray is optional nullable []EditorInterfaceFieldsSidebarItem.
type OptNilEditorInterfaceFieldsSidebarItemArray struct {
	Value []EditorInterfaceFieldsSidebarItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceFieldsSidebarItemArray was set.
func (o OptNilEditorInterfaceFieldsSidebarItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceFieldsSidebarItemArray) Reset() {
	var v []EditorInterfaceFieldsSidebarItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceFieldsSidebarItemArray) SetTo(v []EditorInterfaceFieldsSidebarItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEditorInterfaceFieldsSidebarItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEditorInterfaceFieldsSidebarItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceFieldsSidebarItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceFieldsSidebarItemArray) Get() (v []EditorInterfaceFieldsSidebarItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceFieldsSidebarItemArray) Or(d []EditorInterfaceFieldsSidebarItem) []EditorInterfaceFieldsSidebarItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceGroupControlsItemArray returns new OptNilEditorInterfaceGroupControlsItemArray with value set to v.
func NewOptNilEditorInterfaceGroupControlsItemArray(v []EditorInterfaceGroupControlsItem) OptNilEditorInterfaceGroupControlsItemArray {
	return OptNilEditorInterfaceGroupControlsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceGroupControlsItemArray is optional nullable []EditorInterfaceGroupControlsItem.
type OptNilEditorInterfaceGroupControlsItemArray struct {
	Value []EditorInterfaceGroupControlsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceGroupControlsItemArray was set.
func (o OptNilEditorInterfaceGroupControlsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceGroupControlsItemArray) Reset() {
	var v []EditorInterfaceGroupControlsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceGroupControlsItemArray) SetTo(v []EditorInterfaceGroupControlsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEditorInterfaceGroupControlsItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEditorInterfaceGroupControlsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceGroupControlsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceGroupControlsItemArray) Get() (v []EditorInterfaceGroupControlsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceGroupControlsItemArray) Or(d []EditorInterfaceGroupControlsItem) []EditorInterfaceGroupControlsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceSidebarItemArray returns new OptNilEditorInterfaceSidebarItemArray with value set to v.
func NewOptNilEditorInterfaceSidebarItemArray(v []EditorInterfaceSidebarItem) OptNilEditorInterfaceSidebarItemArray {
	return OptNilEditorInterfaceSidebarItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceSidebarItemArray is optional nullable []EditorInterfaceSidebarItem.
type OptNilEditorInterfaceSidebarItemArray struct {
	Value []EditorInterfaceSidebarItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceSidebarItemArray was set.
func (o OptNilEditorInterfaceSidebarItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceSidebarItemArray) Reset() {
	var v []EditorInterfaceSidebarItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceSidebarItemArray) SetTo(v []EditorInterfaceSidebarItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEditorInterfaceSidebarItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEditorInterfaceSidebarItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceSidebarItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceSidebarItemArray) Get() (v []EditorInterfaceSidebarItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceSidebarItemArray) Or(d []EditorInterfaceSidebarItem) []EditorInterfaceSidebarItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt) SetToNull() {
	o.Set = true
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookDefinitionFieldsTransformation returns new OptNilWebhookDefinitionFieldsTransformation with value set to v.
func NewOptNilWebhookDefinitionFieldsTransformation(v WebhookDefinitionFieldsTransformation) OptNilWebhookDefinitionFieldsTransformation {
	return OptNilWebhookDefinitionFieldsTransformation{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookDefinitionFieldsTransformation is optional nullable WebhookDefinitionFieldsTransformation.
type OptNilWebhookDefinitionFieldsTransformation struct {
	Value WebhookDefinitionFieldsTransformation
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookDefinitionFieldsTransformation was set.
func (o OptNilWebhookDefinitionFieldsTransformation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookDefinitionFieldsTransformation) Reset() {
	var v WebhookDefinitionFieldsTransformation
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookDefinitionFieldsTransformation) SetTo(v WebhookDefinitionFieldsTransformation) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookDefinitionFieldsTransformation) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookDefinitionFieldsTransformation) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookDefinitionFieldsTransformation
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookDefinitionFieldsTransformation) Get() (v WebhookDefinitionFieldsTransformation, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookDefinitionFieldsTransformation) Or(d WebhookDefinitionFieldsTransformation) WebhookDefinitionFieldsTransformation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookDefinitionFilterArray returns new OptNilWebhookDefinitionFilterArray with value set to v.
func NewOptNilWebhookDefinitionFilterArray(v []WebhookDefinitionFilter) OptNilWebhookDefinitionFilterArray {
	return OptNilWebhookDefinitionFilterArray{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookDefinitionFilterArray is optional nullable []WebhookDefinitionFilter.
type OptNilWebhookDefinitionFilterArray struct {
	Value []WebhookDefinitionFilter
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookDefinitionFilterArray was set.
func (o OptNilWebhookDefinitionFilterArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookDefinitionFilterArray) Reset() {
	var v []WebhookDefinitionFilter
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookDefinitionFilterArray) SetTo(v []WebhookDefinitionFilter) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookDefinitionFilterArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookDefinitionFilterArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []WebhookDefinitionFilter
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookDefinitionFilterArray) Get() (v []WebhookDefinitionFilter, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookDefinitionFilterArray) Or(d []WebhookDefinitionFilter) []WebhookDefinitionFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookDefinitionTransformation returns new OptNilWebhookDefinitionTransformation with value set to v.
func NewOptNilWebhookDefinitionTransformation(v WebhookDefinitionTransformation) OptNilWebhookDefinitionTransformation {
	return OptNilWebhookDefinitionTransformation{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookDefinitionTransformation is optional nullable WebhookDefinitionTransformation.
type OptNilWebhookDefinitionTransformation struct {
	Value WebhookDefinitionTransformation
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookDefinitionTransformation was set.
func (o OptNilWebhookDefinitionTransformation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookDefinitionTransformation) Reset() {
	var v WebhookDefinitionTransformation
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookDefinitionTransformation) SetTo(v WebhookDefinitionTransformation) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookDefinitionTransformation) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookDefinitionTransformation) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookDefinitionTransformation
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookDefinitionTransformation) Get() (v WebhookDefinitionTransformation, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookDefinitionTransformation) Or(d WebhookDefinitionTransformation) WebhookDefinitionTransformation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookDefinitionFilterNot returns new OptWebhookDefinitionFilterNot with value set to v.
func NewOptWebhookDefinitionFilterNot(v WebhookDefinitionFilterNot) OptWebhookDefinitionFilterNot {
	return OptWebhookDefinitionFilterNot{
		Value: v,
		Set:   true,
	}
}

// OptWebhookDefinitionFilterNot is optional WebhookDefinitionFilterNot.
type OptWebhookDefinitionFilterNot struct {
	Value WebhookDefinitionFilterNot
	Set   bool
}

// IsSet returns true if OptWebhookDefinitionFilterNot was set.
func (o OptWebhookDefinitionFilterNot) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookDefinitionFilterNot) Reset() {
	var v WebhookDefinitionFilterNot
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookDefinitionFilterNot) SetTo(v WebhookDefinitionFilterNot) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookDefinitionFilterNot) Get() (v WebhookDefinitionFilterNot, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookDefinitionFilterNot) Or(d WebhookDefinitionFilterNot) WebhookDefinitionFilterNot {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Merged schema.
// Ref: #/components/schemas/PersonalAccessToken
type PersonalAccessToken struct {
	Sys       PersonalAccessTokenSys `json:"sys"`
	Name      string                 `json:"name"`
	Scopes    []string               `json:"scopes"`
	Token     OptString              `json:"token"`
	RevokedAt OptNilDateTime         `json:"revokedAt"`
}

// GetSys returns the value of Sys.
func (s *PersonalAccessToken) GetSys() PersonalAccessTokenSys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *PersonalAccessToken) GetName() string {
	return s.Name
}

// GetScopes returns the value of Scopes.
func (s *PersonalAccessToken) GetScopes() []string {
	return s.Scopes
}

// GetToken returns the value of Token.
func (s *PersonalAccessToken) GetToken() OptString {
	return s.Token
}

// GetRevokedAt returns the value of RevokedAt.
func (s *PersonalAccessToken) GetRevokedAt() OptNilDateTime {
	return s.RevokedAt
}

// SetSys sets the value of Sys.
func (s *PersonalAccessToken) SetSys(val PersonalAccessTokenSys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *PersonalAccessToken) SetName(val string) {
	s.Name = val
}

// SetScopes sets the value of Scopes.
func (s *PersonalAccessToken) SetScopes(val []string) {
	s.Scopes = val
}

// SetToken sets the value of Token.
func (s *PersonalAccessToken) SetToken(val OptString) {
	s.Token = val
}

// SetRevokedAt sets the value of RevokedAt.
func (s *PersonalAccessToken) SetRevokedAt(val OptNilDateTime) {
	s.RevokedAt = val
}

func (*PersonalAccessToken) createPersonalAccessTokenRes() {}
func (*PersonalAccessToken) getPersonalAccessTokenRes()    {}
func (*PersonalAccessToken) revokePersonalAccessTokenRes() {}

// Ref: #/components/schemas/PersonalAccessTokenRequestFields
type PersonalAccessTokenRequestFields struct {
	Name      string    `json:"name"`
	Scopes    []string  `json:"scopes"`
	ExpiresIn OptNilInt `json:"expiresIn"`
}

// GetName returns the value of Name.
func (s *PersonalAccessTokenRequestFields) GetName() string {
	return s.Name
}

// GetScopes returns the value of Scopes.
func (s *PersonalAccessTokenRequestFields) GetScopes() []string {
	return s.Scopes
}

// GetExpiresIn returns the value of ExpiresIn.
func (s *PersonalAccessTokenRequestFields) GetExpiresIn() OptNilInt {
	return s.ExpiresIn
}

// SetName sets the value of Name.
func (s *PersonalAccessTokenRequestFields) SetName(val string) {
	s.Name = val
}

// SetScopes sets the value of Scopes.
func (s *PersonalAccessTokenRequestFields) SetScopes(val []string) {
	s.Scopes = val
}

// SetExpiresIn sets the value of ExpiresIn.
func (s *PersonalAccessTokenRequestFields) SetExpiresIn(val OptNilInt) {
	s.ExpiresIn = val
}

// Merged schema.
// Ref: #/components/schemas/PersonalAccessTokenSys
type PersonalAccessTokenSys struct {
	// Merged property.
	Type          PersonalAccessTokenSysType `json:"type"`
	ID            string                     `json:"id"`
	ExpiresAt     OptNilDateTime             `json:"expiresAt"`
	LastUsedAt    OptNilDateTime             `json:"lastUsedAt"`
	RedactedValue OptString                  `json:"redactedValue"`
}

// GetType returns the value of Type.
func (s *PersonalAccessTokenSys) GetType() PersonalAccessTokenSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *PersonalAccessTokenSys) GetID() string {
	return s.ID
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *PersonalAccessTokenSys) GetExpiresAt() OptNilDateTime {
	return s.ExpiresAt
}

// GetLastUsedAt returns the value of LastUsedAt.
func (s *PersonalAccessTokenSys) GetLastUsedAt() OptNilDateTime {
	return s.LastUsedAt
}

// GetRedactedValue returns the value of RedactedValue.
func (s *PersonalAccessTokenSys) GetRedactedValue() OptString {
	return s.RedactedValue
}

// SetType sets the value of Type.
func (s *PersonalAccessTokenSys) SetType(val PersonalAccessTokenSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *PersonalAccessTokenSys) SetID(val string) {
	s.ID = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *PersonalAccessTokenSys) SetExpiresAt(val OptNilDateTime) {
	s.ExpiresAt = val
}

// SetLastUsedAt sets the value of LastUsedAt.
func (s *PersonalAccessTokenSys) SetLastUsedAt(val OptNilDateTime) {
	s.LastUsedAt = val
}

// SetRedactedValue sets the value of RedactedValue.
func (s *PersonalAccessTokenSys) SetRedactedValue(val OptString) {
	s.RedactedValue = val
}

// Merged schema.
type PersonalAccessTokenSysType string

const (
	PersonalAccessTokenSysTypePersonalAccessToken PersonalAccessTokenSysType = "PersonalAccessToken"
)

// AllValues returns all PersonalAccessTokenSysType values.
func (PersonalAccessTokenSysType) AllValues() []PersonalAccessTokenSysType {
	return []PersonalAccessTokenSysType{
		PersonalAccessTokenSysTypePersonalAccessToken,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PersonalAccessTokenSysType) MarshalText() ([]byte, error) {
	switch s {
	case PersonalAccessTokenSysTypePersonalAccessToken:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PersonalAccessTokenSysType) UnmarshalText(data []byte) error {
	switch PersonalAccessTokenSysType(data) {
	case PersonalAccessTokenSysTypePersonalAccessToken:
		*s = PersonalAccessTokenSysTypePersonalAccessToken
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/PreviewApiKey
type PreviewApiKey struct {
	Sys          PreviewApiKeySys  `json:"sys"`
	Name         string            `json:"name"`
	Description  OptNilString      `json:"description"`
	AccessToken  string            `json:"accessToken"`
	Environments []EnvironmentLink `json:"environments"`
}

// GetSys returns the value of Sys.
func (s *PreviewApiKey) GetSys() PreviewApiKeySys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *PreviewApiKey) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *PreviewApiKey) GetDescription() OptNilString {
	return s.Description
}

// GetAccessToken returns the value of AccessToken.
func (s *PreviewApiKey) GetAccessToken() string {
	return s.AccessToken
}

// GetEnvironments returns the value of Environments.
func (s *PreviewApiKey) GetEnvironments() []EnvironmentLink {
	return s.Environments
}

// SetSys sets the value of Sys.
func (s *PreviewApiKey) SetSys(val PreviewApiKeySys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *PreviewApiKey) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *PreviewApiKey) SetDescription(val OptNilString) {
	s.Description = val
}

// SetAccessToken sets the value of AccessToken.
func (s *PreviewApiKey) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetEnvironments sets the value of Environments.
func (s *PreviewApiKey) SetEnvironments(val []EnvironmentLink) {
	s.Environments = val
}

func (*PreviewApiKey) getPreviewApiKeyRes() {}

// Merged schema.
// Ref: #/components/schemas/PreviewApiKeySys
type PreviewApiKeySys struct {
	// Merged property.
	Type      PreviewApiKeySysType `json:"type"`
	Space     SpaceLink            `json:"space"`
	ID        string               `json:"id"`
	Version   int                  `json:"version"`
	CreatedAt OptDateTime          `json:"createdAt"`
	UpdatedAt OptDateTime          `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *PreviewApiKeySys) GetType() PreviewApiKeySysType {
	return s.Type
}

// GetSpace returns the value of Space.
func (s *PreviewApiKeySys) GetSpace() SpaceLink {
	return s.Space
}

// GetID returns the value of ID.
func (s *PreviewApiKeySys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *PreviewApiKeySys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PreviewApiKeySys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PreviewApiKeySys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *PreviewApiKeySys) SetType(val PreviewApiKeySysType) {
	s.Type = val
}

// SetSpace sets the value of Space.
func (s *PreviewApiKeySys) SetSpace(val SpaceLink) {
	s.Space = val
}

// SetID sets the value of ID.
func (s *PreviewApiKeySys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *PreviewApiKeySys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PreviewApiKeySys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PreviewApiKeySys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type PreviewApiKeySysType string

const (
	PreviewApiKeySysTypePreviewApiKey PreviewApiKeySysType = "PreviewApiKey"
)

// AllValues returns all PreviewApiKeySysType values.
func (PreviewApiKeySysType) AllValues() []PreviewApiKeySysType {
	return []PreviewApiKeySysType{
		PreviewApiKeySysTypePreviewApiKey,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PreviewApiKeySysType) MarshalText() ([]byte, error) {
	switch s {
	case PreviewApiKeySysTypePreviewApiKey:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PreviewApiKeySysType) UnmarshalText(data []byte) error {
	switch PreviewApiKeySysType(data) {
	case PreviewApiKeySysTypePreviewApiKey:
		*s = PreviewApiKeySysTypePreviewApiKey
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PutContentTypeCreated ContentType

func (*PutContentTypeCreated) putContentTypeRes() {}

type PutContentTypeOK ContentType

func (*PutContentTypeOK) putContentTypeRes() {}

// Merged schema.
// Ref: #/components/schemas/Role
type Role struct {
	Sys         RoleSys            `json:"sys"`
	Name        string             `json:"name"`
	Description OptNilString       `json:"description"`
	Permissions RolePermissions    `json:"permissions"`
	Policies    []RolePoliciesItem `json:"policies"`
}

// GetSys returns the value of Sys.
func (s *Role) GetSys() RoleSys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *Role) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Role) GetDescription() OptNilString {
	return s.Description
}

// GetPermissions returns the value of Permissions.
func (s *Role) GetPermissions() RolePermissions {
	return s.Permissions
}

// GetPolicies returns the value of Policies.
func (s *Role) GetPolicies() []RolePoliciesItem {
	return s.Policies
}

// SetSys sets the value of Sys.
func (s *Role) SetSys(val RoleSys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *Role) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Role) SetDescription(val OptNilString) {
	s.Description = val
}

// SetPermissions sets the value of Permissions.
func (s *Role) SetPermissions(val RolePermissions) {
	s.Permissions = val
}

// SetPolicies sets the value of Policies.
func (s *Role) SetPolicies(val []RolePoliciesItem) {
	s.Policies = val
}

func (*Role) createRoleRes() {}
func (*Role) getRoleRes()    {}
func (*Role) updateRoleRes() {}

// Ref: #/components/schemas/RoleFields
type RoleFields struct {
	Name        string                   `json:"name"`
	Description OptNilString             `json:"description"`
	Permissions RoleFieldsPermissions    `json:"permissions"`
	Policies    []RoleFieldsPoliciesItem `json:"policies"`
}

// GetName returns the value of Name.
func (s *RoleFields) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *RoleFields) GetDescription() OptNilString {
	return s.Description
}

// GetPermissions returns the value of Permissions.
func (s *RoleFields) GetPermissions() RoleFieldsPermissions {
	return s.Permissions
}

// GetPolicies returns the value of Policies.
func (s *RoleFields) GetPolicies() []RoleFieldsPoliciesItem {
	return s.Policies
}

// SetName sets the value of Name.
func (s *RoleFields) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *RoleFields) SetDescription(val OptNilString) {
	s.Description = val
}

// SetPermissions sets the value of Permissions.
func (s *RoleFields) SetPermissions(val RoleFieldsPermissions) {
	s.Permissions = val
}

// SetPolicies sets the value of Policies.
func (s *RoleFields) SetPolicies(val []RoleFieldsPoliciesItem) {
	s.Policies = val
}

type RoleFieldsPermissions map[string]RoleFieldsPermissionsItem

func (s *RoleFieldsPermissions) init() RoleFieldsPermissions {
	m := *s
	if m == nil {
		m = map[string]RoleFieldsPermissionsItem{}
		*s = m
	}
	return m
}

// RoleFieldsPermissionsItem represents sum type.
type RoleFieldsPermissionsItem struct {
	Type        RoleFieldsPermissionsItemType // switch on this field
	String      string
	StringArray []string
}

// RoleFieldsPermissionsItemType is oneOf type of RoleFieldsPermissionsItem.
type RoleFieldsPermissionsItemType string

// Possible values for RoleFieldsPermissionsItemType.
const (
	StringRoleFieldsPermissionsItem      RoleFieldsPermissionsItemType = "string"
	StringArrayRoleFieldsPermissionsItem RoleFieldsPermissionsItemType = "[]string"
)

// IsString reports whether RoleFieldsPermissionsItem is string.
func (s RoleFieldsPermissionsItem) IsString() bool { return s.Type == StringRoleFieldsPermissionsItem }

// IsStringArray reports whether RoleFieldsPermissionsItem is []string.
func (s RoleFieldsPermissionsItem) IsStringArray() bool {
	return s.Type == StringArrayRoleFieldsPermissionsItem
}

// SetString sets RoleFieldsPermissionsItem to string.
func (s *RoleFieldsPermissionsItem) SetString(v string) {
	s.Type = StringRoleFieldsPermissionsItem
	s.String = v
}

// GetString returns string and true boolean if RoleFieldsPermissionsItem is string.
func (s RoleFieldsPermissionsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringRoleFieldsPermissionsItem returns new RoleFieldsPermissionsItem from string.
func NewStringRoleFieldsPermissionsItem(v string) RoleFieldsPermissionsItem {
	var s RoleFieldsPermissionsItem
	s.SetString(v)
	return s
}

// SetStringArray sets RoleFieldsPermissionsItem to []string.
func (s *RoleFieldsPermissionsItem) SetStringArray(v []string) {
	s.Type = StringArrayRoleFieldsPermissionsItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if RoleFieldsPermissionsItem is []string.
func (s RoleFieldsPermissionsItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayRoleFieldsPermissionsItem returns new RoleFieldsPermissionsItem from []string.
func NewStringArrayRoleFieldsPermissionsItem(v []string) RoleFieldsPermissionsItem {
	var s RoleFieldsPermissionsItem
	s.SetStringArray(v)
	return s
}

type RoleFieldsPoliciesItem struct {
	Effect     RoleFieldsPoliciesItemEffect  `json:"effect"`
	Actions    RoleFieldsPoliciesItemActions `json:"actions"`
	Constraint jx.Raw                        `json:"constraint"`
}

// GetEffect returns the value of Effect.
func (s *RoleFieldsPoliciesItem) GetEffect() RoleFieldsPoliciesItemEffect {
	return s.Effect
}

// GetActions returns the value of Actions.
func (s *RoleFieldsPoliciesItem) GetActions() RoleFieldsPoliciesItemActions {
	return s.Actions
}

// GetConstraint returns the value of Constraint.
func (s *RoleFieldsPoliciesItem) GetConstraint() jx.Raw {
	return s.Constraint
}

// SetEffect sets the value of Effect.
func (s *RoleFieldsPoliciesItem) SetEffect(val RoleFieldsPoliciesItemEffect) {
	s.Effect = val
}

// SetActions sets the value of Actions.
func (s *RoleFieldsPoliciesItem) SetActions(val RoleFieldsPoliciesItemActions) {
	s.Actions = val
}

// SetConstraint sets the value of Constraint.
func (s *RoleFieldsPoliciesItem) SetConstraint(val jx.Raw) {
	s.Constraint = val
}

// RoleFieldsPoliciesItemActions represents sum type.
type RoleFieldsPoliciesItemActions struct {
	Type        RoleFieldsPoliciesItemActionsType // switch on this field
	String      string
	StringArray []string
}

// RoleFieldsPoliciesItemActionsType is oneOf type of RoleFieldsPoliciesItemActions.
type RoleFieldsPoliciesItemActionsType string

// Possible values for RoleFieldsPoliciesItemActionsType.
const (
	StringRoleFieldsPoliciesItemActions      RoleFieldsPoliciesItemActionsType = "string"
	StringArrayRoleFieldsPoliciesItemActions RoleFieldsPoliciesItemActionsType = "[]string"
)

// IsString reports whether RoleFieldsPoliciesItemActions is string.
func (s RoleFieldsPoliciesItemActions) IsString() bool {
	return s.Type == StringRoleFieldsPoliciesItemActions
}

// IsStringArray reports whether RoleFieldsPoliciesItemActions is []string.
func (s RoleFieldsPoliciesItemActions) IsStringArray() bool {
	return s.Type == StringArrayRoleFieldsPoliciesItemActions
}

// SetString sets RoleFieldsPoliciesItemActions to string.
func (s *RoleFieldsPoliciesItemActions) SetString(v string) {
	s.Type = StringRoleFieldsPoliciesItemActions
	s.String = v
}

// GetString returns string and true boolean if RoleFieldsPoliciesItemActions is string.
func (s RoleFieldsPoliciesItemActions) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringRoleFieldsPoliciesItemActions returns new RoleFieldsPoliciesItemActions from string.
func NewStringRoleFieldsPoliciesItemActions(v string) RoleFieldsPoliciesItemActions {
	var s RoleFieldsPoliciesItemActions
	s.SetString(v)
	return s
}

// SetStringArray sets RoleFieldsPoliciesItemActions to []string.
func (s *RoleFieldsPoliciesItemActions) SetStringArray(v []string) {
	s.Type = StringArrayRoleFieldsPoliciesItemActions
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if RoleFieldsPoliciesItemActions is []string.
func (s RoleFieldsPoliciesItemActions) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayRoleFieldsPoliciesItemActions returns new RoleFieldsPoliciesItemActions from []string.
func NewStringArrayRoleFieldsPoliciesItemActions(v []string) RoleFieldsPoliciesItemActions {
	var s RoleFieldsPoliciesItemActions
	s.SetStringArray(v)
	return s
}

type RoleFieldsPoliciesItemEffect string

const (
	RoleFieldsPoliciesItemEffectAllow RoleFieldsPoliciesItemEffect = "allow"
	RoleFieldsPoliciesItemEffectDeny  RoleFieldsPoliciesItemEffect = "deny"
)

// AllValues returns all RoleFieldsPoliciesItemEffect values.
func (RoleFieldsPoliciesItemEffect) AllValues() []RoleFieldsPoliciesItemEffect {
	return []RoleFieldsPoliciesItemEffect{
		RoleFieldsPoliciesItemEffectAllow,
		RoleFieldsPoliciesItemEffectDeny,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RoleFieldsPoliciesItemEffect) MarshalText() ([]byte, error) {
	switch s {
	case RoleFieldsPoliciesItemEffectAllow:
		return []byte(s), nil
	case RoleFieldsPoliciesItemEffectDeny:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RoleFieldsPoliciesItemEffect) UnmarshalText(data []byte) error {
	switch RoleFieldsPoliciesItemEffect(data) {
	case RoleFieldsPoliciesItemEffectAllow:
		*s = RoleFieldsPoliciesItemEffectAllow
		return nil
	case RoleFieldsPoliciesItemEffectDeny:
		*s = RoleFieldsPoliciesItemEffectDeny
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RolePermissions map[string]RolePermissionsItem

func (s *RolePermissions) init() RolePermissions {
	m := *s
	if m == nil {
		m = map[string]RolePermissionsItem{}
		*s = m
	}
	return m
}

// RolePermissionsItem represents sum type.
type RolePermissionsItem struct {
	Type        RolePermissionsItemType // switch on this field
	String      string
	StringArray []string
}

// RolePermissionsItemType is oneOf type of RolePermissionsItem.
type RolePermissionsItemType string

// Possible values for RolePermissionsItemType.
const (
	StringRolePermissionsItem      RolePermissionsItemType = "string"
	StringArrayRolePermissionsItem RolePermissionsItemType = "[]string"
)

// IsString reports whether RolePermissionsItem is string.
func (s RolePermissionsItem) IsString() bool { return s.Type == StringRolePermissionsItem }

// IsStringArray reports whether RolePermissionsItem is []string.
func (s RolePermissionsItem) IsStringArray() bool { return s.Type == StringArrayRolePermissionsItem }

// SetString sets RolePermissionsItem to string.
func (s *RolePermissionsItem) SetString(v string) {
	s.Type = StringRolePermissionsItem
	s.String = v
}

// GetString returns string and true boolean if RolePermissionsItem is string.
func (s RolePermissionsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringRolePermissionsItem returns new RolePermissionsItem from string.
func NewStringRolePermissionsItem(v string) RolePermissionsItem {
	var s RolePermissionsItem
	s.SetString(v)
	return s
}

// SetStringArray sets RolePermissionsItem to []string.
func (s *RolePermissionsItem) SetStringArray(v []string) {
	s.Type = StringArrayRolePermissionsItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if RolePermissionsItem is []string.
func (s RolePermissionsItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayRolePermissionsItem returns new RolePermissionsItem from []string.
func NewStringArrayRolePermissionsItem(v []string) RolePermissionsItem {
	var s RolePermissionsItem
	s.SetStringArray(v)
	return s
}

type RolePoliciesItem struct {
	Effect     RolePoliciesItemEffect  `json:"effect"`
	Actions    RolePoliciesItemActions `json:"actions"`
	Constraint jx.Raw                  `json:"constraint"`
}

// GetEffect returns the value of Effect.
func (s *RolePoliciesItem) GetEffect() RolePoliciesItemEffect {
	return s.Effect
}

// GetActions returns the value of Actions.
func (s *RolePoliciesItem) GetActions() RolePoliciesItemActions {
	return s.Actions
}

// GetConstraint returns the value of Constraint.
func (s *RolePoliciesItem) GetConstraint() jx.Raw {
	return s.Constraint
}

// SetEffect sets the value of Effect.
func (s *RolePoliciesItem) SetEffect(val RolePoliciesItemEffect) {
	s.Effect = val
}

// SetActions sets the value of Actions.
func (s *RolePoliciesItem) SetActions(val RolePoliciesItemActions) {
	s.Actions = val
}

// SetConstraint sets the value of Constraint.
func (s *RolePoliciesItem) SetConstraint(val jx.Raw) {
	s.Constraint = val
}

// RolePoliciesItemActions represents sum type.
type RolePoliciesItemActions struct {
	Type        RolePoliciesItemActionsType // switch on this field
	String      string
	StringArray []string
}

// RolePoliciesItemActionsType is oneOf type of RolePoliciesItemActions.
type RolePoliciesItemActionsType string

// Possible values for RolePoliciesItemActionsType.
const (
	StringRolePoliciesItemActions      RolePoliciesItemActionsType = "string"
	StringArrayRolePoliciesItemActions RolePoliciesItemActionsType = "[]string"
)

// IsString reports whether RolePoliciesItemActions is string.
func (s RolePoliciesItemActions) IsString() bool { return s.Type == StringRolePoliciesItemActions }

// IsStringArray reports whether RolePoliciesItemActions is []string.
func (s RolePoliciesItemActions) IsStringArray() bool {
	return s.Type == StringArrayRolePoliciesItemActions
}

// SetString sets RolePoliciesItemActions to string.
func (s *RolePoliciesItemActions) SetString(v string) {
	s.Type = StringRolePoliciesItemActions
	s.String = v
}

// GetString returns string and true boolean if RolePoliciesItemActions is string.
func (s RolePoliciesItemActions) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringRolePoliciesItemActions returns new RolePoliciesItemActions from string.
func NewStringRolePoliciesItemActions(v string) RolePoliciesItemActions {
	var s RolePoliciesItemActions
	s.SetString(v)
	return s
}

// SetStringArray sets RolePoliciesItemActions to []string.
func (s *RolePoliciesItemActions) SetStringArray(v []string) {
	s.Type = StringArrayRolePoliciesItemActions
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if RolePoliciesItemActions is []string.
func (s RolePoliciesItemActions) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayRolePoliciesItemActions returns new RolePoliciesItemActions from []string.
func NewStringArrayRolePoliciesItemActions(v []string) RolePoliciesItemActions {
	var s RolePoliciesItemActions
	s.SetStringArray(v)
	return s
}

type RolePoliciesItemEffect string

const (
	RolePoliciesItemEffectAllow RolePoliciesItemEffect = "allow"
	RolePoliciesItemEffectDeny  RolePoliciesItemEffect = "deny"
)

// AllValues returns all RolePoliciesItemEffect values.
func (RolePoliciesItemEffect) AllValues() []RolePoliciesItemEffect {
	return []RolePoliciesItemEffect{
		RolePoliciesItemEffectAllow,
		RolePoliciesItemEffectDeny,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RolePoliciesItemEffect) MarshalText() ([]byte, error) {
	switch s {
	case RolePoliciesItemEffectAllow:
		return []byte(s), nil
	case RolePoliciesItemEffectDeny:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RolePoliciesItemEffect) UnmarshalText(data []byte) error {
	switch RolePoliciesItemEffect(data) {
	case RolePoliciesItemEffectAllow:
		*s = RolePoliciesItemEffectAllow
		return nil
	case RolePoliciesItemEffectDeny:
		*s = RolePoliciesItemEffectDeny
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/RoleSys
type RoleSys struct {
	// Merged property.
	Type      RoleSysType `json:"type"`
	Space     SpaceLink   `json:"space"`
	ID        string      `json:"id"`
	Version   int         `json:"version"`
	CreatedAt OptDateTime `json:"createdAt"`
	UpdatedAt OptDateTime `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *RoleSys) GetType() RoleSysType {
	return s.Type
}

// GetSpace returns the value of Space.
func (s *RoleSys) GetSpace() SpaceLink {
	return s.Space
}

// GetID returns the value of ID.
func (s *RoleSys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *RoleSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RoleSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *RoleSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *RoleSys) SetType(val RoleSysType) {
	s.Type = val
}

// SetSpace sets the value of Space.
func (s *RoleSys) SetSpace(val SpaceLink) {
	s.Space = val
}

// SetID sets the value of ID.
func (s *RoleSys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *RoleSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RoleSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *RoleSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type RoleSysType string

const (
	RoleSysTypeRole RoleSysType = "Role"
)

// AllValues returns all RoleSysType values.
func (RoleSysType) AllValues() []RoleSysType {
	return []RoleSysType{
		RoleSysTypeRole,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RoleSysType) MarshalText() ([]byte, error) {
	switch s {
	case RoleSysTypeRole:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RoleSysType) UnmarshalText(data []byte) error {
	switch RoleSysType(data) {
	case RoleSysTypeRole:
		*s = RoleSysTypeRole
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SpaceLink
type SpaceLink struct {
	Sys SpaceLinkSys `json:"sys"`
}

// GetSys returns the value of Sys.
func (s *SpaceLink) GetSys() SpaceLinkSys {
	return s.Sys
}

// SetSys sets the value of Sys.
func (s *SpaceLink) SetSys(val SpaceLinkSys) {
	s.Sys = val
}

// Merged schema.
type SpaceLinkSys struct {
	// Merged property.
	Type SpaceLinkSysType `json:"type"`
	ID   string           `json:"id"`
	// Merged property.
	LinkType SpaceLinkSysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *SpaceLinkSys) GetType() SpaceLinkSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *SpaceLinkSys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *SpaceLinkSys) GetLinkType() SpaceLinkSysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *SpaceLinkSys) SetType(val SpaceLinkSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *SpaceLinkSys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *SpaceLinkSys) SetLinkType(val SpaceLinkSysLinkType) {
	s.LinkType = val
}

// Merged schema.
type SpaceLinkSysLinkType string

const (
	SpaceLinkSysLinkTypeSpace SpaceLinkSysLinkType = "Space"
)

// AllValues returns all SpaceLinkSysLinkType values.
func (SpaceLinkSysLinkType) AllValues() []SpaceLinkSysLinkType {
	return []SpaceLinkSysLinkType{
		SpaceLinkSysLinkTypeSpace,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SpaceLinkSysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case SpaceLinkSysLinkTypeSpace:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SpaceLinkSysLinkType) UnmarshalText(data []byte) error {
	switch SpaceLinkSysLinkType(data) {
	case SpaceLinkSysLinkTypeSpace:
		*s = SpaceLinkSysLinkTypeSpace
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type SpaceLinkSysType string

const (
	SpaceLinkSysTypeLink SpaceLinkSysType = "Link"
)

// AllValues returns all SpaceLinkSysType values.
func (SpaceLinkSysType) AllValues() []SpaceLinkSysType {
	return []SpaceLinkSysType{
		SpaceLinkSysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SpaceLinkSysType) MarshalText() ([]byte, error) {
	switch s {
	case SpaceLinkSysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SpaceLinkSysType) UnmarshalText(data []byte) error {
	switch SpaceLinkSysType(data) {
	case SpaceLinkSysTypeLink:
		*s = SpaceLinkSysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/User
type User struct {
	Sys       UserSys `json:"sys"`
	Email     string  `json:"email"`
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
}

// GetSys returns the value of Sys.
func (s *User) GetSys() UserSys {
	return s.Sys
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() string {
	return s.Email
}

// GetFirstName returns the value of FirstName.
func (s *User) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *User) GetLastName() string {
	return s.LastName
}

// SetSys sets the value of Sys.
func (s *User) SetSys(val UserSys) {
	s.Sys = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val string) {
	s.Email = val
}

// SetFirstName sets the value of FirstName.
func (s *User) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *User) SetLastName(val string) {
	s.LastName = val
}

func (*User) getAuthenticatedUserRes() {}

// Merged schema.
// Ref: #/components/schemas/UserSys
type UserSys struct {
	// Merged property.
	Type      UserSysType `json:"type"`
	ID        string      `json:"id"`
	Version   int         `json:"version"`
	CreatedAt OptDateTime `json:"createdAt"`
	UpdatedAt OptDateTime `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *UserSys) GetType() UserSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *UserSys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *UserSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UserSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *UserSys) SetType(val UserSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *UserSys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *UserSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UserSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type UserSysType string

const (
	UserSysTypeUser UserSysType = "User"
)

// AllValues returns all UserSysType values.
func (UserSysType) AllValues() []UserSysType {
	return []UserSysType{
		UserSysTypeUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserSysType) MarshalText() ([]byte, error) {
	switch s {
	case UserSysTypeUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserSysType) UnmarshalText(data []byte) error {
	switch UserSysType(data) {
	case UserSysTypeUser:
		*s = UserSysTypeUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/WebhookDefinition
type WebhookDefinition struct {
	Sys               WebhookDefinitionSys                  `json:"sys"`
	Name              string                                `json:"name"`
	URL               string                                `json:"url"`
	Topics            []string                              `json:"topics"`
	Filters           OptNilWebhookDefinitionFilterArray    `json:"filters"`
	HttpBasicUsername OptNilString                          `json:"httpBasicUsername"`
	HttpBasicPassword OptNilString                          `json:"httpBasicPassword"`
	Headers           WebhookDefinitionHeaders              `json:"headers"`
	Transformation    OptNilWebhookDefinitionTransformation `json:"transformation"`
	Active            OptBool                               `json:"active"`
}

// GetSys returns the value of Sys.
func (s *WebhookDefinition) GetSys() WebhookDefinitionSys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *WebhookDefinition) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *WebhookDefinition) GetURL() string {
	return s.URL
}

// GetTopics returns the value of Topics.
func (s *WebhookDefinition) GetTopics() []string {
	return s.Topics
}

// GetFilters returns the value of Filters.
func (s *WebhookDefinition) GetFilters() OptNilWebhookDefinitionFilterArray {
	return s.Filters
}

// GetHttpBasicUsername returns the value of HttpBasicUsername.
func (s *WebhookDefinition) GetHttpBasicUsername() OptNilString {
	return s.HttpBasicUsername
}

// GetHttpBasicPassword returns the value of HttpBasicPassword.
func (s *WebhookDefinition) GetHttpBasicPassword() OptNilString {
	return s.HttpBasicPassword
}

// GetHeaders returns the value of Headers.
func (s *WebhookDefinition) GetHeaders() WebhookDefinitionHeaders {
	return s.Headers
}

// GetTransformation returns the value of Transformation.
func (s *WebhookDefinition) GetTransformation() OptNilWebhookDefinitionTransformation {
	return s.Transformation
}

// GetActive returns the value of Active.
func (s *WebhookDefinition) GetActive() OptBool {
	return s.Active
}

// SetSys sets the value of Sys.
func (s *WebhookDefinition) SetSys(val WebhookDefinitionSys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *WebhookDefinition) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *WebhookDefinition) SetURL(val string) {
	s.URL = val
}

// SetTopics sets the value of Topics.
func (s *WebhookDefinition) SetTopics(val []string) {
	s.Topics = val
}

// SetFilters sets the value of Filters.
func (s *WebhookDefinition) SetFilters(val OptNilWebhookDefinitionFilterArray) {
	s.Filters = val
}

// SetHttpBasicUsername sets the value of HttpBasicUsername.
func (s *WebhookDefinition) SetHttpBasicUsername(val OptNilString) {
	s.HttpBasicUsername = val
}

// SetHttpBasicPassword sets the value of HttpBasicPassword.
func (s *WebhookDefinition) SetHttpBasicPassword(val OptNilString) {
	s.HttpBasicPassword = val
}

// SetHeaders sets the value of Headers.
func (s *WebhookDefinition) SetHeaders(val WebhookDefinitionHeaders) {
	s.Headers = val
}

// SetTransformation sets the value of Transformation.
func (s *WebhookDefinition) SetTransformation(val OptNilWebhookDefinitionTransformation) {
	s.Transformation = val
}

// SetActive sets the value of Active.
func (s *WebhookDefinition) SetActive(val OptBool) {
	s.Active = val
}

func (*WebhookDefinition) createWebhookDefinitionRes() {}
func (*WebhookDefinition) getWebhookDefinitionRes()    {}
func (*WebhookDefinition) updateWebhookDefinitionRes() {}

// Ref: #/components/schemas/WebhookDefinitionFields
type WebhookDefinitionFields struct {
	Name              string                                      `json:"name"`
	URL               string                                      `json:"url"`
	Topics            []string                                    `json:"topics"`
	Filters           OptNilWebhookDefinitionFilterArray          `json:"filters"`
	HttpBasicUsername OptNilString                                `json:"httpBasicUsername"`
	HttpBasicPassword OptNilString                                `json:"httpBasicPassword"`
	Headers           WebhookDefinitionHeaders                    `json:"headers"`
	Transformation    OptNilWebhookDefinitionFieldsTransformation `json:"transformation"`
	Active            OptBool                                     `json:"active"`
}

// GetName returns the value of Name.
func (s *WebhookDefinitionFields) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *WebhookDefinitionFields) GetURL() string {
	return s.URL
}

// GetTopics returns the value of Topics.
func (s *WebhookDefinitionFields) GetTopics() []string {
	return s.Topics
}

// GetFilters returns the value of Filters.
func (s *WebhookDefinitionFields) GetFilters() OptNilWebhookDefinitionFilterArray {
	return s.Filters
}

// GetHttpBasicUsername returns the value of HttpBasicUsername.
func (s *WebhookDefinitionFields) GetHttpBasicUsername() OptNilString {
	return s.HttpBasicUsername
}

// GetHttpBasicPassword returns the value of HttpBasicPassword.
func (s *WebhookDefinitionFields) GetHttpBasicPassword() OptNilString {
	return s.HttpBasicPassword
}

// GetHeaders returns the value of Headers.
func (s *WebhookDefinitionFields) GetHeaders() WebhookDefinitionHeaders {
	return s.Headers
}

// GetTransformation returns the value of Transformation.
func (s *WebhookDefinitionFields) GetTransformation() OptNilWebhookDefinitionFieldsTransformation {
	return s.Transformation
}

// GetActive returns the value of Active.
func (s *WebhookDefinitionFields) GetActive() OptBool {
	return s.Active
}

// SetName sets the value of Name.
func (s *WebhookDefinitionFields) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *WebhookDefinitionFields) SetURL(val string) {
	s.URL = val
}

// SetTopics sets the value of Topics.
func (s *WebhookDefinitionFields) SetTopics(val []string) {
	s.Topics = val
}

// SetFilters sets the value of Filters.
func (s *WebhookDefinitionFields) SetFilters(val OptNilWebhookDefinitionFilterArray) {
	s.Filters = val
}

// SetHttpBasicUsername sets the value of HttpBasicUsername.
func (s *WebhookDefinitionFields) SetHttpBasicUsername(val OptNilString) {
	s.HttpBasicUsername = val
}

// SetHttpBasicPassword sets the value of HttpBasicPassword.
func (s *WebhookDefinitionFields) SetHttpBasicPassword(val OptNilString) {
	s.HttpBasicPassword = val
}

// SetHeaders sets the value of Headers.
func (s *WebhookDefinitionFields) SetHeaders(val WebhookDefinitionHeaders) {
	s.Headers = val
}

// SetTransformation sets the value of Transformation.
func (s *WebhookDefinitionFields) SetTransformation(val OptNilWebhookDefinitionFieldsTransformation) {
	s.Transformation = val
}

// SetActive sets the value of Active.
func (s *WebhookDefinitionFields) SetActive(val OptBool) {
	s.Active = val
}

type WebhookDefinitionFieldsTransformation struct {
	Method               OptString `json:"method"`
	ContentType          OptString `json:"contentType"`
	IncludeContentLength OptBool   `json:"includeContentLength"`
	Body                 jx.Raw    `json:"body"`
}

// GetMethod returns the value of Method.
func (s *WebhookDefinitionFieldsTransformation) GetMethod() OptString {
	return s.Method
}

// GetContentType returns the value of ContentType.
func (s *WebhookDefinitionFieldsTransformation) GetContentType() OptString {
	return s.ContentType
}

// GetIncludeContentLength returns the value of IncludeContentLength.
func (s *WebhookDefinitionFieldsTransformation) GetIncludeContentLength() OptBool {
	return s.IncludeContentLength
}

// GetBody returns the value of Body.
func (s *WebhookDefinitionFieldsTransformation) GetBody() jx.Raw {
	return s.Body
}

// SetMethod sets the value of Method.
func (s *WebhookDefinitionFieldsTransformation) SetMethod(val OptString) {
	s.Method = val
}

// SetContentType sets the value of ContentType.
func (s *WebhookDefinitionFieldsTransformation) SetContentType(val OptString) {
	s.ContentType = val
}

// SetIncludeContentLength sets the value of IncludeContentLength.
func (s *WebhookDefinitionFieldsTransformation) SetIncludeContentLength(val OptBool) {
	s.IncludeContentLength = val
}

// SetBody sets the value of Body.
func (s *WebhookDefinitionFieldsTransformation) SetBody(val jx.Raw) {
	s.Body = val
}

// Ref: #/components/schemas/WebhookDefinitionFilter
type WebhookDefinitionFilter struct {
	Not    OptWebhookDefinitionFilterNot `json:"not"`
	Equals WebhookDefinitionFilterEquals `json:"equals"`
	In     WebhookDefinitionFilterIn     `json:"in"`
	Regexp WebhookDefinitionFilterRegexp `json:"regexp"`
}

// GetNot returns the value of Not.
func (s *WebhookDefinitionFilter) GetNot() OptWebhookDefinitionFilterNot {
	return s.Not
}

// GetEquals returns the value of Equals.
func (s *WebhookDefinitionFilter) GetEquals() WebhookDefinitionFilterEquals {
	return s.Equals
}

// GetIn returns the value of In.
func (s *WebhookDefinitionFilter) GetIn() WebhookDefinitionFilterIn {
	return s.In
}

// GetRegexp returns the value of Regexp.
func (s *WebhookDefinitionFilter) GetRegexp() WebhookDefinitionFilterRegexp {
	return s.Regexp
}

// SetNot sets the value of Not.
func (s *WebhookDefinitionFilter) SetNot(val OptWebhookDefinitionFilterNot) {
	s.Not = val
}

// SetEquals sets the value of Equals.
func (s *WebhookDefinitionFilter) SetEquals(val WebhookDefinitionFilterEquals) {
	s.Equals = val
}

// SetIn sets the value of In.
func (s *WebhookDefinitionFilter) SetIn(val WebhookDefinitionFilterIn) {
	s.In = val
}

// SetRegexp sets the value of Regexp.
func (s *WebhookDefinitionFilter) SetRegexp(val WebhookDefinitionFilterRegexp) {
	s.Regexp = val
}

type WebhookDefinitionFilterEquals []jx.Raw

type WebhookDefinitionFilterIn []jx.Raw

// Ref: #/components/schemas/WebhookDefinitionFilterNot
type WebhookDefinitionFilterNot struct {
	Equals WebhookDefinitionFilterEquals `json:"equals"`
	In     WebhookDefinitionFilterIn     `json:"in"`
	Regexp WebhookDefinitionFilterRegexp `json:"regexp"`
}

// GetEquals returns the value of Equals.
func (s *WebhookDefinitionFilterNot) GetEquals() WebhookDefinitionFilterEquals {
	return s.Equals
}

// GetIn returns the value of In.
func (s *WebhookDefinitionFilterNot) GetIn() WebhookDefinitionFilterIn {
	return s.In
}

// GetRegexp returns the value of Regexp.
func (s *WebhookDefinitionFilterNot) GetRegexp() WebhookDefinitionFilterRegexp {
	return s.Regexp
}

// SetEquals sets the value of Equals.
func (s *WebhookDefinitionFilterNot) SetEquals(val WebhookDefinitionFilterEquals) {
	s.Equals = val
}

// SetIn sets the value of In.
func (s *WebhookDefinitionFilterNot) SetIn(val WebhookDefinitionFilterIn) {
	s.In = val
}

// SetRegexp sets the value of Regexp.
func (s *WebhookDefinitionFilterNot) SetRegexp(val WebhookDefinitionFilterRegexp) {
	s.Regexp = val
}

type WebhookDefinitionFilterRegexp []jx.Raw

// Ref: #/components/schemas/WebhookDefinitionHeader
type WebhookDefinitionHeader struct {
	Key    string    `json:"key"`
	Value  OptString `json:"value"`
	Secret OptBool   `json:"secret"`
}

// GetKey returns the value of Key.
func (s *WebhookDefinitionHeader) GetKey() string {
	return s.Key
}

// GetValue returns the value of Value.
func (s *WebhookDefinitionHeader) GetValue() OptString {
	return s.Value
}

// GetSecret returns the value of Secret.
func (s *WebhookDefinitionHeader) GetSecret() OptBool {
	return s.Secret
}

// SetKey sets the value of Key.
func (s *WebhookDefinitionHeader) SetKey(val string) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *WebhookDefinitionHeader) SetValue(val OptString) {
	s.Value = val
}

// SetSecret sets the value of Secret.
func (s *WebhookDefinitionHeader) SetSecret(val OptBool) {
	s.Secret = val
}

type WebhookDefinitionHeaders []WebhookDefinitionHeader

// Merged schema.
// Ref: #/components/schemas/WebhookDefinitionSys
type WebhookDefinitionSys struct {
	// Merged property.
	Type      WebhookDefinitionSysType `json:"type"`
	Space     SpaceLink                `json:"space"`
	ID        string                   `json:"id"`
	Version   int                      `json:"version"`
	CreatedAt OptDateTime              `json:"createdAt"`
	UpdatedAt OptDateTime              `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *WebhookDefinitionSys) GetType() WebhookDefinitionSysType {
	return s.Type
}

// GetSpace returns the value of Space.
func (s *WebhookDefinitionSys) GetSpace() SpaceLink {
	return s.Space
}

// GetID returns the value of ID.
func (s *WebhookDefinitionSys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *WebhookDefinitionSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *WebhookDefinitionSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *WebhookDefinitionSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *WebhookDefinitionSys) SetType(val WebhookDefinitionSysType) {
	s.Type = val
}

// SetSpace sets the value of Space.
func (s *WebhookDefinitionSys) SetSpace(val SpaceLink) {
	s.Space = val
}

// SetID sets the value of ID.
func (s *WebhookDefinitionSys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *WebhookDefinitionSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *WebhookDefinitionSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *WebhookDefinitionSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type WebhookDefinitionSysType string

const (
	WebhookDefinitionSysTypeWebhookDefinition WebhookDefinitionSysType = "WebhookDefinition"
)

// AllValues returns all WebhookDefinitionSysType values.
func (WebhookDefinitionSysType) AllValues() []WebhookDefinitionSysType {
	return []WebhookDefinitionSysType{
		WebhookDefinitionSysTypeWebhookDefinition,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookDefinitionSysType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookDefinitionSysTypeWebhookDefinition:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookDefinitionSysType) UnmarshalText(data []byte) error {
	switch WebhookDefinitionSysType(data) {
	case WebhookDefinitionSysTypeWebhookDefinition:
		*s = WebhookDefinitionSysTypeWebhookDefinition
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type WebhookDefinitionTransformation struct {
	Method               OptString `json:"method"`
	ContentType          OptString `json:"contentType"`
	IncludeContentLength OptBool   `json:"includeContentLength"`
	Body                 jx.Raw    `json:"body"`
}

// GetMethod returns the value of Method.
func (s *WebhookDefinitionTransformation) GetMethod() OptString {
	return s.Method
}

// GetContentType returns the value of ContentType.
func (s *WebhookDefinitionTransformation) GetContentType() OptString {
	return s.ContentType
}

// GetIncludeContentLength returns the value of IncludeContentLength.
func (s *WebhookDefinitionTransformation) GetIncludeContentLength() OptBool {
	return s.IncludeContentLength
}

// GetBody returns the value of Body.
func (s *WebhookDefinitionTransformation) GetBody() jx.Raw {
	return s.Body
}

// SetMethod sets the value of Method.
func (s *WebhookDefinitionTransformation) SetMethod(val OptString) {
	s.Method = val
}

// SetContentType sets the value of ContentType.
func (s *WebhookDefinitionTransformation) SetContentType(val OptString) {
	s.ContentType = val
}

// SetIncludeContentLength sets the value of IncludeContentLength.
func (s *WebhookDefinitionTransformation) SetIncludeContentLength(val OptBool) {
	s.IncludeContentLength = val
}

// SetBody sets the value of Body.
func (s *WebhookDefinitionTransformation) SetBody(val jx.Raw) {
	s.Body = val
}
