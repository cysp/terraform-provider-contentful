// Code generated by ogen, DO NOT EDIT.

package client

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

type AccessToken struct {
	Token string
	Roles []string
}

// GetToken returns the value of Token.
func (s *AccessToken) GetToken() string {
	return s.Token
}

// GetRoles returns the value of Roles.
func (s *AccessToken) GetRoles() []string {
	return s.Roles
}

// SetToken sets the value of Token.
func (s *AccessToken) SetToken(val string) {
	s.Token = val
}

// SetRoles sets the value of Roles.
func (s *AccessToken) SetRoles(val []string) {
	s.Roles = val
}

type ActivateContentTypeApplicationJSONUnauthorized Error

func (*ActivateContentTypeApplicationJSONUnauthorized) activateContentTypeRes() {}

type ActivateContentTypeApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*ActivateContentTypeApplicationVndContentfulManagementV1JSONUnauthorized) activateContentTypeRes() {
}

// Merged schema.
// Ref: #/components/schemas/ApiKey
type ApiKey struct {
	Sys           ApiKeySys              `json:"sys"`
	Name          string                 `json:"name"`
	Description   OptNilString           `json:"description"`
	Environments  []EnvironmentLink      `json:"environments"`
	AccessToken   string                 `json:"accessToken"`
	PreviewAPIKey OptApiKeyPreviewAPIKey `json:"preview_api_key"`
}

// GetSys returns the value of Sys.
func (s *ApiKey) GetSys() ApiKeySys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *ApiKey) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ApiKey) GetDescription() OptNilString {
	return s.Description
}

// GetEnvironments returns the value of Environments.
func (s *ApiKey) GetEnvironments() []EnvironmentLink {
	return s.Environments
}

// GetAccessToken returns the value of AccessToken.
func (s *ApiKey) GetAccessToken() string {
	return s.AccessToken
}

// GetPreviewAPIKey returns the value of PreviewAPIKey.
func (s *ApiKey) GetPreviewAPIKey() OptApiKeyPreviewAPIKey {
	return s.PreviewAPIKey
}

// SetSys sets the value of Sys.
func (s *ApiKey) SetSys(val ApiKeySys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *ApiKey) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ApiKey) SetDescription(val OptNilString) {
	s.Description = val
}

// SetEnvironments sets the value of Environments.
func (s *ApiKey) SetEnvironments(val []EnvironmentLink) {
	s.Environments = val
}

// SetAccessToken sets the value of AccessToken.
func (s *ApiKey) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetPreviewAPIKey sets the value of PreviewAPIKey.
func (s *ApiKey) SetPreviewAPIKey(val OptApiKeyPreviewAPIKey) {
	s.PreviewAPIKey = val
}

func (*ApiKey) getDeliveryApiKeyRes() {}

type ApiKeyPreviewAPIKey struct {
	Sys ApiKeyPreviewAPIKeySys `json:"sys"`
}

// GetSys returns the value of Sys.
func (s *ApiKeyPreviewAPIKey) GetSys() ApiKeyPreviewAPIKeySys {
	return s.Sys
}

// SetSys sets the value of Sys.
func (s *ApiKeyPreviewAPIKey) SetSys(val ApiKeyPreviewAPIKeySys) {
	s.Sys = val
}

// Merged schema.
type ApiKeyPreviewAPIKeySys struct {
	// Merged property.
	Type ApiKeyPreviewAPIKeySysType `json:"type"`
	ID   string                     `json:"id"`
	// Merged property.
	LinkType ApiKeyPreviewAPIKeySysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *ApiKeyPreviewAPIKeySys) GetType() ApiKeyPreviewAPIKeySysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *ApiKeyPreviewAPIKeySys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *ApiKeyPreviewAPIKeySys) GetLinkType() ApiKeyPreviewAPIKeySysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *ApiKeyPreviewAPIKeySys) SetType(val ApiKeyPreviewAPIKeySysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ApiKeyPreviewAPIKeySys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *ApiKeyPreviewAPIKeySys) SetLinkType(val ApiKeyPreviewAPIKeySysLinkType) {
	s.LinkType = val
}

// Merged schema.
type ApiKeyPreviewAPIKeySysLinkType string

const (
	ApiKeyPreviewAPIKeySysLinkTypePreviewApiKey ApiKeyPreviewAPIKeySysLinkType = "PreviewApiKey"
)

// AllValues returns all ApiKeyPreviewAPIKeySysLinkType values.
func (ApiKeyPreviewAPIKeySysLinkType) AllValues() []ApiKeyPreviewAPIKeySysLinkType {
	return []ApiKeyPreviewAPIKeySysLinkType{
		ApiKeyPreviewAPIKeySysLinkTypePreviewApiKey,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ApiKeyPreviewAPIKeySysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case ApiKeyPreviewAPIKeySysLinkTypePreviewApiKey:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApiKeyPreviewAPIKeySysLinkType) UnmarshalText(data []byte) error {
	switch ApiKeyPreviewAPIKeySysLinkType(data) {
	case ApiKeyPreviewAPIKeySysLinkTypePreviewApiKey:
		*s = ApiKeyPreviewAPIKeySysLinkTypePreviewApiKey
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type ApiKeyPreviewAPIKeySysType string

const (
	ApiKeyPreviewAPIKeySysTypeLink ApiKeyPreviewAPIKeySysType = "Link"
)

// AllValues returns all ApiKeyPreviewAPIKeySysType values.
func (ApiKeyPreviewAPIKeySysType) AllValues() []ApiKeyPreviewAPIKeySysType {
	return []ApiKeyPreviewAPIKeySysType{
		ApiKeyPreviewAPIKeySysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ApiKeyPreviewAPIKeySysType) MarshalText() ([]byte, error) {
	switch s {
	case ApiKeyPreviewAPIKeySysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApiKeyPreviewAPIKeySysType) UnmarshalText(data []byte) error {
	switch ApiKeyPreviewAPIKeySysType(data) {
	case ApiKeyPreviewAPIKeySysTypeLink:
		*s = ApiKeyPreviewAPIKeySysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ApiKeyRequestFields
type ApiKeyRequestFields struct {
	Name         string            `json:"name"`
	Description  OptNilString      `json:"description"`
	Environments []EnvironmentLink `json:"environments"`
}

// GetName returns the value of Name.
func (s *ApiKeyRequestFields) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ApiKeyRequestFields) GetDescription() OptNilString {
	return s.Description
}

// GetEnvironments returns the value of Environments.
func (s *ApiKeyRequestFields) GetEnvironments() []EnvironmentLink {
	return s.Environments
}

// SetName sets the value of Name.
func (s *ApiKeyRequestFields) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ApiKeyRequestFields) SetDescription(val OptNilString) {
	s.Description = val
}

// SetEnvironments sets the value of Environments.
func (s *ApiKeyRequestFields) SetEnvironments(val []EnvironmentLink) {
	s.Environments = val
}

// ApiKeyStatusCode wraps ApiKey with StatusCode.
type ApiKeyStatusCode struct {
	StatusCode int
	Response   ApiKey
}

// GetStatusCode returns the value of StatusCode.
func (s *ApiKeyStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ApiKeyStatusCode) GetResponse() ApiKey {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ApiKeyStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ApiKeyStatusCode) SetResponse(val ApiKey) {
	s.Response = val
}

func (*ApiKeyStatusCode) createDeliveryApiKeyRes() {}
func (*ApiKeyStatusCode) updateDeliveryApiKeyRes() {}

// Merged schema.
// Ref: #/components/schemas/ApiKeySys
type ApiKeySys struct {
	// Merged property.
	Type      ApiKeySysType `json:"type"`
	Space     SpaceLink     `json:"space"`
	ID        string        `json:"id"`
	Version   int           `json:"version"`
	CreatedAt OptDateTime   `json:"createdAt"`
	UpdatedAt OptDateTime   `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *ApiKeySys) GetType() ApiKeySysType {
	return s.Type
}

// GetSpace returns the value of Space.
func (s *ApiKeySys) GetSpace() SpaceLink {
	return s.Space
}

// GetID returns the value of ID.
func (s *ApiKeySys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *ApiKeySys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ApiKeySys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ApiKeySys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *ApiKeySys) SetType(val ApiKeySysType) {
	s.Type = val
}

// SetSpace sets the value of Space.
func (s *ApiKeySys) SetSpace(val SpaceLink) {
	s.Space = val
}

// SetID sets the value of ID.
func (s *ApiKeySys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *ApiKeySys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ApiKeySys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ApiKeySys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type ApiKeySysType string

const (
	ApiKeySysTypeApiKey ApiKeySysType = "ApiKey"
)

// AllValues returns all ApiKeySysType values.
func (ApiKeySysType) AllValues() []ApiKeySysType {
	return []ApiKeySysType{
		ApiKeySysTypeApiKey,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ApiKeySysType) MarshalText() ([]byte, error) {
	switch s {
	case ApiKeySysTypeApiKey:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApiKeySysType) UnmarshalText(data []byte) error {
	switch ApiKeySysType(data) {
	case ApiKeySysTypeApiKey:
		*s = ApiKeySysTypeApiKey
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AppBundleLink
type AppBundleLink struct {
	Sys AppBundleLinkSys `json:"sys"`
}

// GetSys returns the value of Sys.
func (s *AppBundleLink) GetSys() AppBundleLinkSys {
	return s.Sys
}

// SetSys sets the value of Sys.
func (s *AppBundleLink) SetSys(val AppBundleLinkSys) {
	s.Sys = val
}

// Merged schema.
type AppBundleLinkSys struct {
	// Merged property.
	Type AppBundleLinkSysType `json:"type"`
	ID   string               `json:"id"`
	// Merged property.
	LinkType AppBundleLinkSysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *AppBundleLinkSys) GetType() AppBundleLinkSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *AppBundleLinkSys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *AppBundleLinkSys) GetLinkType() AppBundleLinkSysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *AppBundleLinkSys) SetType(val AppBundleLinkSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *AppBundleLinkSys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *AppBundleLinkSys) SetLinkType(val AppBundleLinkSysLinkType) {
	s.LinkType = val
}

// Merged schema.
type AppBundleLinkSysLinkType string

const (
	AppBundleLinkSysLinkTypeAppBundle AppBundleLinkSysLinkType = "AppBundle"
)

// AllValues returns all AppBundleLinkSysLinkType values.
func (AppBundleLinkSysLinkType) AllValues() []AppBundleLinkSysLinkType {
	return []AppBundleLinkSysLinkType{
		AppBundleLinkSysLinkTypeAppBundle,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppBundleLinkSysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case AppBundleLinkSysLinkTypeAppBundle:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppBundleLinkSysLinkType) UnmarshalText(data []byte) error {
	switch AppBundleLinkSysLinkType(data) {
	case AppBundleLinkSysLinkTypeAppBundle:
		*s = AppBundleLinkSysLinkTypeAppBundle
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type AppBundleLinkSysType string

const (
	AppBundleLinkSysTypeLink AppBundleLinkSysType = "Link"
)

// AllValues returns all AppBundleLinkSysType values.
func (AppBundleLinkSysType) AllValues() []AppBundleLinkSysType {
	return []AppBundleLinkSysType{
		AppBundleLinkSysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppBundleLinkSysType) MarshalText() ([]byte, error) {
	switch s {
	case AppBundleLinkSysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppBundleLinkSysType) UnmarshalText(data []byte) error {
	switch AppBundleLinkSysType(data) {
	case AppBundleLinkSysTypeLink:
		*s = AppBundleLinkSysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/AppDefinition
type AppDefinition struct {
	Sys        AppDefinitionSys             `json:"sys"`
	Name       string                       `json:"name"`
	Src        OptString                    `json:"src"`
	Bundle     OptAppBundleLink             `json:"bundle"`
	Locations  []AppDefinitionLocationsItem `json:"locations"`
	Parameters OptAppDefinitionParameters   `json:"parameters"`
}

// GetSys returns the value of Sys.
func (s *AppDefinition) GetSys() AppDefinitionSys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *AppDefinition) GetName() string {
	return s.Name
}

// GetSrc returns the value of Src.
func (s *AppDefinition) GetSrc() OptString {
	return s.Src
}

// GetBundle returns the value of Bundle.
func (s *AppDefinition) GetBundle() OptAppBundleLink {
	return s.Bundle
}

// GetLocations returns the value of Locations.
func (s *AppDefinition) GetLocations() []AppDefinitionLocationsItem {
	return s.Locations
}

// GetParameters returns the value of Parameters.
func (s *AppDefinition) GetParameters() OptAppDefinitionParameters {
	return s.Parameters
}

// SetSys sets the value of Sys.
func (s *AppDefinition) SetSys(val AppDefinitionSys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *AppDefinition) SetName(val string) {
	s.Name = val
}

// SetSrc sets the value of Src.
func (s *AppDefinition) SetSrc(val OptString) {
	s.Src = val
}

// SetBundle sets the value of Bundle.
func (s *AppDefinition) SetBundle(val OptAppBundleLink) {
	s.Bundle = val
}

// SetLocations sets the value of Locations.
func (s *AppDefinition) SetLocations(val []AppDefinitionLocationsItem) {
	s.Locations = val
}

// SetParameters sets the value of Parameters.
func (s *AppDefinition) SetParameters(val OptAppDefinitionParameters) {
	s.Parameters = val
}

func (*AppDefinition) getAppDefinitionRes() {}

// Ref: #/components/schemas/AppDefinitionFields
type AppDefinitionFields struct {
	Name       string                             `json:"name"`
	Src        OptString                          `json:"src"`
	Bundle     OptAppBundleLink                   `json:"bundle"`
	Locations  []AppDefinitionFieldsLocationsItem `json:"locations"`
	Parameters OptAppDefinitionParameters         `json:"parameters"`
}

// GetName returns the value of Name.
func (s *AppDefinitionFields) GetName() string {
	return s.Name
}

// GetSrc returns the value of Src.
func (s *AppDefinitionFields) GetSrc() OptString {
	return s.Src
}

// GetBundle returns the value of Bundle.
func (s *AppDefinitionFields) GetBundle() OptAppBundleLink {
	return s.Bundle
}

// GetLocations returns the value of Locations.
func (s *AppDefinitionFields) GetLocations() []AppDefinitionFieldsLocationsItem {
	return s.Locations
}

// GetParameters returns the value of Parameters.
func (s *AppDefinitionFields) GetParameters() OptAppDefinitionParameters {
	return s.Parameters
}

// SetName sets the value of Name.
func (s *AppDefinitionFields) SetName(val string) {
	s.Name = val
}

// SetSrc sets the value of Src.
func (s *AppDefinitionFields) SetSrc(val OptString) {
	s.Src = val
}

// SetBundle sets the value of Bundle.
func (s *AppDefinitionFields) SetBundle(val OptAppBundleLink) {
	s.Bundle = val
}

// SetLocations sets the value of Locations.
func (s *AppDefinitionFields) SetLocations(val []AppDefinitionFieldsLocationsItem) {
	s.Locations = val
}

// SetParameters sets the value of Parameters.
func (s *AppDefinitionFields) SetParameters(val OptAppDefinitionParameters) {
	s.Parameters = val
}

type AppDefinitionFieldsLocationsItem struct {
	Location       string                                            `json:"location"`
	FieldTypes     []AppDefinitionFieldsLocationsItemFieldTypesItem  `json:"fieldTypes"`
	NavigationItem OptAppDefinitionFieldsLocationsItemNavigationItem `json:"navigationItem"`
}

// GetLocation returns the value of Location.
func (s *AppDefinitionFieldsLocationsItem) GetLocation() string {
	return s.Location
}

// GetFieldTypes returns the value of FieldTypes.
func (s *AppDefinitionFieldsLocationsItem) GetFieldTypes() []AppDefinitionFieldsLocationsItemFieldTypesItem {
	return s.FieldTypes
}

// GetNavigationItem returns the value of NavigationItem.
func (s *AppDefinitionFieldsLocationsItem) GetNavigationItem() OptAppDefinitionFieldsLocationsItemNavigationItem {
	return s.NavigationItem
}

// SetLocation sets the value of Location.
func (s *AppDefinitionFieldsLocationsItem) SetLocation(val string) {
	s.Location = val
}

// SetFieldTypes sets the value of FieldTypes.
func (s *AppDefinitionFieldsLocationsItem) SetFieldTypes(val []AppDefinitionFieldsLocationsItemFieldTypesItem) {
	s.FieldTypes = val
}

// SetNavigationItem sets the value of NavigationItem.
func (s *AppDefinitionFieldsLocationsItem) SetNavigationItem(val OptAppDefinitionFieldsLocationsItemNavigationItem) {
	s.NavigationItem = val
}

type AppDefinitionFieldsLocationsItemFieldTypesItem struct {
	Type     string                                                 `json:"type"`
	LinkType OptString                                              `json:"linkType"`
	Items    OptAppDefinitionFieldsLocationsItemFieldTypesItemItems `json:"items"`
}

// GetType returns the value of Type.
func (s *AppDefinitionFieldsLocationsItemFieldTypesItem) GetType() string {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *AppDefinitionFieldsLocationsItemFieldTypesItem) GetLinkType() OptString {
	return s.LinkType
}

// GetItems returns the value of Items.
func (s *AppDefinitionFieldsLocationsItemFieldTypesItem) GetItems() OptAppDefinitionFieldsLocationsItemFieldTypesItemItems {
	return s.Items
}

// SetType sets the value of Type.
func (s *AppDefinitionFieldsLocationsItemFieldTypesItem) SetType(val string) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *AppDefinitionFieldsLocationsItemFieldTypesItem) SetLinkType(val OptString) {
	s.LinkType = val
}

// SetItems sets the value of Items.
func (s *AppDefinitionFieldsLocationsItemFieldTypesItem) SetItems(val OptAppDefinitionFieldsLocationsItemFieldTypesItemItems) {
	s.Items = val
}

type AppDefinitionFieldsLocationsItemFieldTypesItemItems struct {
	Type     string    `json:"type"`
	LinkType OptString `json:"linkType"`
}

// GetType returns the value of Type.
func (s *AppDefinitionFieldsLocationsItemFieldTypesItemItems) GetType() string {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *AppDefinitionFieldsLocationsItemFieldTypesItemItems) GetLinkType() OptString {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *AppDefinitionFieldsLocationsItemFieldTypesItemItems) SetType(val string) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *AppDefinitionFieldsLocationsItemFieldTypesItemItems) SetLinkType(val OptString) {
	s.LinkType = val
}

type AppDefinitionFieldsLocationsItemNavigationItem struct {
	Name string `json:"name"`
	Path string `json:"path"`
}

// GetName returns the value of Name.
func (s *AppDefinitionFieldsLocationsItemNavigationItem) GetName() string {
	return s.Name
}

// GetPath returns the value of Path.
func (s *AppDefinitionFieldsLocationsItemNavigationItem) GetPath() string {
	return s.Path
}

// SetName sets the value of Name.
func (s *AppDefinitionFieldsLocationsItemNavigationItem) SetName(val string) {
	s.Name = val
}

// SetPath sets the value of Path.
func (s *AppDefinitionFieldsLocationsItemNavigationItem) SetPath(val string) {
	s.Path = val
}

// Ref: #/components/schemas/AppDefinitionLink
type AppDefinitionLink struct {
	Sys AppDefinitionLinkSys `json:"sys"`
}

// GetSys returns the value of Sys.
func (s *AppDefinitionLink) GetSys() AppDefinitionLinkSys {
	return s.Sys
}

// SetSys sets the value of Sys.
func (s *AppDefinitionLink) SetSys(val AppDefinitionLinkSys) {
	s.Sys = val
}

// Merged schema.
type AppDefinitionLinkSys struct {
	// Merged property.
	Type AppDefinitionLinkSysType `json:"type"`
	ID   string                   `json:"id"`
	// Merged property.
	LinkType AppDefinitionLinkSysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *AppDefinitionLinkSys) GetType() AppDefinitionLinkSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *AppDefinitionLinkSys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *AppDefinitionLinkSys) GetLinkType() AppDefinitionLinkSysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *AppDefinitionLinkSys) SetType(val AppDefinitionLinkSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *AppDefinitionLinkSys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *AppDefinitionLinkSys) SetLinkType(val AppDefinitionLinkSysLinkType) {
	s.LinkType = val
}

// Merged schema.
type AppDefinitionLinkSysLinkType string

const (
	AppDefinitionLinkSysLinkTypeAppDefinition AppDefinitionLinkSysLinkType = "AppDefinition"
)

// AllValues returns all AppDefinitionLinkSysLinkType values.
func (AppDefinitionLinkSysLinkType) AllValues() []AppDefinitionLinkSysLinkType {
	return []AppDefinitionLinkSysLinkType{
		AppDefinitionLinkSysLinkTypeAppDefinition,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppDefinitionLinkSysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case AppDefinitionLinkSysLinkTypeAppDefinition:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppDefinitionLinkSysLinkType) UnmarshalText(data []byte) error {
	switch AppDefinitionLinkSysLinkType(data) {
	case AppDefinitionLinkSysLinkTypeAppDefinition:
		*s = AppDefinitionLinkSysLinkTypeAppDefinition
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type AppDefinitionLinkSysType string

const (
	AppDefinitionLinkSysTypeLink AppDefinitionLinkSysType = "Link"
)

// AllValues returns all AppDefinitionLinkSysType values.
func (AppDefinitionLinkSysType) AllValues() []AppDefinitionLinkSysType {
	return []AppDefinitionLinkSysType{
		AppDefinitionLinkSysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppDefinitionLinkSysType) MarshalText() ([]byte, error) {
	switch s {
	case AppDefinitionLinkSysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppDefinitionLinkSysType) UnmarshalText(data []byte) error {
	switch AppDefinitionLinkSysType(data) {
	case AppDefinitionLinkSysTypeLink:
		*s = AppDefinitionLinkSysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type AppDefinitionLocationsItem struct {
	Location       string                                      `json:"location"`
	FieldTypes     []AppDefinitionLocationsItemFieldTypesItem  `json:"fieldTypes"`
	NavigationItem OptAppDefinitionLocationsItemNavigationItem `json:"navigationItem"`
}

// GetLocation returns the value of Location.
func (s *AppDefinitionLocationsItem) GetLocation() string {
	return s.Location
}

// GetFieldTypes returns the value of FieldTypes.
func (s *AppDefinitionLocationsItem) GetFieldTypes() []AppDefinitionLocationsItemFieldTypesItem {
	return s.FieldTypes
}

// GetNavigationItem returns the value of NavigationItem.
func (s *AppDefinitionLocationsItem) GetNavigationItem() OptAppDefinitionLocationsItemNavigationItem {
	return s.NavigationItem
}

// SetLocation sets the value of Location.
func (s *AppDefinitionLocationsItem) SetLocation(val string) {
	s.Location = val
}

// SetFieldTypes sets the value of FieldTypes.
func (s *AppDefinitionLocationsItem) SetFieldTypes(val []AppDefinitionLocationsItemFieldTypesItem) {
	s.FieldTypes = val
}

// SetNavigationItem sets the value of NavigationItem.
func (s *AppDefinitionLocationsItem) SetNavigationItem(val OptAppDefinitionLocationsItemNavigationItem) {
	s.NavigationItem = val
}

type AppDefinitionLocationsItemFieldTypesItem struct {
	Type     string                                           `json:"type"`
	LinkType OptString                                        `json:"linkType"`
	Items    OptAppDefinitionLocationsItemFieldTypesItemItems `json:"items"`
}

// GetType returns the value of Type.
func (s *AppDefinitionLocationsItemFieldTypesItem) GetType() string {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *AppDefinitionLocationsItemFieldTypesItem) GetLinkType() OptString {
	return s.LinkType
}

// GetItems returns the value of Items.
func (s *AppDefinitionLocationsItemFieldTypesItem) GetItems() OptAppDefinitionLocationsItemFieldTypesItemItems {
	return s.Items
}

// SetType sets the value of Type.
func (s *AppDefinitionLocationsItemFieldTypesItem) SetType(val string) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *AppDefinitionLocationsItemFieldTypesItem) SetLinkType(val OptString) {
	s.LinkType = val
}

// SetItems sets the value of Items.
func (s *AppDefinitionLocationsItemFieldTypesItem) SetItems(val OptAppDefinitionLocationsItemFieldTypesItemItems) {
	s.Items = val
}

type AppDefinitionLocationsItemFieldTypesItemItems struct {
	Type     string    `json:"type"`
	LinkType OptString `json:"linkType"`
}

// GetType returns the value of Type.
func (s *AppDefinitionLocationsItemFieldTypesItemItems) GetType() string {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *AppDefinitionLocationsItemFieldTypesItemItems) GetLinkType() OptString {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *AppDefinitionLocationsItemFieldTypesItemItems) SetType(val string) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *AppDefinitionLocationsItemFieldTypesItemItems) SetLinkType(val OptString) {
	s.LinkType = val
}

type AppDefinitionLocationsItemNavigationItem struct {
	Name string `json:"name"`
	Path string `json:"path"`
}

// GetName returns the value of Name.
func (s *AppDefinitionLocationsItemNavigationItem) GetName() string {
	return s.Name
}

// GetPath returns the value of Path.
func (s *AppDefinitionLocationsItemNavigationItem) GetPath() string {
	return s.Path
}

// SetName sets the value of Name.
func (s *AppDefinitionLocationsItemNavigationItem) SetName(val string) {
	s.Name = val
}

// SetPath sets the value of Path.
func (s *AppDefinitionLocationsItemNavigationItem) SetPath(val string) {
	s.Path = val
}

// Ref: #/components/schemas/AppDefinitionParameter
type AppDefinitionParameter struct {
	ID          string                          `json:"id"`
	Type        string                          `json:"type"`
	Name        string                          `json:"name"`
	Description OptString                       `json:"description"`
	Required    OptBool                         `json:"required"`
	Default     jx.Raw                          `json:"default"`
	Options     []jx.Raw                        `json:"options"`
	Labels      OptAppDefinitionParameterLabels `json:"labels"`
}

// GetID returns the value of ID.
func (s *AppDefinitionParameter) GetID() string {
	return s.ID
}

// GetType returns the value of Type.
func (s *AppDefinitionParameter) GetType() string {
	return s.Type
}

// GetName returns the value of Name.
func (s *AppDefinitionParameter) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *AppDefinitionParameter) GetDescription() OptString {
	return s.Description
}

// GetRequired returns the value of Required.
func (s *AppDefinitionParameter) GetRequired() OptBool {
	return s.Required
}

// GetDefault returns the value of Default.
func (s *AppDefinitionParameter) GetDefault() jx.Raw {
	return s.Default
}

// GetOptions returns the value of Options.
func (s *AppDefinitionParameter) GetOptions() []jx.Raw {
	return s.Options
}

// GetLabels returns the value of Labels.
func (s *AppDefinitionParameter) GetLabels() OptAppDefinitionParameterLabels {
	return s.Labels
}

// SetID sets the value of ID.
func (s *AppDefinitionParameter) SetID(val string) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *AppDefinitionParameter) SetType(val string) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *AppDefinitionParameter) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *AppDefinitionParameter) SetDescription(val OptString) {
	s.Description = val
}

// SetRequired sets the value of Required.
func (s *AppDefinitionParameter) SetRequired(val OptBool) {
	s.Required = val
}

// SetDefault sets the value of Default.
func (s *AppDefinitionParameter) SetDefault(val jx.Raw) {
	s.Default = val
}

// SetOptions sets the value of Options.
func (s *AppDefinitionParameter) SetOptions(val []jx.Raw) {
	s.Options = val
}

// SetLabels sets the value of Labels.
func (s *AppDefinitionParameter) SetLabels(val OptAppDefinitionParameterLabels) {
	s.Labels = val
}

type AppDefinitionParameterLabels struct {
	Empty OptString `json:"empty"`
	True  OptString `json:"true"`
	False OptString `json:"false"`
}

// GetEmpty returns the value of Empty.
func (s *AppDefinitionParameterLabels) GetEmpty() OptString {
	return s.Empty
}

// GetTrue returns the value of True.
func (s *AppDefinitionParameterLabels) GetTrue() OptString {
	return s.True
}

// GetFalse returns the value of False.
func (s *AppDefinitionParameterLabels) GetFalse() OptString {
	return s.False
}

// SetEmpty sets the value of Empty.
func (s *AppDefinitionParameterLabels) SetEmpty(val OptString) {
	s.Empty = val
}

// SetTrue sets the value of True.
func (s *AppDefinitionParameterLabels) SetTrue(val OptString) {
	s.True = val
}

// SetFalse sets the value of False.
func (s *AppDefinitionParameterLabels) SetFalse(val OptString) {
	s.False = val
}

// Ref: #/components/schemas/AppDefinitionParameters
type AppDefinitionParameters struct {
	Installation []AppDefinitionParameter `json:"installation"`
	Instance     []AppDefinitionParameter `json:"instance"`
}

// GetInstallation returns the value of Installation.
func (s *AppDefinitionParameters) GetInstallation() []AppDefinitionParameter {
	return s.Installation
}

// GetInstance returns the value of Instance.
func (s *AppDefinitionParameters) GetInstance() []AppDefinitionParameter {
	return s.Instance
}

// SetInstallation sets the value of Installation.
func (s *AppDefinitionParameters) SetInstallation(val []AppDefinitionParameter) {
	s.Installation = val
}

// SetInstance sets the value of Instance.
func (s *AppDefinitionParameters) SetInstance(val []AppDefinitionParameter) {
	s.Instance = val
}

// AppDefinitionStatusCode wraps AppDefinition with StatusCode.
type AppDefinitionStatusCode struct {
	StatusCode int
	Response   AppDefinition
}

// GetStatusCode returns the value of StatusCode.
func (s *AppDefinitionStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *AppDefinitionStatusCode) GetResponse() AppDefinition {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *AppDefinitionStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *AppDefinitionStatusCode) SetResponse(val AppDefinition) {
	s.Response = val
}

func (*AppDefinitionStatusCode) createAppDefinitionRes() {}
func (*AppDefinitionStatusCode) putAppDefinitionRes()    {}

// Merged schema.
// Ref: #/components/schemas/AppDefinitionSys
type AppDefinitionSys struct {
	// Merged property.
	Type         AppDefinitionSysType `json:"type"`
	Organization OrganizationLink     `json:"organization"`
	ID           string               `json:"id"`
}

// GetType returns the value of Type.
func (s *AppDefinitionSys) GetType() AppDefinitionSysType {
	return s.Type
}

// GetOrganization returns the value of Organization.
func (s *AppDefinitionSys) GetOrganization() OrganizationLink {
	return s.Organization
}

// GetID returns the value of ID.
func (s *AppDefinitionSys) GetID() string {
	return s.ID
}

// SetType sets the value of Type.
func (s *AppDefinitionSys) SetType(val AppDefinitionSysType) {
	s.Type = val
}

// SetOrganization sets the value of Organization.
func (s *AppDefinitionSys) SetOrganization(val OrganizationLink) {
	s.Organization = val
}

// SetID sets the value of ID.
func (s *AppDefinitionSys) SetID(val string) {
	s.ID = val
}

// Merged schema.
type AppDefinitionSysType string

const (
	AppDefinitionSysTypeAppDefinition AppDefinitionSysType = "AppDefinition"
)

// AllValues returns all AppDefinitionSysType values.
func (AppDefinitionSysType) AllValues() []AppDefinitionSysType {
	return []AppDefinitionSysType{
		AppDefinitionSysTypeAppDefinition,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppDefinitionSysType) MarshalText() ([]byte, error) {
	switch s {
	case AppDefinitionSysTypeAppDefinition:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppDefinitionSysType) UnmarshalText(data []byte) error {
	switch AppDefinitionSysType(data) {
	case AppDefinitionSysTypeAppDefinition:
		*s = AppDefinitionSysTypeAppDefinition
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/AppInstallation
type AppInstallation struct {
	Sys        AppInstallationSys `json:"sys"`
	Parameters jx.Raw             `json:"parameters"`
}

// GetSys returns the value of Sys.
func (s *AppInstallation) GetSys() AppInstallationSys {
	return s.Sys
}

// GetParameters returns the value of Parameters.
func (s *AppInstallation) GetParameters() jx.Raw {
	return s.Parameters
}

// SetSys sets the value of Sys.
func (s *AppInstallation) SetSys(val AppInstallationSys) {
	s.Sys = val
}

// SetParameters sets the value of Parameters.
func (s *AppInstallation) SetParameters(val jx.Raw) {
	s.Parameters = val
}

func (*AppInstallation) getAppInstallationRes() {}

// Ref: #/components/schemas/AppInstallationFields
type AppInstallationFields struct {
	Parameters jx.Raw `json:"parameters"`
}

// GetParameters returns the value of Parameters.
func (s *AppInstallationFields) GetParameters() jx.Raw {
	return s.Parameters
}

// SetParameters sets the value of Parameters.
func (s *AppInstallationFields) SetParameters(val jx.Raw) {
	s.Parameters = val
}

// AppInstallationStatusCode wraps AppInstallation with StatusCode.
type AppInstallationStatusCode struct {
	StatusCode int
	Response   AppInstallation
}

// GetStatusCode returns the value of StatusCode.
func (s *AppInstallationStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *AppInstallationStatusCode) GetResponse() AppInstallation {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *AppInstallationStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *AppInstallationStatusCode) SetResponse(val AppInstallation) {
	s.Response = val
}

func (*AppInstallationStatusCode) putAppInstallationRes() {}

// Merged schema.
// Ref: #/components/schemas/AppInstallationSys
type AppInstallationSys struct {
	// Merged property.
	Type          AppInstallationSysType `json:"type"`
	Space         SpaceLink              `json:"space"`
	Environment   EnvironmentLink        `json:"environment"`
	AppDefinition AppDefinitionLink      `json:"appDefinition"`
}

// GetType returns the value of Type.
func (s *AppInstallationSys) GetType() AppInstallationSysType {
	return s.Type
}

// GetSpace returns the value of Space.
func (s *AppInstallationSys) GetSpace() SpaceLink {
	return s.Space
}

// GetEnvironment returns the value of Environment.
func (s *AppInstallationSys) GetEnvironment() EnvironmentLink {
	return s.Environment
}

// GetAppDefinition returns the value of AppDefinition.
func (s *AppInstallationSys) GetAppDefinition() AppDefinitionLink {
	return s.AppDefinition
}

// SetType sets the value of Type.
func (s *AppInstallationSys) SetType(val AppInstallationSysType) {
	s.Type = val
}

// SetSpace sets the value of Space.
func (s *AppInstallationSys) SetSpace(val SpaceLink) {
	s.Space = val
}

// SetEnvironment sets the value of Environment.
func (s *AppInstallationSys) SetEnvironment(val EnvironmentLink) {
	s.Environment = val
}

// SetAppDefinition sets the value of AppDefinition.
func (s *AppInstallationSys) SetAppDefinition(val AppDefinitionLink) {
	s.AppDefinition = val
}

// Merged schema.
type AppInstallationSysType string

const (
	AppInstallationSysTypeAppInstallation AppInstallationSysType = "AppInstallation"
)

// AllValues returns all AppInstallationSysType values.
func (AppInstallationSysType) AllValues() []AppInstallationSysType {
	return []AppInstallationSysType{
		AppInstallationSysTypeAppInstallation,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppInstallationSysType) MarshalText() ([]byte, error) {
	switch s {
	case AppInstallationSysTypeAppInstallation:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppInstallationSysType) UnmarshalText(data []byte) error {
	switch AppInstallationSysType(data) {
	case AppInstallationSysTypeAppInstallation:
		*s = AppInstallationSysTypeAppInstallation
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/ContentType
type ContentType struct {
	Sys  ContentTypeSys `json:"sys"`
	Name string         `json:"name"`
	// Merged property.
	Description OptNilString `json:"description"`
	// Merged property.
	DisplayField NilString               `json:"displayField"`
	Fields       []ContentTypeFieldsItem `json:"fields"`
	Metadata     OptContentTypeMetadata  `json:"metadata"`
}

// GetSys returns the value of Sys.
func (s *ContentType) GetSys() ContentTypeSys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *ContentType) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ContentType) GetDescription() OptNilString {
	return s.Description
}

// GetDisplayField returns the value of DisplayField.
func (s *ContentType) GetDisplayField() NilString {
	return s.DisplayField
}

// GetFields returns the value of Fields.
func (s *ContentType) GetFields() []ContentTypeFieldsItem {
	return s.Fields
}

// GetMetadata returns the value of Metadata.
func (s *ContentType) GetMetadata() OptContentTypeMetadata {
	return s.Metadata
}

// SetSys sets the value of Sys.
func (s *ContentType) SetSys(val ContentTypeSys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *ContentType) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ContentType) SetDescription(val OptNilString) {
	s.Description = val
}

// SetDisplayField sets the value of DisplayField.
func (s *ContentType) SetDisplayField(val NilString) {
	s.DisplayField = val
}

// SetFields sets the value of Fields.
func (s *ContentType) SetFields(val []ContentTypeFieldsItem) {
	s.Fields = val
}

// SetMetadata sets the value of Metadata.
func (s *ContentType) SetMetadata(val OptContentTypeMetadata) {
	s.Metadata = val
}

func (*ContentType) deactivateContentTypeRes() {}
func (*ContentType) getContentTypeRes()        {}

type ContentTypeFieldsItem struct {
	ID               string                        `json:"id"`
	Name             string                        `json:"name"`
	Type             string                        `json:"type"`
	LinkType         OptString                     `json:"linkType"`
	Items            OptContentTypeFieldsItemItems `json:"items"`
	Localized        OptBool                       `json:"localized"`
	Omitted          OptBool                       `json:"omitted"`
	Required         OptBool                       `json:"required"`
	Disabled         OptBool                       `json:"disabled"`
	DefaultValue     jx.Raw                        `json:"defaultValue"`
	Validations      []jx.Raw                      `json:"validations"`
	AllowedResources OptNilResourceLinkArray       `json:"allowedResources"`
}

// GetID returns the value of ID.
func (s *ContentTypeFieldsItem) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *ContentTypeFieldsItem) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *ContentTypeFieldsItem) GetType() string {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *ContentTypeFieldsItem) GetLinkType() OptString {
	return s.LinkType
}

// GetItems returns the value of Items.
func (s *ContentTypeFieldsItem) GetItems() OptContentTypeFieldsItemItems {
	return s.Items
}

// GetLocalized returns the value of Localized.
func (s *ContentTypeFieldsItem) GetLocalized() OptBool {
	return s.Localized
}

// GetOmitted returns the value of Omitted.
func (s *ContentTypeFieldsItem) GetOmitted() OptBool {
	return s.Omitted
}

// GetRequired returns the value of Required.
func (s *ContentTypeFieldsItem) GetRequired() OptBool {
	return s.Required
}

// GetDisabled returns the value of Disabled.
func (s *ContentTypeFieldsItem) GetDisabled() OptBool {
	return s.Disabled
}

// GetDefaultValue returns the value of DefaultValue.
func (s *ContentTypeFieldsItem) GetDefaultValue() jx.Raw {
	return s.DefaultValue
}

// GetValidations returns the value of Validations.
func (s *ContentTypeFieldsItem) GetValidations() []jx.Raw {
	return s.Validations
}

// GetAllowedResources returns the value of AllowedResources.
func (s *ContentTypeFieldsItem) GetAllowedResources() OptNilResourceLinkArray {
	return s.AllowedResources
}

// SetID sets the value of ID.
func (s *ContentTypeFieldsItem) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ContentTypeFieldsItem) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *ContentTypeFieldsItem) SetType(val string) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *ContentTypeFieldsItem) SetLinkType(val OptString) {
	s.LinkType = val
}

// SetItems sets the value of Items.
func (s *ContentTypeFieldsItem) SetItems(val OptContentTypeFieldsItemItems) {
	s.Items = val
}

// SetLocalized sets the value of Localized.
func (s *ContentTypeFieldsItem) SetLocalized(val OptBool) {
	s.Localized = val
}

// SetOmitted sets the value of Omitted.
func (s *ContentTypeFieldsItem) SetOmitted(val OptBool) {
	s.Omitted = val
}

// SetRequired sets the value of Required.
func (s *ContentTypeFieldsItem) SetRequired(val OptBool) {
	s.Required = val
}

// SetDisabled sets the value of Disabled.
func (s *ContentTypeFieldsItem) SetDisabled(val OptBool) {
	s.Disabled = val
}

// SetDefaultValue sets the value of DefaultValue.
func (s *ContentTypeFieldsItem) SetDefaultValue(val jx.Raw) {
	s.DefaultValue = val
}

// SetValidations sets the value of Validations.
func (s *ContentTypeFieldsItem) SetValidations(val []jx.Raw) {
	s.Validations = val
}

// SetAllowedResources sets the value of AllowedResources.
func (s *ContentTypeFieldsItem) SetAllowedResources(val OptNilResourceLinkArray) {
	s.AllowedResources = val
}

type ContentTypeFieldsItemItems struct {
	Type        OptString `json:"type"`
	LinkType    OptString `json:"linkType"`
	Validations []jx.Raw  `json:"validations"`
}

// GetType returns the value of Type.
func (s *ContentTypeFieldsItemItems) GetType() OptString {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *ContentTypeFieldsItemItems) GetLinkType() OptString {
	return s.LinkType
}

// GetValidations returns the value of Validations.
func (s *ContentTypeFieldsItemItems) GetValidations() []jx.Raw {
	return s.Validations
}

// SetType sets the value of Type.
func (s *ContentTypeFieldsItemItems) SetType(val OptString) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *ContentTypeFieldsItemItems) SetLinkType(val OptString) {
	s.LinkType = val
}

// SetValidations sets the value of Validations.
func (s *ContentTypeFieldsItemItems) SetValidations(val []jx.Raw) {
	s.Validations = val
}

// Ref: #/components/schemas/ContentTypeLink
type ContentTypeLink struct {
	Sys ContentTypeLinkSys `json:"sys"`
}

// GetSys returns the value of Sys.
func (s *ContentTypeLink) GetSys() ContentTypeLinkSys {
	return s.Sys
}

// SetSys sets the value of Sys.
func (s *ContentTypeLink) SetSys(val ContentTypeLinkSys) {
	s.Sys = val
}

// Merged schema.
type ContentTypeLinkSys struct {
	// Merged property.
	Type ContentTypeLinkSysType `json:"type"`
	ID   string                 `json:"id"`
	// Merged property.
	LinkType ContentTypeLinkSysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *ContentTypeLinkSys) GetType() ContentTypeLinkSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *ContentTypeLinkSys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *ContentTypeLinkSys) GetLinkType() ContentTypeLinkSysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *ContentTypeLinkSys) SetType(val ContentTypeLinkSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ContentTypeLinkSys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *ContentTypeLinkSys) SetLinkType(val ContentTypeLinkSysLinkType) {
	s.LinkType = val
}

// Merged schema.
type ContentTypeLinkSysLinkType string

const (
	ContentTypeLinkSysLinkTypeContentType ContentTypeLinkSysLinkType = "ContentType"
)

// AllValues returns all ContentTypeLinkSysLinkType values.
func (ContentTypeLinkSysLinkType) AllValues() []ContentTypeLinkSysLinkType {
	return []ContentTypeLinkSysLinkType{
		ContentTypeLinkSysLinkTypeContentType,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContentTypeLinkSysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case ContentTypeLinkSysLinkTypeContentType:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContentTypeLinkSysLinkType) UnmarshalText(data []byte) error {
	switch ContentTypeLinkSysLinkType(data) {
	case ContentTypeLinkSysLinkTypeContentType:
		*s = ContentTypeLinkSysLinkTypeContentType
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type ContentTypeLinkSysType string

const (
	ContentTypeLinkSysTypeLink ContentTypeLinkSysType = "Link"
)

// AllValues returns all ContentTypeLinkSysType values.
func (ContentTypeLinkSysType) AllValues() []ContentTypeLinkSysType {
	return []ContentTypeLinkSysType{
		ContentTypeLinkSysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContentTypeLinkSysType) MarshalText() ([]byte, error) {
	switch s {
	case ContentTypeLinkSysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContentTypeLinkSysType) UnmarshalText(data []byte) error {
	switch ContentTypeLinkSysType(data) {
	case ContentTypeLinkSysTypeLink:
		*s = ContentTypeLinkSysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ContentTypeMetadata
type ContentTypeMetadata struct {
	Annotations jx.Raw                            `json:"annotations"`
	Taxonomy    []ContentTypeMetadataTaxonomyItem `json:"taxonomy"`
}

// GetAnnotations returns the value of Annotations.
func (s *ContentTypeMetadata) GetAnnotations() jx.Raw {
	return s.Annotations
}

// GetTaxonomy returns the value of Taxonomy.
func (s *ContentTypeMetadata) GetTaxonomy() []ContentTypeMetadataTaxonomyItem {
	return s.Taxonomy
}

// SetAnnotations sets the value of Annotations.
func (s *ContentTypeMetadata) SetAnnotations(val jx.Raw) {
	s.Annotations = val
}

// SetTaxonomy sets the value of Taxonomy.
func (s *ContentTypeMetadata) SetTaxonomy(val []ContentTypeMetadataTaxonomyItem) {
	s.Taxonomy = val
}

// Ref: #/components/schemas/ContentTypeMetadataTaxonomyItem
type ContentTypeMetadataTaxonomyItem struct {
	Sys      ContentTypeMetadataTaxonomyItemSys `json:"sys"`
	Required OptBool                            `json:"required"`
}

// GetSys returns the value of Sys.
func (s *ContentTypeMetadataTaxonomyItem) GetSys() ContentTypeMetadataTaxonomyItemSys {
	return s.Sys
}

// GetRequired returns the value of Required.
func (s *ContentTypeMetadataTaxonomyItem) GetRequired() OptBool {
	return s.Required
}

// SetSys sets the value of Sys.
func (s *ContentTypeMetadataTaxonomyItem) SetSys(val ContentTypeMetadataTaxonomyItemSys) {
	s.Sys = val
}

// SetRequired sets the value of Required.
func (s *ContentTypeMetadataTaxonomyItem) SetRequired(val OptBool) {
	s.Required = val
}

// Merged schema.
type ContentTypeMetadataTaxonomyItemSys struct {
	// Merged property.
	Type ContentTypeMetadataTaxonomyItemSysType `json:"type"`
	ID   string                                 `json:"id"`
	// Merged property.
	LinkType ContentTypeMetadataTaxonomyItemSysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *ContentTypeMetadataTaxonomyItemSys) GetType() ContentTypeMetadataTaxonomyItemSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *ContentTypeMetadataTaxonomyItemSys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *ContentTypeMetadataTaxonomyItemSys) GetLinkType() ContentTypeMetadataTaxonomyItemSysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *ContentTypeMetadataTaxonomyItemSys) SetType(val ContentTypeMetadataTaxonomyItemSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ContentTypeMetadataTaxonomyItemSys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *ContentTypeMetadataTaxonomyItemSys) SetLinkType(val ContentTypeMetadataTaxonomyItemSysLinkType) {
	s.LinkType = val
}

// Merged schema.
type ContentTypeMetadataTaxonomyItemSysLinkType string

const (
	ContentTypeMetadataTaxonomyItemSysLinkTypeTaxonomyConcept       ContentTypeMetadataTaxonomyItemSysLinkType = "TaxonomyConcept"
	ContentTypeMetadataTaxonomyItemSysLinkTypeTaxonomyConceptScheme ContentTypeMetadataTaxonomyItemSysLinkType = "TaxonomyConceptScheme"
)

// AllValues returns all ContentTypeMetadataTaxonomyItemSysLinkType values.
func (ContentTypeMetadataTaxonomyItemSysLinkType) AllValues() []ContentTypeMetadataTaxonomyItemSysLinkType {
	return []ContentTypeMetadataTaxonomyItemSysLinkType{
		ContentTypeMetadataTaxonomyItemSysLinkTypeTaxonomyConcept,
		ContentTypeMetadataTaxonomyItemSysLinkTypeTaxonomyConceptScheme,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContentTypeMetadataTaxonomyItemSysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case ContentTypeMetadataTaxonomyItemSysLinkTypeTaxonomyConcept:
		return []byte(s), nil
	case ContentTypeMetadataTaxonomyItemSysLinkTypeTaxonomyConceptScheme:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContentTypeMetadataTaxonomyItemSysLinkType) UnmarshalText(data []byte) error {
	switch ContentTypeMetadataTaxonomyItemSysLinkType(data) {
	case ContentTypeMetadataTaxonomyItemSysLinkTypeTaxonomyConcept:
		*s = ContentTypeMetadataTaxonomyItemSysLinkTypeTaxonomyConcept
		return nil
	case ContentTypeMetadataTaxonomyItemSysLinkTypeTaxonomyConceptScheme:
		*s = ContentTypeMetadataTaxonomyItemSysLinkTypeTaxonomyConceptScheme
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type ContentTypeMetadataTaxonomyItemSysType string

const (
	ContentTypeMetadataTaxonomyItemSysTypeLink ContentTypeMetadataTaxonomyItemSysType = "Link"
)

// AllValues returns all ContentTypeMetadataTaxonomyItemSysType values.
func (ContentTypeMetadataTaxonomyItemSysType) AllValues() []ContentTypeMetadataTaxonomyItemSysType {
	return []ContentTypeMetadataTaxonomyItemSysType{
		ContentTypeMetadataTaxonomyItemSysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContentTypeMetadataTaxonomyItemSysType) MarshalText() ([]byte, error) {
	switch s {
	case ContentTypeMetadataTaxonomyItemSysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContentTypeMetadataTaxonomyItemSysType) UnmarshalText(data []byte) error {
	switch ContentTypeMetadataTaxonomyItemSysType(data) {
	case ContentTypeMetadataTaxonomyItemSysTypeLink:
		*s = ContentTypeMetadataTaxonomyItemSysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ContentTypeRequestFields
type ContentTypeRequestFields struct {
	Name         string                               `json:"name"`
	Description  OptNilString                         `json:"description"`
	DisplayField string                               `json:"displayField"`
	Fields       []ContentTypeRequestFieldsFieldsItem `json:"fields"`
	Metadata     OptContentTypeMetadata               `json:"metadata"`
}

// GetName returns the value of Name.
func (s *ContentTypeRequestFields) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ContentTypeRequestFields) GetDescription() OptNilString {
	return s.Description
}

// GetDisplayField returns the value of DisplayField.
func (s *ContentTypeRequestFields) GetDisplayField() string {
	return s.DisplayField
}

// GetFields returns the value of Fields.
func (s *ContentTypeRequestFields) GetFields() []ContentTypeRequestFieldsFieldsItem {
	return s.Fields
}

// GetMetadata returns the value of Metadata.
func (s *ContentTypeRequestFields) GetMetadata() OptContentTypeMetadata {
	return s.Metadata
}

// SetName sets the value of Name.
func (s *ContentTypeRequestFields) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ContentTypeRequestFields) SetDescription(val OptNilString) {
	s.Description = val
}

// SetDisplayField sets the value of DisplayField.
func (s *ContentTypeRequestFields) SetDisplayField(val string) {
	s.DisplayField = val
}

// SetFields sets the value of Fields.
func (s *ContentTypeRequestFields) SetFields(val []ContentTypeRequestFieldsFieldsItem) {
	s.Fields = val
}

// SetMetadata sets the value of Metadata.
func (s *ContentTypeRequestFields) SetMetadata(val OptContentTypeMetadata) {
	s.Metadata = val
}

type ContentTypeRequestFieldsFieldsItem struct {
	ID               string                                     `json:"id"`
	Name             string                                     `json:"name"`
	Type             string                                     `json:"type"`
	LinkType         OptString                                  `json:"linkType"`
	Items            OptContentTypeRequestFieldsFieldsItemItems `json:"items"`
	Localized        OptBool                                    `json:"localized"`
	Omitted          OptBool                                    `json:"omitted"`
	Required         OptBool                                    `json:"required"`
	Disabled         OptBool                                    `json:"disabled"`
	DefaultValue     jx.Raw                                     `json:"defaultValue"`
	Validations      []jx.Raw                                   `json:"validations"`
	AllowedResources OptNilResourceLinkArray                    `json:"allowedResources"`
}

// GetID returns the value of ID.
func (s *ContentTypeRequestFieldsFieldsItem) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *ContentTypeRequestFieldsFieldsItem) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *ContentTypeRequestFieldsFieldsItem) GetType() string {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *ContentTypeRequestFieldsFieldsItem) GetLinkType() OptString {
	return s.LinkType
}

// GetItems returns the value of Items.
func (s *ContentTypeRequestFieldsFieldsItem) GetItems() OptContentTypeRequestFieldsFieldsItemItems {
	return s.Items
}

// GetLocalized returns the value of Localized.
func (s *ContentTypeRequestFieldsFieldsItem) GetLocalized() OptBool {
	return s.Localized
}

// GetOmitted returns the value of Omitted.
func (s *ContentTypeRequestFieldsFieldsItem) GetOmitted() OptBool {
	return s.Omitted
}

// GetRequired returns the value of Required.
func (s *ContentTypeRequestFieldsFieldsItem) GetRequired() OptBool {
	return s.Required
}

// GetDisabled returns the value of Disabled.
func (s *ContentTypeRequestFieldsFieldsItem) GetDisabled() OptBool {
	return s.Disabled
}

// GetDefaultValue returns the value of DefaultValue.
func (s *ContentTypeRequestFieldsFieldsItem) GetDefaultValue() jx.Raw {
	return s.DefaultValue
}

// GetValidations returns the value of Validations.
func (s *ContentTypeRequestFieldsFieldsItem) GetValidations() []jx.Raw {
	return s.Validations
}

// GetAllowedResources returns the value of AllowedResources.
func (s *ContentTypeRequestFieldsFieldsItem) GetAllowedResources() OptNilResourceLinkArray {
	return s.AllowedResources
}

// SetID sets the value of ID.
func (s *ContentTypeRequestFieldsFieldsItem) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ContentTypeRequestFieldsFieldsItem) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *ContentTypeRequestFieldsFieldsItem) SetType(val string) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *ContentTypeRequestFieldsFieldsItem) SetLinkType(val OptString) {
	s.LinkType = val
}

// SetItems sets the value of Items.
func (s *ContentTypeRequestFieldsFieldsItem) SetItems(val OptContentTypeRequestFieldsFieldsItemItems) {
	s.Items = val
}

// SetLocalized sets the value of Localized.
func (s *ContentTypeRequestFieldsFieldsItem) SetLocalized(val OptBool) {
	s.Localized = val
}

// SetOmitted sets the value of Omitted.
func (s *ContentTypeRequestFieldsFieldsItem) SetOmitted(val OptBool) {
	s.Omitted = val
}

// SetRequired sets the value of Required.
func (s *ContentTypeRequestFieldsFieldsItem) SetRequired(val OptBool) {
	s.Required = val
}

// SetDisabled sets the value of Disabled.
func (s *ContentTypeRequestFieldsFieldsItem) SetDisabled(val OptBool) {
	s.Disabled = val
}

// SetDefaultValue sets the value of DefaultValue.
func (s *ContentTypeRequestFieldsFieldsItem) SetDefaultValue(val jx.Raw) {
	s.DefaultValue = val
}

// SetValidations sets the value of Validations.
func (s *ContentTypeRequestFieldsFieldsItem) SetValidations(val []jx.Raw) {
	s.Validations = val
}

// SetAllowedResources sets the value of AllowedResources.
func (s *ContentTypeRequestFieldsFieldsItem) SetAllowedResources(val OptNilResourceLinkArray) {
	s.AllowedResources = val
}

type ContentTypeRequestFieldsFieldsItemItems struct {
	Type        OptString `json:"type"`
	LinkType    OptString `json:"linkType"`
	Validations []jx.Raw  `json:"validations"`
}

// GetType returns the value of Type.
func (s *ContentTypeRequestFieldsFieldsItemItems) GetType() OptString {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *ContentTypeRequestFieldsFieldsItemItems) GetLinkType() OptString {
	return s.LinkType
}

// GetValidations returns the value of Validations.
func (s *ContentTypeRequestFieldsFieldsItemItems) GetValidations() []jx.Raw {
	return s.Validations
}

// SetType sets the value of Type.
func (s *ContentTypeRequestFieldsFieldsItemItems) SetType(val OptString) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *ContentTypeRequestFieldsFieldsItemItems) SetLinkType(val OptString) {
	s.LinkType = val
}

// SetValidations sets the value of Validations.
func (s *ContentTypeRequestFieldsFieldsItemItems) SetValidations(val []jx.Raw) {
	s.Validations = val
}

// ContentTypeStatusCode wraps ContentType with StatusCode.
type ContentTypeStatusCode struct {
	StatusCode int
	Response   ContentType
}

// GetStatusCode returns the value of StatusCode.
func (s *ContentTypeStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ContentTypeStatusCode) GetResponse() ContentType {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ContentTypeStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ContentTypeStatusCode) SetResponse(val ContentType) {
	s.Response = val
}

func (*ContentTypeStatusCode) activateContentTypeRes() {}
func (*ContentTypeStatusCode) putContentTypeRes()      {}

// Merged schema.
// Ref: #/components/schemas/ContentTypeSys
type ContentTypeSys struct {
	// Merged property.
	Type             ContentTypeSysType `json:"type"`
	Space            SpaceLink          `json:"space"`
	Environment      EnvironmentLink    `json:"environment"`
	ID               string             `json:"id"`
	Version          int                `json:"version"`
	CreatedAt        OptDateTime        `json:"createdAt"`
	UpdatedAt        OptDateTime        `json:"updatedAt"`
	PublishedVersion OptInt             `json:"publishedVersion"`
	PublishedAt      OptDateTime        `json:"publishedAt"`
}

// GetType returns the value of Type.
func (s *ContentTypeSys) GetType() ContentTypeSysType {
	return s.Type
}

// GetSpace returns the value of Space.
func (s *ContentTypeSys) GetSpace() SpaceLink {
	return s.Space
}

// GetEnvironment returns the value of Environment.
func (s *ContentTypeSys) GetEnvironment() EnvironmentLink {
	return s.Environment
}

// GetID returns the value of ID.
func (s *ContentTypeSys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *ContentTypeSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ContentTypeSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ContentTypeSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetPublishedVersion returns the value of PublishedVersion.
func (s *ContentTypeSys) GetPublishedVersion() OptInt {
	return s.PublishedVersion
}

// GetPublishedAt returns the value of PublishedAt.
func (s *ContentTypeSys) GetPublishedAt() OptDateTime {
	return s.PublishedAt
}

// SetType sets the value of Type.
func (s *ContentTypeSys) SetType(val ContentTypeSysType) {
	s.Type = val
}

// SetSpace sets the value of Space.
func (s *ContentTypeSys) SetSpace(val SpaceLink) {
	s.Space = val
}

// SetEnvironment sets the value of Environment.
func (s *ContentTypeSys) SetEnvironment(val EnvironmentLink) {
	s.Environment = val
}

// SetID sets the value of ID.
func (s *ContentTypeSys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *ContentTypeSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ContentTypeSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ContentTypeSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetPublishedVersion sets the value of PublishedVersion.
func (s *ContentTypeSys) SetPublishedVersion(val OptInt) {
	s.PublishedVersion = val
}

// SetPublishedAt sets the value of PublishedAt.
func (s *ContentTypeSys) SetPublishedAt(val OptDateTime) {
	s.PublishedAt = val
}

// Merged schema.
type ContentTypeSysType string

const (
	ContentTypeSysTypeContentType ContentTypeSysType = "ContentType"
)

// AllValues returns all ContentTypeSysType values.
func (ContentTypeSysType) AllValues() []ContentTypeSysType {
	return []ContentTypeSysType{
		ContentTypeSysTypeContentType,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContentTypeSysType) MarshalText() ([]byte, error) {
	switch s {
	case ContentTypeSysTypeContentType:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContentTypeSysType) UnmarshalText(data []byte) error {
	switch ContentTypeSysType(data) {
	case ContentTypeSysTypeContentType:
		*s = ContentTypeSysTypeContentType
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ContentfulEntryResourceLink
type ContentfulEntryResourceLink struct {
	Type         ContentfulEntryResourceLinkType `json:"type"`
	Source       string                          `json:"source"`
	ContentTypes []string                        `json:"contentTypes"`
}

// GetType returns the value of Type.
func (s *ContentfulEntryResourceLink) GetType() ContentfulEntryResourceLinkType {
	return s.Type
}

// GetSource returns the value of Source.
func (s *ContentfulEntryResourceLink) GetSource() string {
	return s.Source
}

// GetContentTypes returns the value of ContentTypes.
func (s *ContentfulEntryResourceLink) GetContentTypes() []string {
	return s.ContentTypes
}

// SetType sets the value of Type.
func (s *ContentfulEntryResourceLink) SetType(val ContentfulEntryResourceLinkType) {
	s.Type = val
}

// SetSource sets the value of Source.
func (s *ContentfulEntryResourceLink) SetSource(val string) {
	s.Source = val
}

// SetContentTypes sets the value of ContentTypes.
func (s *ContentfulEntryResourceLink) SetContentTypes(val []string) {
	s.ContentTypes = val
}

type ContentfulEntryResourceLinkType string

const (
	ContentfulEntryResourceLinkTypeContentfulEntry ContentfulEntryResourceLinkType = "Contentful:Entry"
)

// AllValues returns all ContentfulEntryResourceLinkType values.
func (ContentfulEntryResourceLinkType) AllValues() []ContentfulEntryResourceLinkType {
	return []ContentfulEntryResourceLinkType{
		ContentfulEntryResourceLinkTypeContentfulEntry,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContentfulEntryResourceLinkType) MarshalText() ([]byte, error) {
	switch s {
	case ContentfulEntryResourceLinkTypeContentfulEntry:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContentfulEntryResourceLinkType) UnmarshalText(data []byte) error {
	switch ContentfulEntryResourceLinkType(data) {
	case ContentfulEntryResourceLinkTypeContentfulEntry:
		*s = ContentfulEntryResourceLinkTypeContentfulEntry
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateAppDefinitionApplicationJSONUnauthorized Error

func (*CreateAppDefinitionApplicationJSONUnauthorized) createAppDefinitionRes() {}

type CreateAppDefinitionApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*CreateAppDefinitionApplicationVndContentfulManagementV1JSONUnauthorized) createAppDefinitionRes() {
}

type CreateDeliveryApiKeyApplicationJSONUnauthorized Error

func (*CreateDeliveryApiKeyApplicationJSONUnauthorized) createDeliveryApiKeyRes() {}

type CreateDeliveryApiKeyApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*CreateDeliveryApiKeyApplicationVndContentfulManagementV1JSONUnauthorized) createDeliveryApiKeyRes() {
}

type CreatePersonalAccessTokenApplicationJSONUnauthorized Error

func (*CreatePersonalAccessTokenApplicationJSONUnauthorized) createPersonalAccessTokenRes() {}

type CreatePersonalAccessTokenApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*CreatePersonalAccessTokenApplicationVndContentfulManagementV1JSONUnauthorized) createPersonalAccessTokenRes() {
}

type CreateRoleApplicationJSONUnauthorized Error

func (*CreateRoleApplicationJSONUnauthorized) createRoleRes() {}

type CreateRoleApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*CreateRoleApplicationVndContentfulManagementV1JSONUnauthorized) createRoleRes() {}

type CreateWebhookDefinitionApplicationJSONUnauthorized Error

func (*CreateWebhookDefinitionApplicationJSONUnauthorized) createWebhookDefinitionRes() {}

type CreateWebhookDefinitionApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*CreateWebhookDefinitionApplicationVndContentfulManagementV1JSONUnauthorized) createWebhookDefinitionRes() {
}

type DeactivateContentTypeApplicationJSONUnauthorized Error

func (*DeactivateContentTypeApplicationJSONUnauthorized) deactivateContentTypeRes() {}

type DeactivateContentTypeApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*DeactivateContentTypeApplicationVndContentfulManagementV1JSONUnauthorized) deactivateContentTypeRes() {
}

type DeleteAppDefinitionApplicationJSONUnauthorized Error

func (*DeleteAppDefinitionApplicationJSONUnauthorized) deleteAppDefinitionRes() {}

type DeleteAppDefinitionApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*DeleteAppDefinitionApplicationVndContentfulManagementV1JSONUnauthorized) deleteAppDefinitionRes() {
}

type DeleteAppDefinitionResourceProviderApplicationJSONUnauthorized Error

func (*DeleteAppDefinitionResourceProviderApplicationJSONUnauthorized) deleteAppDefinitionResourceProviderRes() {
}

type DeleteAppDefinitionResourceProviderApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*DeleteAppDefinitionResourceProviderApplicationVndContentfulManagementV1JSONUnauthorized) deleteAppDefinitionResourceProviderRes() {
}

type DeleteAppDefinitionResourceTypeApplicationJSONUnauthorized Error

func (*DeleteAppDefinitionResourceTypeApplicationJSONUnauthorized) deleteAppDefinitionResourceTypeRes() {
}

type DeleteAppDefinitionResourceTypeApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*DeleteAppDefinitionResourceTypeApplicationVndContentfulManagementV1JSONUnauthorized) deleteAppDefinitionResourceTypeRes() {
}

type DeleteAppInstallationApplicationJSONUnauthorized Error

func (*DeleteAppInstallationApplicationJSONUnauthorized) deleteAppInstallationRes() {}

type DeleteAppInstallationApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*DeleteAppInstallationApplicationVndContentfulManagementV1JSONUnauthorized) deleteAppInstallationRes() {
}

type DeleteContentTypeApplicationJSONUnauthorized Error

func (*DeleteContentTypeApplicationJSONUnauthorized) deleteContentTypeRes() {}

type DeleteContentTypeApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*DeleteContentTypeApplicationVndContentfulManagementV1JSONUnauthorized) deleteContentTypeRes() {
}

type DeleteDeliveryApiKeyApplicationJSONUnauthorized Error

func (*DeleteDeliveryApiKeyApplicationJSONUnauthorized) deleteDeliveryApiKeyRes() {}

type DeleteDeliveryApiKeyApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*DeleteDeliveryApiKeyApplicationVndContentfulManagementV1JSONUnauthorized) deleteDeliveryApiKeyRes() {
}

type DeleteExtensionApplicationJSONUnauthorized Error

func (*DeleteExtensionApplicationJSONUnauthorized) deleteExtensionRes() {}

type DeleteExtensionApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*DeleteExtensionApplicationVndContentfulManagementV1JSONUnauthorized) deleteExtensionRes() {}

type DeleteRoleApplicationJSONUnauthorized Error

func (*DeleteRoleApplicationJSONUnauthorized) deleteRoleRes() {}

type DeleteRoleApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*DeleteRoleApplicationVndContentfulManagementV1JSONUnauthorized) deleteRoleRes() {}

type DeleteWebhookDefinitionApplicationJSONUnauthorized Error

func (*DeleteWebhookDefinitionApplicationJSONUnauthorized) deleteWebhookDefinitionRes() {}

type DeleteWebhookDefinitionApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*DeleteWebhookDefinitionApplicationVndContentfulManagementV1JSONUnauthorized) deleteWebhookDefinitionRes() {
}

// Merged schema.
// Ref: #/components/schemas/EditorInterface
type EditorInterface struct {
	Sys           EditorInterfaceSys                          `json:"sys"`
	EditorLayout  OptNilEditorInterfaceEditorLayoutItemArray  `json:"editorLayout"`
	Controls      OptNilEditorInterfaceControlsItemArray      `json:"controls"`
	GroupControls OptNilEditorInterfaceGroupControlsItemArray `json:"groupControls"`
	Sidebar       OptNilEditorInterfaceSidebarItemArray       `json:"sidebar"`
}

// GetSys returns the value of Sys.
func (s *EditorInterface) GetSys() EditorInterfaceSys {
	return s.Sys
}

// GetEditorLayout returns the value of EditorLayout.
func (s *EditorInterface) GetEditorLayout() OptNilEditorInterfaceEditorLayoutItemArray {
	return s.EditorLayout
}

// GetControls returns the value of Controls.
func (s *EditorInterface) GetControls() OptNilEditorInterfaceControlsItemArray {
	return s.Controls
}

// GetGroupControls returns the value of GroupControls.
func (s *EditorInterface) GetGroupControls() OptNilEditorInterfaceGroupControlsItemArray {
	return s.GroupControls
}

// GetSidebar returns the value of Sidebar.
func (s *EditorInterface) GetSidebar() OptNilEditorInterfaceSidebarItemArray {
	return s.Sidebar
}

// SetSys sets the value of Sys.
func (s *EditorInterface) SetSys(val EditorInterfaceSys) {
	s.Sys = val
}

// SetEditorLayout sets the value of EditorLayout.
func (s *EditorInterface) SetEditorLayout(val OptNilEditorInterfaceEditorLayoutItemArray) {
	s.EditorLayout = val
}

// SetControls sets the value of Controls.
func (s *EditorInterface) SetControls(val OptNilEditorInterfaceControlsItemArray) {
	s.Controls = val
}

// SetGroupControls sets the value of GroupControls.
func (s *EditorInterface) SetGroupControls(val OptNilEditorInterfaceGroupControlsItemArray) {
	s.GroupControls = val
}

// SetSidebar sets the value of Sidebar.
func (s *EditorInterface) SetSidebar(val OptNilEditorInterfaceSidebarItemArray) {
	s.Sidebar = val
}

func (*EditorInterface) getEditorInterfaceRes() {}

type EditorInterfaceControlsItem struct {
	FieldId         string    `json:"fieldId"`
	WidgetNamespace OptString `json:"widgetNamespace"`
	WidgetId        OptString `json:"widgetId"`
	Settings        jx.Raw    `json:"settings"`
}

// GetFieldId returns the value of FieldId.
func (s *EditorInterfaceControlsItem) GetFieldId() string {
	return s.FieldId
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *EditorInterfaceControlsItem) GetWidgetNamespace() OptString {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *EditorInterfaceControlsItem) GetWidgetId() OptString {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *EditorInterfaceControlsItem) GetSettings() jx.Raw {
	return s.Settings
}

// SetFieldId sets the value of FieldId.
func (s *EditorInterfaceControlsItem) SetFieldId(val string) {
	s.FieldId = val
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *EditorInterfaceControlsItem) SetWidgetNamespace(val OptString) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *EditorInterfaceControlsItem) SetWidgetId(val OptString) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *EditorInterfaceControlsItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

// Ref: #/components/schemas/EditorInterfaceEditorLayoutFieldItem
type EditorInterfaceEditorLayoutFieldItem struct {
	FieldId string `json:"fieldId"`
}

// GetFieldId returns the value of FieldId.
func (s *EditorInterfaceEditorLayoutFieldItem) GetFieldId() string {
	return s.FieldId
}

// SetFieldId sets the value of FieldId.
func (s *EditorInterfaceEditorLayoutFieldItem) SetFieldId(val string) {
	s.FieldId = val
}

// Ref: #/components/schemas/EditorInterfaceEditorLayoutGroupItem
type EditorInterfaceEditorLayoutGroupItem struct {
	GroupId string                            `json:"groupId"`
	Name    string                            `json:"name"`
	Items   []EditorInterfaceEditorLayoutItem `json:"items"`
}

// GetGroupId returns the value of GroupId.
func (s *EditorInterfaceEditorLayoutGroupItem) GetGroupId() string {
	return s.GroupId
}

// GetName returns the value of Name.
func (s *EditorInterfaceEditorLayoutGroupItem) GetName() string {
	return s.Name
}

// GetItems returns the value of Items.
func (s *EditorInterfaceEditorLayoutGroupItem) GetItems() []EditorInterfaceEditorLayoutItem {
	return s.Items
}

// SetGroupId sets the value of GroupId.
func (s *EditorInterfaceEditorLayoutGroupItem) SetGroupId(val string) {
	s.GroupId = val
}

// SetName sets the value of Name.
func (s *EditorInterfaceEditorLayoutGroupItem) SetName(val string) {
	s.Name = val
}

// SetItems sets the value of Items.
func (s *EditorInterfaceEditorLayoutGroupItem) SetItems(val []EditorInterfaceEditorLayoutItem) {
	s.Items = val
}

// Ref: #/components/schemas/EditorInterfaceEditorLayoutItem
// EditorInterfaceEditorLayoutItem represents sum type.
type EditorInterfaceEditorLayoutItem struct {
	Type                                 EditorInterfaceEditorLayoutItemType // switch on this field
	EditorInterfaceEditorLayoutGroupItem EditorInterfaceEditorLayoutGroupItem
	EditorInterfaceEditorLayoutFieldItem EditorInterfaceEditorLayoutFieldItem
}

// EditorInterfaceEditorLayoutItemType is oneOf type of EditorInterfaceEditorLayoutItem.
type EditorInterfaceEditorLayoutItemType string

// Possible values for EditorInterfaceEditorLayoutItemType.
const (
	EditorInterfaceEditorLayoutGroupItemEditorInterfaceEditorLayoutItem EditorInterfaceEditorLayoutItemType = "EditorInterfaceEditorLayoutGroupItem"
	EditorInterfaceEditorLayoutFieldItemEditorInterfaceEditorLayoutItem EditorInterfaceEditorLayoutItemType = "EditorInterfaceEditorLayoutFieldItem"
)

// IsEditorInterfaceEditorLayoutGroupItem reports whether EditorInterfaceEditorLayoutItem is EditorInterfaceEditorLayoutGroupItem.
func (s EditorInterfaceEditorLayoutItem) IsEditorInterfaceEditorLayoutGroupItem() bool {
	return s.Type == EditorInterfaceEditorLayoutGroupItemEditorInterfaceEditorLayoutItem
}

// IsEditorInterfaceEditorLayoutFieldItem reports whether EditorInterfaceEditorLayoutItem is EditorInterfaceEditorLayoutFieldItem.
func (s EditorInterfaceEditorLayoutItem) IsEditorInterfaceEditorLayoutFieldItem() bool {
	return s.Type == EditorInterfaceEditorLayoutFieldItemEditorInterfaceEditorLayoutItem
}

// SetEditorInterfaceEditorLayoutGroupItem sets EditorInterfaceEditorLayoutItem to EditorInterfaceEditorLayoutGroupItem.
func (s *EditorInterfaceEditorLayoutItem) SetEditorInterfaceEditorLayoutGroupItem(v EditorInterfaceEditorLayoutGroupItem) {
	s.Type = EditorInterfaceEditorLayoutGroupItemEditorInterfaceEditorLayoutItem
	s.EditorInterfaceEditorLayoutGroupItem = v
}

// GetEditorInterfaceEditorLayoutGroupItem returns EditorInterfaceEditorLayoutGroupItem and true boolean if EditorInterfaceEditorLayoutItem is EditorInterfaceEditorLayoutGroupItem.
func (s EditorInterfaceEditorLayoutItem) GetEditorInterfaceEditorLayoutGroupItem() (v EditorInterfaceEditorLayoutGroupItem, ok bool) {
	if !s.IsEditorInterfaceEditorLayoutGroupItem() {
		return v, false
	}
	return s.EditorInterfaceEditorLayoutGroupItem, true
}

// NewEditorInterfaceEditorLayoutGroupItemEditorInterfaceEditorLayoutItem returns new EditorInterfaceEditorLayoutItem from EditorInterfaceEditorLayoutGroupItem.
func NewEditorInterfaceEditorLayoutGroupItemEditorInterfaceEditorLayoutItem(v EditorInterfaceEditorLayoutGroupItem) EditorInterfaceEditorLayoutItem {
	var s EditorInterfaceEditorLayoutItem
	s.SetEditorInterfaceEditorLayoutGroupItem(v)
	return s
}

// SetEditorInterfaceEditorLayoutFieldItem sets EditorInterfaceEditorLayoutItem to EditorInterfaceEditorLayoutFieldItem.
func (s *EditorInterfaceEditorLayoutItem) SetEditorInterfaceEditorLayoutFieldItem(v EditorInterfaceEditorLayoutFieldItem) {
	s.Type = EditorInterfaceEditorLayoutFieldItemEditorInterfaceEditorLayoutItem
	s.EditorInterfaceEditorLayoutFieldItem = v
}

// GetEditorInterfaceEditorLayoutFieldItem returns EditorInterfaceEditorLayoutFieldItem and true boolean if EditorInterfaceEditorLayoutItem is EditorInterfaceEditorLayoutFieldItem.
func (s EditorInterfaceEditorLayoutItem) GetEditorInterfaceEditorLayoutFieldItem() (v EditorInterfaceEditorLayoutFieldItem, ok bool) {
	if !s.IsEditorInterfaceEditorLayoutFieldItem() {
		return v, false
	}
	return s.EditorInterfaceEditorLayoutFieldItem, true
}

// NewEditorInterfaceEditorLayoutFieldItemEditorInterfaceEditorLayoutItem returns new EditorInterfaceEditorLayoutItem from EditorInterfaceEditorLayoutFieldItem.
func NewEditorInterfaceEditorLayoutFieldItemEditorInterfaceEditorLayoutItem(v EditorInterfaceEditorLayoutFieldItem) EditorInterfaceEditorLayoutItem {
	var s EditorInterfaceEditorLayoutItem
	s.SetEditorInterfaceEditorLayoutFieldItem(v)
	return s
}

// Ref: #/components/schemas/EditorInterfaceFields
type EditorInterfaceFields struct {
	EditorLayout  OptNilEditorInterfaceEditorLayoutItemArray        `json:"editorLayout"`
	Controls      OptNilEditorInterfaceFieldsControlsItemArray      `json:"controls"`
	GroupControls OptNilEditorInterfaceFieldsGroupControlsItemArray `json:"groupControls"`
	Sidebar       OptNilEditorInterfaceFieldsSidebarItemArray       `json:"sidebar"`
}

// GetEditorLayout returns the value of EditorLayout.
func (s *EditorInterfaceFields) GetEditorLayout() OptNilEditorInterfaceEditorLayoutItemArray {
	return s.EditorLayout
}

// GetControls returns the value of Controls.
func (s *EditorInterfaceFields) GetControls() OptNilEditorInterfaceFieldsControlsItemArray {
	return s.Controls
}

// GetGroupControls returns the value of GroupControls.
func (s *EditorInterfaceFields) GetGroupControls() OptNilEditorInterfaceFieldsGroupControlsItemArray {
	return s.GroupControls
}

// GetSidebar returns the value of Sidebar.
func (s *EditorInterfaceFields) GetSidebar() OptNilEditorInterfaceFieldsSidebarItemArray {
	return s.Sidebar
}

// SetEditorLayout sets the value of EditorLayout.
func (s *EditorInterfaceFields) SetEditorLayout(val OptNilEditorInterfaceEditorLayoutItemArray) {
	s.EditorLayout = val
}

// SetControls sets the value of Controls.
func (s *EditorInterfaceFields) SetControls(val OptNilEditorInterfaceFieldsControlsItemArray) {
	s.Controls = val
}

// SetGroupControls sets the value of GroupControls.
func (s *EditorInterfaceFields) SetGroupControls(val OptNilEditorInterfaceFieldsGroupControlsItemArray) {
	s.GroupControls = val
}

// SetSidebar sets the value of Sidebar.
func (s *EditorInterfaceFields) SetSidebar(val OptNilEditorInterfaceFieldsSidebarItemArray) {
	s.Sidebar = val
}

type EditorInterfaceFieldsControlsItem struct {
	FieldId         string    `json:"fieldId"`
	WidgetNamespace OptString `json:"widgetNamespace"`
	WidgetId        OptString `json:"widgetId"`
	Settings        jx.Raw    `json:"settings"`
}

// GetFieldId returns the value of FieldId.
func (s *EditorInterfaceFieldsControlsItem) GetFieldId() string {
	return s.FieldId
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *EditorInterfaceFieldsControlsItem) GetWidgetNamespace() OptString {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *EditorInterfaceFieldsControlsItem) GetWidgetId() OptString {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *EditorInterfaceFieldsControlsItem) GetSettings() jx.Raw {
	return s.Settings
}

// SetFieldId sets the value of FieldId.
func (s *EditorInterfaceFieldsControlsItem) SetFieldId(val string) {
	s.FieldId = val
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *EditorInterfaceFieldsControlsItem) SetWidgetNamespace(val OptString) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *EditorInterfaceFieldsControlsItem) SetWidgetId(val OptString) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *EditorInterfaceFieldsControlsItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

type EditorInterfaceFieldsGroupControlsItem struct {
	GroupId         string    `json:"groupId"`
	WidgetNamespace OptString `json:"widgetNamespace"`
	WidgetId        OptString `json:"widgetId"`
	Settings        jx.Raw    `json:"settings"`
}

// GetGroupId returns the value of GroupId.
func (s *EditorInterfaceFieldsGroupControlsItem) GetGroupId() string {
	return s.GroupId
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *EditorInterfaceFieldsGroupControlsItem) GetWidgetNamespace() OptString {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *EditorInterfaceFieldsGroupControlsItem) GetWidgetId() OptString {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *EditorInterfaceFieldsGroupControlsItem) GetSettings() jx.Raw {
	return s.Settings
}

// SetGroupId sets the value of GroupId.
func (s *EditorInterfaceFieldsGroupControlsItem) SetGroupId(val string) {
	s.GroupId = val
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *EditorInterfaceFieldsGroupControlsItem) SetWidgetNamespace(val OptString) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *EditorInterfaceFieldsGroupControlsItem) SetWidgetId(val OptString) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *EditorInterfaceFieldsGroupControlsItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

type EditorInterfaceFieldsSidebarItem struct {
	WidgetNamespace string  `json:"widgetNamespace"`
	WidgetId        string  `json:"widgetId"`
	Settings        jx.Raw  `json:"settings"`
	Disabled        OptBool `json:"disabled"`
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *EditorInterfaceFieldsSidebarItem) GetWidgetNamespace() string {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *EditorInterfaceFieldsSidebarItem) GetWidgetId() string {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *EditorInterfaceFieldsSidebarItem) GetSettings() jx.Raw {
	return s.Settings
}

// GetDisabled returns the value of Disabled.
func (s *EditorInterfaceFieldsSidebarItem) GetDisabled() OptBool {
	return s.Disabled
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *EditorInterfaceFieldsSidebarItem) SetWidgetNamespace(val string) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *EditorInterfaceFieldsSidebarItem) SetWidgetId(val string) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *EditorInterfaceFieldsSidebarItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

// SetDisabled sets the value of Disabled.
func (s *EditorInterfaceFieldsSidebarItem) SetDisabled(val OptBool) {
	s.Disabled = val
}

type EditorInterfaceGroupControlsItem struct {
	GroupId         string    `json:"groupId"`
	WidgetNamespace OptString `json:"widgetNamespace"`
	WidgetId        OptString `json:"widgetId"`
	Settings        jx.Raw    `json:"settings"`
}

// GetGroupId returns the value of GroupId.
func (s *EditorInterfaceGroupControlsItem) GetGroupId() string {
	return s.GroupId
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *EditorInterfaceGroupControlsItem) GetWidgetNamespace() OptString {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *EditorInterfaceGroupControlsItem) GetWidgetId() OptString {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *EditorInterfaceGroupControlsItem) GetSettings() jx.Raw {
	return s.Settings
}

// SetGroupId sets the value of GroupId.
func (s *EditorInterfaceGroupControlsItem) SetGroupId(val string) {
	s.GroupId = val
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *EditorInterfaceGroupControlsItem) SetWidgetNamespace(val OptString) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *EditorInterfaceGroupControlsItem) SetWidgetId(val OptString) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *EditorInterfaceGroupControlsItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

type EditorInterfaceSidebarItem struct {
	WidgetNamespace string  `json:"widgetNamespace"`
	WidgetId        string  `json:"widgetId"`
	Settings        jx.Raw  `json:"settings"`
	Disabled        OptBool `json:"disabled"`
}

// GetWidgetNamespace returns the value of WidgetNamespace.
func (s *EditorInterfaceSidebarItem) GetWidgetNamespace() string {
	return s.WidgetNamespace
}

// GetWidgetId returns the value of WidgetId.
func (s *EditorInterfaceSidebarItem) GetWidgetId() string {
	return s.WidgetId
}

// GetSettings returns the value of Settings.
func (s *EditorInterfaceSidebarItem) GetSettings() jx.Raw {
	return s.Settings
}

// GetDisabled returns the value of Disabled.
func (s *EditorInterfaceSidebarItem) GetDisabled() OptBool {
	return s.Disabled
}

// SetWidgetNamespace sets the value of WidgetNamespace.
func (s *EditorInterfaceSidebarItem) SetWidgetNamespace(val string) {
	s.WidgetNamespace = val
}

// SetWidgetId sets the value of WidgetId.
func (s *EditorInterfaceSidebarItem) SetWidgetId(val string) {
	s.WidgetId = val
}

// SetSettings sets the value of Settings.
func (s *EditorInterfaceSidebarItem) SetSettings(val jx.Raw) {
	s.Settings = val
}

// SetDisabled sets the value of Disabled.
func (s *EditorInterfaceSidebarItem) SetDisabled(val OptBool) {
	s.Disabled = val
}

// EditorInterfaceStatusCode wraps EditorInterface with StatusCode.
type EditorInterfaceStatusCode struct {
	StatusCode int
	Response   EditorInterface
}

// GetStatusCode returns the value of StatusCode.
func (s *EditorInterfaceStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *EditorInterfaceStatusCode) GetResponse() EditorInterface {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *EditorInterfaceStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *EditorInterfaceStatusCode) SetResponse(val EditorInterface) {
	s.Response = val
}

func (*EditorInterfaceStatusCode) putEditorInterfaceRes() {}

// Merged schema.
// Ref: #/components/schemas/EditorInterfaceSys
type EditorInterfaceSys struct {
	// Merged property.
	Type        EditorInterfaceSysType `json:"type"`
	Space       SpaceLink              `json:"space"`
	Environment EnvironmentLink        `json:"environment"`
	ID          string                 `json:"id"`
	Version     int                    `json:"version"`
	CreatedAt   OptDateTime            `json:"createdAt"`
	UpdatedAt   OptDateTime            `json:"updatedAt"`
	ContentType ContentTypeLink        `json:"contentType"`
}

// GetType returns the value of Type.
func (s *EditorInterfaceSys) GetType() EditorInterfaceSysType {
	return s.Type
}

// GetSpace returns the value of Space.
func (s *EditorInterfaceSys) GetSpace() SpaceLink {
	return s.Space
}

// GetEnvironment returns the value of Environment.
func (s *EditorInterfaceSys) GetEnvironment() EnvironmentLink {
	return s.Environment
}

// GetID returns the value of ID.
func (s *EditorInterfaceSys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *EditorInterfaceSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *EditorInterfaceSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *EditorInterfaceSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetContentType returns the value of ContentType.
func (s *EditorInterfaceSys) GetContentType() ContentTypeLink {
	return s.ContentType
}

// SetType sets the value of Type.
func (s *EditorInterfaceSys) SetType(val EditorInterfaceSysType) {
	s.Type = val
}

// SetSpace sets the value of Space.
func (s *EditorInterfaceSys) SetSpace(val SpaceLink) {
	s.Space = val
}

// SetEnvironment sets the value of Environment.
func (s *EditorInterfaceSys) SetEnvironment(val EnvironmentLink) {
	s.Environment = val
}

// SetID sets the value of ID.
func (s *EditorInterfaceSys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *EditorInterfaceSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *EditorInterfaceSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *EditorInterfaceSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetContentType sets the value of ContentType.
func (s *EditorInterfaceSys) SetContentType(val ContentTypeLink) {
	s.ContentType = val
}

// Merged schema.
type EditorInterfaceSysType string

const (
	EditorInterfaceSysTypeEditorInterface EditorInterfaceSysType = "EditorInterface"
)

// AllValues returns all EditorInterfaceSysType values.
func (EditorInterfaceSysType) AllValues() []EditorInterfaceSysType {
	return []EditorInterfaceSysType{
		EditorInterfaceSysTypeEditorInterface,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EditorInterfaceSysType) MarshalText() ([]byte, error) {
	switch s {
	case EditorInterfaceSysTypeEditorInterface:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EditorInterfaceSysType) UnmarshalText(data []byte) error {
	switch EditorInterfaceSysType(data) {
	case EditorInterfaceSysTypeEditorInterface:
		*s = EditorInterfaceSysTypeEditorInterface
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/EnvironmentLink
type EnvironmentLink struct {
	Sys EnvironmentLinkSys `json:"sys"`
}

// GetSys returns the value of Sys.
func (s *EnvironmentLink) GetSys() EnvironmentLinkSys {
	return s.Sys
}

// SetSys sets the value of Sys.
func (s *EnvironmentLink) SetSys(val EnvironmentLinkSys) {
	s.Sys = val
}

// Merged schema.
type EnvironmentLinkSys struct {
	// Merged property.
	Type EnvironmentLinkSysType `json:"type"`
	ID   string                 `json:"id"`
	// Merged property.
	LinkType EnvironmentLinkSysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *EnvironmentLinkSys) GetType() EnvironmentLinkSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *EnvironmentLinkSys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *EnvironmentLinkSys) GetLinkType() EnvironmentLinkSysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *EnvironmentLinkSys) SetType(val EnvironmentLinkSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *EnvironmentLinkSys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *EnvironmentLinkSys) SetLinkType(val EnvironmentLinkSysLinkType) {
	s.LinkType = val
}

// Merged schema.
type EnvironmentLinkSysLinkType string

const (
	EnvironmentLinkSysLinkTypeEnvironment EnvironmentLinkSysLinkType = "Environment"
)

// AllValues returns all EnvironmentLinkSysLinkType values.
func (EnvironmentLinkSysLinkType) AllValues() []EnvironmentLinkSysLinkType {
	return []EnvironmentLinkSysLinkType{
		EnvironmentLinkSysLinkTypeEnvironment,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentLinkSysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentLinkSysLinkTypeEnvironment:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentLinkSysLinkType) UnmarshalText(data []byte) error {
	switch EnvironmentLinkSysLinkType(data) {
	case EnvironmentLinkSysLinkTypeEnvironment:
		*s = EnvironmentLinkSysLinkTypeEnvironment
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type EnvironmentLinkSysType string

const (
	EnvironmentLinkSysTypeLink EnvironmentLinkSysType = "Link"
)

// AllValues returns all EnvironmentLinkSysType values.
func (EnvironmentLinkSysType) AllValues() []EnvironmentLinkSysType {
	return []EnvironmentLinkSysType{
		EnvironmentLinkSysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentLinkSysType) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentLinkSysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentLinkSysType) UnmarshalText(data []byte) error {
	switch EnvironmentLinkSysType(data) {
	case EnvironmentLinkSysTypeLink:
		*s = EnvironmentLinkSysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/Error
type Error struct {
	Sys     ErrorSys  `json:"sys"`
	Message OptString `json:"message"`
	Details jx.Raw    `json:"details"`
}

// GetSys returns the value of Sys.
func (s *Error) GetSys() ErrorSys {
	return s.Sys
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() OptString {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *Error) GetDetails() jx.Raw {
	return s.Details
}

// SetSys sets the value of Sys.
func (s *Error) SetSys(val ErrorSys) {
	s.Sys = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val OptString) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *Error) SetDetails(val jx.Raw) {
	s.Details = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

func (*ErrorStatusCode) activateContentTypeRes()                 {}
func (*ErrorStatusCode) createAppDefinitionRes()                 {}
func (*ErrorStatusCode) createDeliveryApiKeyRes()                {}
func (*ErrorStatusCode) createPersonalAccessTokenRes()           {}
func (*ErrorStatusCode) createRoleRes()                          {}
func (*ErrorStatusCode) createWebhookDefinitionRes()             {}
func (*ErrorStatusCode) deactivateContentTypeRes()               {}
func (*ErrorStatusCode) deleteAppDefinitionRes()                 {}
func (*ErrorStatusCode) deleteAppDefinitionResourceProviderRes() {}
func (*ErrorStatusCode) deleteAppDefinitionResourceTypeRes()     {}
func (*ErrorStatusCode) deleteAppInstallationRes()               {}
func (*ErrorStatusCode) deleteContentTypeRes()                   {}
func (*ErrorStatusCode) deleteDeliveryApiKeyRes()                {}
func (*ErrorStatusCode) deleteExtensionRes()                     {}
func (*ErrorStatusCode) deleteRoleRes()                          {}
func (*ErrorStatusCode) deleteWebhookDefinitionRes()             {}
func (*ErrorStatusCode) getAppDefinitionRes()                    {}
func (*ErrorStatusCode) getAppDefinitionResourceProviderRes()    {}
func (*ErrorStatusCode) getAppDefinitionResourceTypeRes()        {}
func (*ErrorStatusCode) getAppInstallationRes()                  {}
func (*ErrorStatusCode) getAuthenticatedUserRes()                {}
func (*ErrorStatusCode) getContentTypeRes()                      {}
func (*ErrorStatusCode) getDeliveryApiKeyRes()                   {}
func (*ErrorStatusCode) getEditorInterfaceRes()                  {}
func (*ErrorStatusCode) getExtensionRes()                        {}
func (*ErrorStatusCode) getPersonalAccessTokenRes()              {}
func (*ErrorStatusCode) getPreviewApiKeyRes()                    {}
func (*ErrorStatusCode) getRoleRes()                             {}
func (*ErrorStatusCode) getSpaceEnablementsRes()                 {}
func (*ErrorStatusCode) getWebhookDefinitionRes()                {}
func (*ErrorStatusCode) putAppDefinitionRes()                    {}
func (*ErrorStatusCode) putAppDefinitionResourceProviderRes()    {}
func (*ErrorStatusCode) putAppDefinitionResourceTypeRes()        {}
func (*ErrorStatusCode) putAppInstallationRes()                  {}
func (*ErrorStatusCode) putContentTypeRes()                      {}
func (*ErrorStatusCode) putEditorInterfaceRes()                  {}
func (*ErrorStatusCode) putExtensionRes()                        {}
func (*ErrorStatusCode) putSpaceEnablementsRes()                 {}
func (*ErrorStatusCode) revokePersonalAccessTokenRes()           {}
func (*ErrorStatusCode) updateDeliveryApiKeyRes()                {}
func (*ErrorStatusCode) updateRoleRes()                          {}
func (*ErrorStatusCode) updateWebhookDefinitionRes()             {}

// Ref: #/components/schemas/ErrorSys
type ErrorSys struct {
	Type ErrorSysType `json:"type"`
	ID   string       `json:"id"`
}

// GetType returns the value of Type.
func (s *ErrorSys) GetType() ErrorSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *ErrorSys) GetID() string {
	return s.ID
}

// SetType sets the value of Type.
func (s *ErrorSys) SetType(val ErrorSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ErrorSys) SetID(val string) {
	s.ID = val
}

type ErrorSysType string

const (
	ErrorSysTypeError ErrorSysType = "Error"
)

// AllValues returns all ErrorSysType values.
func (ErrorSysType) AllValues() []ErrorSysType {
	return []ErrorSysType{
		ErrorSysTypeError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ErrorSysType) MarshalText() ([]byte, error) {
	switch s {
	case ErrorSysTypeError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ErrorSysType) UnmarshalText(data []byte) error {
	switch ErrorSysType(data) {
	case ErrorSysTypeError:
		*s = ErrorSysTypeError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/Extension
type Extension struct {
	Sys        ExtensionSys       `json:"sys"`
	Extension  ExtensionExtension `json:"extension"`
	Parameters jx.Raw             `json:"parameters"`
}

// GetSys returns the value of Sys.
func (s *Extension) GetSys() ExtensionSys {
	return s.Sys
}

// GetExtension returns the value of Extension.
func (s *Extension) GetExtension() ExtensionExtension {
	return s.Extension
}

// GetParameters returns the value of Parameters.
func (s *Extension) GetParameters() jx.Raw {
	return s.Parameters
}

// SetSys sets the value of Sys.
func (s *Extension) SetSys(val ExtensionSys) {
	s.Sys = val
}

// SetExtension sets the value of Extension.
func (s *Extension) SetExtension(val ExtensionExtension) {
	s.Extension = val
}

// SetParameters sets the value of Parameters.
func (s *Extension) SetParameters(val jx.Raw) {
	s.Parameters = val
}

func (*Extension) getExtensionRes() {}

type ExtensionExtension struct {
	Name       string                             `json:"name"`
	Src        OptString                          `json:"src"`
	Srcdoc     OptString                          `json:"srcdoc"`
	FieldTypes []ExtensionExtensionFieldTypesItem `json:"fieldTypes"`
	Sidebar    OptBool                            `json:"sidebar"`
	Parameters OptAppDefinitionParameters         `json:"parameters"`
}

// GetName returns the value of Name.
func (s *ExtensionExtension) GetName() string {
	return s.Name
}

// GetSrc returns the value of Src.
func (s *ExtensionExtension) GetSrc() OptString {
	return s.Src
}

// GetSrcdoc returns the value of Srcdoc.
func (s *ExtensionExtension) GetSrcdoc() OptString {
	return s.Srcdoc
}

// GetFieldTypes returns the value of FieldTypes.
func (s *ExtensionExtension) GetFieldTypes() []ExtensionExtensionFieldTypesItem {
	return s.FieldTypes
}

// GetSidebar returns the value of Sidebar.
func (s *ExtensionExtension) GetSidebar() OptBool {
	return s.Sidebar
}

// GetParameters returns the value of Parameters.
func (s *ExtensionExtension) GetParameters() OptAppDefinitionParameters {
	return s.Parameters
}

// SetName sets the value of Name.
func (s *ExtensionExtension) SetName(val string) {
	s.Name = val
}

// SetSrc sets the value of Src.
func (s *ExtensionExtension) SetSrc(val OptString) {
	s.Src = val
}

// SetSrcdoc sets the value of Srcdoc.
func (s *ExtensionExtension) SetSrcdoc(val OptString) {
	s.Srcdoc = val
}

// SetFieldTypes sets the value of FieldTypes.
func (s *ExtensionExtension) SetFieldTypes(val []ExtensionExtensionFieldTypesItem) {
	s.FieldTypes = val
}

// SetSidebar sets the value of Sidebar.
func (s *ExtensionExtension) SetSidebar(val OptBool) {
	s.Sidebar = val
}

// SetParameters sets the value of Parameters.
func (s *ExtensionExtension) SetParameters(val OptAppDefinitionParameters) {
	s.Parameters = val
}

type ExtensionExtensionFieldTypesItem struct {
	Type     string                                   `json:"type"`
	LinkType OptString                                `json:"linkType"`
	Items    OptExtensionExtensionFieldTypesItemItems `json:"items"`
}

// GetType returns the value of Type.
func (s *ExtensionExtensionFieldTypesItem) GetType() string {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *ExtensionExtensionFieldTypesItem) GetLinkType() OptString {
	return s.LinkType
}

// GetItems returns the value of Items.
func (s *ExtensionExtensionFieldTypesItem) GetItems() OptExtensionExtensionFieldTypesItemItems {
	return s.Items
}

// SetType sets the value of Type.
func (s *ExtensionExtensionFieldTypesItem) SetType(val string) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *ExtensionExtensionFieldTypesItem) SetLinkType(val OptString) {
	s.LinkType = val
}

// SetItems sets the value of Items.
func (s *ExtensionExtensionFieldTypesItem) SetItems(val OptExtensionExtensionFieldTypesItemItems) {
	s.Items = val
}

type ExtensionExtensionFieldTypesItemItems struct {
	Type     string    `json:"type"`
	LinkType OptString `json:"linkType"`
}

// GetType returns the value of Type.
func (s *ExtensionExtensionFieldTypesItemItems) GetType() string {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *ExtensionExtensionFieldTypesItemItems) GetLinkType() OptString {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *ExtensionExtensionFieldTypesItemItems) SetType(val string) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *ExtensionExtensionFieldTypesItemItems) SetLinkType(val OptString) {
	s.LinkType = val
}

// Ref: #/components/schemas/ExtensionFields
type ExtensionFields struct {
	Extension  ExtensionFieldsExtension `json:"extension"`
	Parameters jx.Raw                   `json:"parameters"`
}

// GetExtension returns the value of Extension.
func (s *ExtensionFields) GetExtension() ExtensionFieldsExtension {
	return s.Extension
}

// GetParameters returns the value of Parameters.
func (s *ExtensionFields) GetParameters() jx.Raw {
	return s.Parameters
}

// SetExtension sets the value of Extension.
func (s *ExtensionFields) SetExtension(val ExtensionFieldsExtension) {
	s.Extension = val
}

// SetParameters sets the value of Parameters.
func (s *ExtensionFields) SetParameters(val jx.Raw) {
	s.Parameters = val
}

type ExtensionFieldsExtension struct {
	Name       string                                   `json:"name"`
	Src        OptString                                `json:"src"`
	Srcdoc     OptString                                `json:"srcdoc"`
	FieldTypes []ExtensionFieldsExtensionFieldTypesItem `json:"fieldTypes"`
	Sidebar    OptBool                                  `json:"sidebar"`
	Parameters OptAppDefinitionParameters               `json:"parameters"`
}

// GetName returns the value of Name.
func (s *ExtensionFieldsExtension) GetName() string {
	return s.Name
}

// GetSrc returns the value of Src.
func (s *ExtensionFieldsExtension) GetSrc() OptString {
	return s.Src
}

// GetSrcdoc returns the value of Srcdoc.
func (s *ExtensionFieldsExtension) GetSrcdoc() OptString {
	return s.Srcdoc
}

// GetFieldTypes returns the value of FieldTypes.
func (s *ExtensionFieldsExtension) GetFieldTypes() []ExtensionFieldsExtensionFieldTypesItem {
	return s.FieldTypes
}

// GetSidebar returns the value of Sidebar.
func (s *ExtensionFieldsExtension) GetSidebar() OptBool {
	return s.Sidebar
}

// GetParameters returns the value of Parameters.
func (s *ExtensionFieldsExtension) GetParameters() OptAppDefinitionParameters {
	return s.Parameters
}

// SetName sets the value of Name.
func (s *ExtensionFieldsExtension) SetName(val string) {
	s.Name = val
}

// SetSrc sets the value of Src.
func (s *ExtensionFieldsExtension) SetSrc(val OptString) {
	s.Src = val
}

// SetSrcdoc sets the value of Srcdoc.
func (s *ExtensionFieldsExtension) SetSrcdoc(val OptString) {
	s.Srcdoc = val
}

// SetFieldTypes sets the value of FieldTypes.
func (s *ExtensionFieldsExtension) SetFieldTypes(val []ExtensionFieldsExtensionFieldTypesItem) {
	s.FieldTypes = val
}

// SetSidebar sets the value of Sidebar.
func (s *ExtensionFieldsExtension) SetSidebar(val OptBool) {
	s.Sidebar = val
}

// SetParameters sets the value of Parameters.
func (s *ExtensionFieldsExtension) SetParameters(val OptAppDefinitionParameters) {
	s.Parameters = val
}

type ExtensionFieldsExtensionFieldTypesItem struct {
	Type     string                                         `json:"type"`
	LinkType OptString                                      `json:"linkType"`
	Items    OptExtensionFieldsExtensionFieldTypesItemItems `json:"items"`
}

// GetType returns the value of Type.
func (s *ExtensionFieldsExtensionFieldTypesItem) GetType() string {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *ExtensionFieldsExtensionFieldTypesItem) GetLinkType() OptString {
	return s.LinkType
}

// GetItems returns the value of Items.
func (s *ExtensionFieldsExtensionFieldTypesItem) GetItems() OptExtensionFieldsExtensionFieldTypesItemItems {
	return s.Items
}

// SetType sets the value of Type.
func (s *ExtensionFieldsExtensionFieldTypesItem) SetType(val string) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *ExtensionFieldsExtensionFieldTypesItem) SetLinkType(val OptString) {
	s.LinkType = val
}

// SetItems sets the value of Items.
func (s *ExtensionFieldsExtensionFieldTypesItem) SetItems(val OptExtensionFieldsExtensionFieldTypesItemItems) {
	s.Items = val
}

type ExtensionFieldsExtensionFieldTypesItemItems struct {
	Type     string    `json:"type"`
	LinkType OptString `json:"linkType"`
}

// GetType returns the value of Type.
func (s *ExtensionFieldsExtensionFieldTypesItemItems) GetType() string {
	return s.Type
}

// GetLinkType returns the value of LinkType.
func (s *ExtensionFieldsExtensionFieldTypesItemItems) GetLinkType() OptString {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *ExtensionFieldsExtensionFieldTypesItemItems) SetType(val string) {
	s.Type = val
}

// SetLinkType sets the value of LinkType.
func (s *ExtensionFieldsExtensionFieldTypesItemItems) SetLinkType(val OptString) {
	s.LinkType = val
}

// ExtensionStatusCode wraps Extension with StatusCode.
type ExtensionStatusCode struct {
	StatusCode int
	Response   Extension
}

// GetStatusCode returns the value of StatusCode.
func (s *ExtensionStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ExtensionStatusCode) GetResponse() Extension {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ExtensionStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ExtensionStatusCode) SetResponse(val Extension) {
	s.Response = val
}

func (*ExtensionStatusCode) putExtensionRes() {}

// Merged schema.
// Ref: #/components/schemas/ExtensionSys
type ExtensionSys struct {
	// Merged property.
	Type        ExtensionSysType `json:"type"`
	Space       SpaceLink        `json:"space"`
	Environment EnvironmentLink  `json:"environment"`
	ID          string           `json:"id"`
	Version     int              `json:"version"`
	CreatedAt   OptDateTime      `json:"createdAt"`
	UpdatedAt   OptDateTime      `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *ExtensionSys) GetType() ExtensionSysType {
	return s.Type
}

// GetSpace returns the value of Space.
func (s *ExtensionSys) GetSpace() SpaceLink {
	return s.Space
}

// GetEnvironment returns the value of Environment.
func (s *ExtensionSys) GetEnvironment() EnvironmentLink {
	return s.Environment
}

// GetID returns the value of ID.
func (s *ExtensionSys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *ExtensionSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ExtensionSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ExtensionSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *ExtensionSys) SetType(val ExtensionSysType) {
	s.Type = val
}

// SetSpace sets the value of Space.
func (s *ExtensionSys) SetSpace(val SpaceLink) {
	s.Space = val
}

// SetEnvironment sets the value of Environment.
func (s *ExtensionSys) SetEnvironment(val EnvironmentLink) {
	s.Environment = val
}

// SetID sets the value of ID.
func (s *ExtensionSys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *ExtensionSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ExtensionSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ExtensionSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type ExtensionSysType string

const (
	ExtensionSysTypeExtension ExtensionSysType = "Extension"
)

// AllValues returns all ExtensionSysType values.
func (ExtensionSysType) AllValues() []ExtensionSysType {
	return []ExtensionSysType{
		ExtensionSysTypeExtension,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExtensionSysType) MarshalText() ([]byte, error) {
	switch s {
	case ExtensionSysTypeExtension:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExtensionSysType) UnmarshalText(data []byte) error {
	switch ExtensionSysType(data) {
	case ExtensionSysTypeExtension:
		*s = ExtensionSysTypeExtension
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ExternalResourceLink
type ExternalResourceLink struct {
	Type string `json:"type"`
}

// GetType returns the value of Type.
func (s *ExternalResourceLink) GetType() string {
	return s.Type
}

// SetType sets the value of Type.
func (s *ExternalResourceLink) SetType(val string) {
	s.Type = val
}

// Ref: #/components/schemas/FunctionLink
type FunctionLink struct {
	Sys FunctionLinkSys `json:"sys"`
}

// GetSys returns the value of Sys.
func (s *FunctionLink) GetSys() FunctionLinkSys {
	return s.Sys
}

// SetSys sets the value of Sys.
func (s *FunctionLink) SetSys(val FunctionLinkSys) {
	s.Sys = val
}

// Merged schema.
type FunctionLinkSys struct {
	// Merged property.
	Type FunctionLinkSysType `json:"type"`
	ID   string              `json:"id"`
	// Merged property.
	LinkType FunctionLinkSysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *FunctionLinkSys) GetType() FunctionLinkSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *FunctionLinkSys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *FunctionLinkSys) GetLinkType() FunctionLinkSysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *FunctionLinkSys) SetType(val FunctionLinkSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *FunctionLinkSys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *FunctionLinkSys) SetLinkType(val FunctionLinkSysLinkType) {
	s.LinkType = val
}

// Merged schema.
type FunctionLinkSysLinkType string

const (
	FunctionLinkSysLinkTypeFunction FunctionLinkSysLinkType = "Function"
)

// AllValues returns all FunctionLinkSysLinkType values.
func (FunctionLinkSysLinkType) AllValues() []FunctionLinkSysLinkType {
	return []FunctionLinkSysLinkType{
		FunctionLinkSysLinkTypeFunction,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FunctionLinkSysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case FunctionLinkSysLinkTypeFunction:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FunctionLinkSysLinkType) UnmarshalText(data []byte) error {
	switch FunctionLinkSysLinkType(data) {
	case FunctionLinkSysLinkTypeFunction:
		*s = FunctionLinkSysLinkTypeFunction
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type FunctionLinkSysType string

const (
	FunctionLinkSysTypeLink FunctionLinkSysType = "Link"
)

// AllValues returns all FunctionLinkSysType values.
func (FunctionLinkSysType) AllValues() []FunctionLinkSysType {
	return []FunctionLinkSysType{
		FunctionLinkSysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FunctionLinkSysType) MarshalText() ([]byte, error) {
	switch s {
	case FunctionLinkSysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FunctionLinkSysType) UnmarshalText(data []byte) error {
	switch FunctionLinkSysType(data) {
	case FunctionLinkSysTypeLink:
		*s = FunctionLinkSysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAppDefinitionApplicationJSONUnauthorized Error

func (*GetAppDefinitionApplicationJSONUnauthorized) getAppDefinitionRes() {}

type GetAppDefinitionApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*GetAppDefinitionApplicationVndContentfulManagementV1JSONUnauthorized) getAppDefinitionRes() {}

type GetAppDefinitionResourceProviderApplicationJSONUnauthorized Error

func (*GetAppDefinitionResourceProviderApplicationJSONUnauthorized) getAppDefinitionResourceProviderRes() {
}

type GetAppDefinitionResourceProviderApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*GetAppDefinitionResourceProviderApplicationVndContentfulManagementV1JSONUnauthorized) getAppDefinitionResourceProviderRes() {
}

type GetAppDefinitionResourceTypeApplicationJSONUnauthorized Error

func (*GetAppDefinitionResourceTypeApplicationJSONUnauthorized) getAppDefinitionResourceTypeRes() {}

type GetAppDefinitionResourceTypeApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*GetAppDefinitionResourceTypeApplicationVndContentfulManagementV1JSONUnauthorized) getAppDefinitionResourceTypeRes() {
}

type GetAppInstallationApplicationJSONUnauthorized Error

func (*GetAppInstallationApplicationJSONUnauthorized) getAppInstallationRes() {}

type GetAppInstallationApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*GetAppInstallationApplicationVndContentfulManagementV1JSONUnauthorized) getAppInstallationRes() {
}

type GetAuthenticatedUserApplicationJSONUnauthorized Error

func (*GetAuthenticatedUserApplicationJSONUnauthorized) getAuthenticatedUserRes() {}

type GetAuthenticatedUserApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*GetAuthenticatedUserApplicationVndContentfulManagementV1JSONUnauthorized) getAuthenticatedUserRes() {
}

type GetContentTypeApplicationJSONUnauthorized Error

func (*GetContentTypeApplicationJSONUnauthorized) getContentTypeRes() {}

type GetContentTypeApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*GetContentTypeApplicationVndContentfulManagementV1JSONUnauthorized) getContentTypeRes() {}

type GetDeliveryApiKeyApplicationJSONUnauthorized Error

func (*GetDeliveryApiKeyApplicationJSONUnauthorized) getDeliveryApiKeyRes() {}

type GetDeliveryApiKeyApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*GetDeliveryApiKeyApplicationVndContentfulManagementV1JSONUnauthorized) getDeliveryApiKeyRes() {
}

type GetEditorInterfaceApplicationJSONUnauthorized Error

func (*GetEditorInterfaceApplicationJSONUnauthorized) getEditorInterfaceRes() {}

type GetEditorInterfaceApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*GetEditorInterfaceApplicationVndContentfulManagementV1JSONUnauthorized) getEditorInterfaceRes() {
}

type GetExtensionApplicationJSONUnauthorized Error

func (*GetExtensionApplicationJSONUnauthorized) getExtensionRes() {}

type GetExtensionApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*GetExtensionApplicationVndContentfulManagementV1JSONUnauthorized) getExtensionRes() {}

type GetPersonalAccessTokenApplicationJSONUnauthorized Error

func (*GetPersonalAccessTokenApplicationJSONUnauthorized) getPersonalAccessTokenRes() {}

type GetPersonalAccessTokenApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*GetPersonalAccessTokenApplicationVndContentfulManagementV1JSONUnauthorized) getPersonalAccessTokenRes() {
}

type GetPreviewApiKeyApplicationJSONUnauthorized Error

func (*GetPreviewApiKeyApplicationJSONUnauthorized) getPreviewApiKeyRes() {}

type GetPreviewApiKeyApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*GetPreviewApiKeyApplicationVndContentfulManagementV1JSONUnauthorized) getPreviewApiKeyRes() {}

type GetRoleApplicationJSONUnauthorized Error

func (*GetRoleApplicationJSONUnauthorized) getRoleRes() {}

type GetRoleApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*GetRoleApplicationVndContentfulManagementV1JSONUnauthorized) getRoleRes() {}

type GetSpaceEnablementsApplicationJSONOK SpaceEnablement

func (*GetSpaceEnablementsApplicationJSONOK) getSpaceEnablementsRes() {}

type GetSpaceEnablementsApplicationJSONUnauthorized Error

func (*GetSpaceEnablementsApplicationJSONUnauthorized) getSpaceEnablementsRes() {}

type GetSpaceEnablementsApplicationVndContentfulManagementV1JSONOK SpaceEnablement

func (*GetSpaceEnablementsApplicationVndContentfulManagementV1JSONOK) getSpaceEnablementsRes() {}

type GetSpaceEnablementsApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*GetSpaceEnablementsApplicationVndContentfulManagementV1JSONUnauthorized) getSpaceEnablementsRes() {
}

type GetWebhookDefinitionApplicationJSONUnauthorized Error

func (*GetWebhookDefinitionApplicationJSONUnauthorized) getWebhookDefinitionRes() {}

type GetWebhookDefinitionApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*GetWebhookDefinitionApplicationVndContentfulManagementV1JSONUnauthorized) getWebhookDefinitionRes() {
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *NilString) SetToNull() {
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/responses/no-content
type NoContent struct{}

func (*NoContent) deactivateContentTypeRes()               {}
func (*NoContent) deleteAppDefinitionRes()                 {}
func (*NoContent) deleteAppDefinitionResourceProviderRes() {}
func (*NoContent) deleteAppDefinitionResourceTypeRes()     {}
func (*NoContent) deleteAppInstallationRes()               {}
func (*NoContent) deleteContentTypeRes()                   {}
func (*NoContent) deleteDeliveryApiKeyRes()                {}
func (*NoContent) deleteExtensionRes()                     {}
func (*NoContent) deleteRoleRes()                          {}
func (*NoContent) deleteWebhookDefinitionRes()             {}

// NewOptApiKeyPreviewAPIKey returns new OptApiKeyPreviewAPIKey with value set to v.
func NewOptApiKeyPreviewAPIKey(v ApiKeyPreviewAPIKey) OptApiKeyPreviewAPIKey {
	return OptApiKeyPreviewAPIKey{
		Value: v,
		Set:   true,
	}
}

// OptApiKeyPreviewAPIKey is optional ApiKeyPreviewAPIKey.
type OptApiKeyPreviewAPIKey struct {
	Value ApiKeyPreviewAPIKey
	Set   bool
}

// IsSet returns true if OptApiKeyPreviewAPIKey was set.
func (o OptApiKeyPreviewAPIKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptApiKeyPreviewAPIKey) Reset() {
	var v ApiKeyPreviewAPIKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptApiKeyPreviewAPIKey) SetTo(v ApiKeyPreviewAPIKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptApiKeyPreviewAPIKey) Get() (v ApiKeyPreviewAPIKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptApiKeyPreviewAPIKey) Or(d ApiKeyPreviewAPIKey) ApiKeyPreviewAPIKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppBundleLink returns new OptAppBundleLink with value set to v.
func NewOptAppBundleLink(v AppBundleLink) OptAppBundleLink {
	return OptAppBundleLink{
		Value: v,
		Set:   true,
	}
}

// OptAppBundleLink is optional AppBundleLink.
type OptAppBundleLink struct {
	Value AppBundleLink
	Set   bool
}

// IsSet returns true if OptAppBundleLink was set.
func (o OptAppBundleLink) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppBundleLink) Reset() {
	var v AppBundleLink
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppBundleLink) SetTo(v AppBundleLink) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppBundleLink) Get() (v AppBundleLink, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppBundleLink) Or(d AppBundleLink) AppBundleLink {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppDefinitionFieldsLocationsItemFieldTypesItemItems returns new OptAppDefinitionFieldsLocationsItemFieldTypesItemItems with value set to v.
func NewOptAppDefinitionFieldsLocationsItemFieldTypesItemItems(v AppDefinitionFieldsLocationsItemFieldTypesItemItems) OptAppDefinitionFieldsLocationsItemFieldTypesItemItems {
	return OptAppDefinitionFieldsLocationsItemFieldTypesItemItems{
		Value: v,
		Set:   true,
	}
}

// OptAppDefinitionFieldsLocationsItemFieldTypesItemItems is optional AppDefinitionFieldsLocationsItemFieldTypesItemItems.
type OptAppDefinitionFieldsLocationsItemFieldTypesItemItems struct {
	Value AppDefinitionFieldsLocationsItemFieldTypesItemItems
	Set   bool
}

// IsSet returns true if OptAppDefinitionFieldsLocationsItemFieldTypesItemItems was set.
func (o OptAppDefinitionFieldsLocationsItemFieldTypesItemItems) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppDefinitionFieldsLocationsItemFieldTypesItemItems) Reset() {
	var v AppDefinitionFieldsLocationsItemFieldTypesItemItems
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppDefinitionFieldsLocationsItemFieldTypesItemItems) SetTo(v AppDefinitionFieldsLocationsItemFieldTypesItemItems) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppDefinitionFieldsLocationsItemFieldTypesItemItems) Get() (v AppDefinitionFieldsLocationsItemFieldTypesItemItems, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppDefinitionFieldsLocationsItemFieldTypesItemItems) Or(d AppDefinitionFieldsLocationsItemFieldTypesItemItems) AppDefinitionFieldsLocationsItemFieldTypesItemItems {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppDefinitionFieldsLocationsItemNavigationItem returns new OptAppDefinitionFieldsLocationsItemNavigationItem with value set to v.
func NewOptAppDefinitionFieldsLocationsItemNavigationItem(v AppDefinitionFieldsLocationsItemNavigationItem) OptAppDefinitionFieldsLocationsItemNavigationItem {
	return OptAppDefinitionFieldsLocationsItemNavigationItem{
		Value: v,
		Set:   true,
	}
}

// OptAppDefinitionFieldsLocationsItemNavigationItem is optional AppDefinitionFieldsLocationsItemNavigationItem.
type OptAppDefinitionFieldsLocationsItemNavigationItem struct {
	Value AppDefinitionFieldsLocationsItemNavigationItem
	Set   bool
}

// IsSet returns true if OptAppDefinitionFieldsLocationsItemNavigationItem was set.
func (o OptAppDefinitionFieldsLocationsItemNavigationItem) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppDefinitionFieldsLocationsItemNavigationItem) Reset() {
	var v AppDefinitionFieldsLocationsItemNavigationItem
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppDefinitionFieldsLocationsItemNavigationItem) SetTo(v AppDefinitionFieldsLocationsItemNavigationItem) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppDefinitionFieldsLocationsItemNavigationItem) Get() (v AppDefinitionFieldsLocationsItemNavigationItem, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppDefinitionFieldsLocationsItemNavigationItem) Or(d AppDefinitionFieldsLocationsItemNavigationItem) AppDefinitionFieldsLocationsItemNavigationItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppDefinitionLocationsItemFieldTypesItemItems returns new OptAppDefinitionLocationsItemFieldTypesItemItems with value set to v.
func NewOptAppDefinitionLocationsItemFieldTypesItemItems(v AppDefinitionLocationsItemFieldTypesItemItems) OptAppDefinitionLocationsItemFieldTypesItemItems {
	return OptAppDefinitionLocationsItemFieldTypesItemItems{
		Value: v,
		Set:   true,
	}
}

// OptAppDefinitionLocationsItemFieldTypesItemItems is optional AppDefinitionLocationsItemFieldTypesItemItems.
type OptAppDefinitionLocationsItemFieldTypesItemItems struct {
	Value AppDefinitionLocationsItemFieldTypesItemItems
	Set   bool
}

// IsSet returns true if OptAppDefinitionLocationsItemFieldTypesItemItems was set.
func (o OptAppDefinitionLocationsItemFieldTypesItemItems) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppDefinitionLocationsItemFieldTypesItemItems) Reset() {
	var v AppDefinitionLocationsItemFieldTypesItemItems
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppDefinitionLocationsItemFieldTypesItemItems) SetTo(v AppDefinitionLocationsItemFieldTypesItemItems) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppDefinitionLocationsItemFieldTypesItemItems) Get() (v AppDefinitionLocationsItemFieldTypesItemItems, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppDefinitionLocationsItemFieldTypesItemItems) Or(d AppDefinitionLocationsItemFieldTypesItemItems) AppDefinitionLocationsItemFieldTypesItemItems {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppDefinitionLocationsItemNavigationItem returns new OptAppDefinitionLocationsItemNavigationItem with value set to v.
func NewOptAppDefinitionLocationsItemNavigationItem(v AppDefinitionLocationsItemNavigationItem) OptAppDefinitionLocationsItemNavigationItem {
	return OptAppDefinitionLocationsItemNavigationItem{
		Value: v,
		Set:   true,
	}
}

// OptAppDefinitionLocationsItemNavigationItem is optional AppDefinitionLocationsItemNavigationItem.
type OptAppDefinitionLocationsItemNavigationItem struct {
	Value AppDefinitionLocationsItemNavigationItem
	Set   bool
}

// IsSet returns true if OptAppDefinitionLocationsItemNavigationItem was set.
func (o OptAppDefinitionLocationsItemNavigationItem) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppDefinitionLocationsItemNavigationItem) Reset() {
	var v AppDefinitionLocationsItemNavigationItem
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppDefinitionLocationsItemNavigationItem) SetTo(v AppDefinitionLocationsItemNavigationItem) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppDefinitionLocationsItemNavigationItem) Get() (v AppDefinitionLocationsItemNavigationItem, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppDefinitionLocationsItemNavigationItem) Or(d AppDefinitionLocationsItemNavigationItem) AppDefinitionLocationsItemNavigationItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppDefinitionParameterLabels returns new OptAppDefinitionParameterLabels with value set to v.
func NewOptAppDefinitionParameterLabels(v AppDefinitionParameterLabels) OptAppDefinitionParameterLabels {
	return OptAppDefinitionParameterLabels{
		Value: v,
		Set:   true,
	}
}

// OptAppDefinitionParameterLabels is optional AppDefinitionParameterLabels.
type OptAppDefinitionParameterLabels struct {
	Value AppDefinitionParameterLabels
	Set   bool
}

// IsSet returns true if OptAppDefinitionParameterLabels was set.
func (o OptAppDefinitionParameterLabels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppDefinitionParameterLabels) Reset() {
	var v AppDefinitionParameterLabels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppDefinitionParameterLabels) SetTo(v AppDefinitionParameterLabels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppDefinitionParameterLabels) Get() (v AppDefinitionParameterLabels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppDefinitionParameterLabels) Or(d AppDefinitionParameterLabels) AppDefinitionParameterLabels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppDefinitionParameters returns new OptAppDefinitionParameters with value set to v.
func NewOptAppDefinitionParameters(v AppDefinitionParameters) OptAppDefinitionParameters {
	return OptAppDefinitionParameters{
		Value: v,
		Set:   true,
	}
}

// OptAppDefinitionParameters is optional AppDefinitionParameters.
type OptAppDefinitionParameters struct {
	Value AppDefinitionParameters
	Set   bool
}

// IsSet returns true if OptAppDefinitionParameters was set.
func (o OptAppDefinitionParameters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppDefinitionParameters) Reset() {
	var v AppDefinitionParameters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppDefinitionParameters) SetTo(v AppDefinitionParameters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppDefinitionParameters) Get() (v AppDefinitionParameters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppDefinitionParameters) Or(d AppDefinitionParameters) AppDefinitionParameters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContentTypeFieldsItemItems returns new OptContentTypeFieldsItemItems with value set to v.
func NewOptContentTypeFieldsItemItems(v ContentTypeFieldsItemItems) OptContentTypeFieldsItemItems {
	return OptContentTypeFieldsItemItems{
		Value: v,
		Set:   true,
	}
}

// OptContentTypeFieldsItemItems is optional ContentTypeFieldsItemItems.
type OptContentTypeFieldsItemItems struct {
	Value ContentTypeFieldsItemItems
	Set   bool
}

// IsSet returns true if OptContentTypeFieldsItemItems was set.
func (o OptContentTypeFieldsItemItems) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContentTypeFieldsItemItems) Reset() {
	var v ContentTypeFieldsItemItems
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContentTypeFieldsItemItems) SetTo(v ContentTypeFieldsItemItems) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContentTypeFieldsItemItems) Get() (v ContentTypeFieldsItemItems, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContentTypeFieldsItemItems) Or(d ContentTypeFieldsItemItems) ContentTypeFieldsItemItems {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContentTypeMetadata returns new OptContentTypeMetadata with value set to v.
func NewOptContentTypeMetadata(v ContentTypeMetadata) OptContentTypeMetadata {
	return OptContentTypeMetadata{
		Value: v,
		Set:   true,
	}
}

// OptContentTypeMetadata is optional ContentTypeMetadata.
type OptContentTypeMetadata struct {
	Value ContentTypeMetadata
	Set   bool
}

// IsSet returns true if OptContentTypeMetadata was set.
func (o OptContentTypeMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContentTypeMetadata) Reset() {
	var v ContentTypeMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContentTypeMetadata) SetTo(v ContentTypeMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContentTypeMetadata) Get() (v ContentTypeMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContentTypeMetadata) Or(d ContentTypeMetadata) ContentTypeMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContentTypeRequestFieldsFieldsItemItems returns new OptContentTypeRequestFieldsFieldsItemItems with value set to v.
func NewOptContentTypeRequestFieldsFieldsItemItems(v ContentTypeRequestFieldsFieldsItemItems) OptContentTypeRequestFieldsFieldsItemItems {
	return OptContentTypeRequestFieldsFieldsItemItems{
		Value: v,
		Set:   true,
	}
}

// OptContentTypeRequestFieldsFieldsItemItems is optional ContentTypeRequestFieldsFieldsItemItems.
type OptContentTypeRequestFieldsFieldsItemItems struct {
	Value ContentTypeRequestFieldsFieldsItemItems
	Set   bool
}

// IsSet returns true if OptContentTypeRequestFieldsFieldsItemItems was set.
func (o OptContentTypeRequestFieldsFieldsItemItems) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContentTypeRequestFieldsFieldsItemItems) Reset() {
	var v ContentTypeRequestFieldsFieldsItemItems
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContentTypeRequestFieldsFieldsItemItems) SetTo(v ContentTypeRequestFieldsFieldsItemItems) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContentTypeRequestFieldsFieldsItemItems) Get() (v ContentTypeRequestFieldsFieldsItemItems, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContentTypeRequestFieldsFieldsItemItems) Or(d ContentTypeRequestFieldsFieldsItemItems) ContentTypeRequestFieldsFieldsItemItems {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExtensionExtensionFieldTypesItemItems returns new OptExtensionExtensionFieldTypesItemItems with value set to v.
func NewOptExtensionExtensionFieldTypesItemItems(v ExtensionExtensionFieldTypesItemItems) OptExtensionExtensionFieldTypesItemItems {
	return OptExtensionExtensionFieldTypesItemItems{
		Value: v,
		Set:   true,
	}
}

// OptExtensionExtensionFieldTypesItemItems is optional ExtensionExtensionFieldTypesItemItems.
type OptExtensionExtensionFieldTypesItemItems struct {
	Value ExtensionExtensionFieldTypesItemItems
	Set   bool
}

// IsSet returns true if OptExtensionExtensionFieldTypesItemItems was set.
func (o OptExtensionExtensionFieldTypesItemItems) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExtensionExtensionFieldTypesItemItems) Reset() {
	var v ExtensionExtensionFieldTypesItemItems
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExtensionExtensionFieldTypesItemItems) SetTo(v ExtensionExtensionFieldTypesItemItems) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExtensionExtensionFieldTypesItemItems) Get() (v ExtensionExtensionFieldTypesItemItems, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExtensionExtensionFieldTypesItemItems) Or(d ExtensionExtensionFieldTypesItemItems) ExtensionExtensionFieldTypesItemItems {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExtensionFieldsExtensionFieldTypesItemItems returns new OptExtensionFieldsExtensionFieldTypesItemItems with value set to v.
func NewOptExtensionFieldsExtensionFieldTypesItemItems(v ExtensionFieldsExtensionFieldTypesItemItems) OptExtensionFieldsExtensionFieldTypesItemItems {
	return OptExtensionFieldsExtensionFieldTypesItemItems{
		Value: v,
		Set:   true,
	}
}

// OptExtensionFieldsExtensionFieldTypesItemItems is optional ExtensionFieldsExtensionFieldTypesItemItems.
type OptExtensionFieldsExtensionFieldTypesItemItems struct {
	Value ExtensionFieldsExtensionFieldTypesItemItems
	Set   bool
}

// IsSet returns true if OptExtensionFieldsExtensionFieldTypesItemItems was set.
func (o OptExtensionFieldsExtensionFieldTypesItemItems) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExtensionFieldsExtensionFieldTypesItemItems) Reset() {
	var v ExtensionFieldsExtensionFieldTypesItemItems
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExtensionFieldsExtensionFieldTypesItemItems) SetTo(v ExtensionFieldsExtensionFieldTypesItemItems) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExtensionFieldsExtensionFieldTypesItemItems) Get() (v ExtensionFieldsExtensionFieldTypesItemItems, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExtensionFieldsExtensionFieldTypesItemItems) Or(d ExtensionFieldsExtensionFieldTypesItemItems) ExtensionFieldsExtensionFieldTypesItemItems {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceControlsItemArray returns new OptNilEditorInterfaceControlsItemArray with value set to v.
func NewOptNilEditorInterfaceControlsItemArray(v []EditorInterfaceControlsItem) OptNilEditorInterfaceControlsItemArray {
	return OptNilEditorInterfaceControlsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceControlsItemArray is optional nullable []EditorInterfaceControlsItem.
type OptNilEditorInterfaceControlsItemArray struct {
	Value []EditorInterfaceControlsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceControlsItemArray was set.
func (o OptNilEditorInterfaceControlsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceControlsItemArray) Reset() {
	var v []EditorInterfaceControlsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceControlsItemArray) SetTo(v []EditorInterfaceControlsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilEditorInterfaceControlsItemArray) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilEditorInterfaceControlsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceControlsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceControlsItemArray) Get() (v []EditorInterfaceControlsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceControlsItemArray) Or(d []EditorInterfaceControlsItem) []EditorInterfaceControlsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceEditorLayoutItemArray returns new OptNilEditorInterfaceEditorLayoutItemArray with value set to v.
func NewOptNilEditorInterfaceEditorLayoutItemArray(v []EditorInterfaceEditorLayoutItem) OptNilEditorInterfaceEditorLayoutItemArray {
	return OptNilEditorInterfaceEditorLayoutItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceEditorLayoutItemArray is optional nullable []EditorInterfaceEditorLayoutItem.
type OptNilEditorInterfaceEditorLayoutItemArray struct {
	Value []EditorInterfaceEditorLayoutItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceEditorLayoutItemArray was set.
func (o OptNilEditorInterfaceEditorLayoutItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceEditorLayoutItemArray) Reset() {
	var v []EditorInterfaceEditorLayoutItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceEditorLayoutItemArray) SetTo(v []EditorInterfaceEditorLayoutItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilEditorInterfaceEditorLayoutItemArray) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilEditorInterfaceEditorLayoutItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceEditorLayoutItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceEditorLayoutItemArray) Get() (v []EditorInterfaceEditorLayoutItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceEditorLayoutItemArray) Or(d []EditorInterfaceEditorLayoutItem) []EditorInterfaceEditorLayoutItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceFieldsControlsItemArray returns new OptNilEditorInterfaceFieldsControlsItemArray with value set to v.
func NewOptNilEditorInterfaceFieldsControlsItemArray(v []EditorInterfaceFieldsControlsItem) OptNilEditorInterfaceFieldsControlsItemArray {
	return OptNilEditorInterfaceFieldsControlsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceFieldsControlsItemArray is optional nullable []EditorInterfaceFieldsControlsItem.
type OptNilEditorInterfaceFieldsControlsItemArray struct {
	Value []EditorInterfaceFieldsControlsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceFieldsControlsItemArray was set.
func (o OptNilEditorInterfaceFieldsControlsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceFieldsControlsItemArray) Reset() {
	var v []EditorInterfaceFieldsControlsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceFieldsControlsItemArray) SetTo(v []EditorInterfaceFieldsControlsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilEditorInterfaceFieldsControlsItemArray) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilEditorInterfaceFieldsControlsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceFieldsControlsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceFieldsControlsItemArray) Get() (v []EditorInterfaceFieldsControlsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceFieldsControlsItemArray) Or(d []EditorInterfaceFieldsControlsItem) []EditorInterfaceFieldsControlsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceFieldsGroupControlsItemArray returns new OptNilEditorInterfaceFieldsGroupControlsItemArray with value set to v.
func NewOptNilEditorInterfaceFieldsGroupControlsItemArray(v []EditorInterfaceFieldsGroupControlsItem) OptNilEditorInterfaceFieldsGroupControlsItemArray {
	return OptNilEditorInterfaceFieldsGroupControlsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceFieldsGroupControlsItemArray is optional nullable []EditorInterfaceFieldsGroupControlsItem.
type OptNilEditorInterfaceFieldsGroupControlsItemArray struct {
	Value []EditorInterfaceFieldsGroupControlsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceFieldsGroupControlsItemArray was set.
func (o OptNilEditorInterfaceFieldsGroupControlsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceFieldsGroupControlsItemArray) Reset() {
	var v []EditorInterfaceFieldsGroupControlsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceFieldsGroupControlsItemArray) SetTo(v []EditorInterfaceFieldsGroupControlsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilEditorInterfaceFieldsGroupControlsItemArray) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilEditorInterfaceFieldsGroupControlsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceFieldsGroupControlsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceFieldsGroupControlsItemArray) Get() (v []EditorInterfaceFieldsGroupControlsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceFieldsGroupControlsItemArray) Or(d []EditorInterfaceFieldsGroupControlsItem) []EditorInterfaceFieldsGroupControlsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceFieldsSidebarItemArray returns new OptNilEditorInterfaceFieldsSidebarItemArray with value set to v.
func NewOptNilEditorInterfaceFieldsSidebarItemArray(v []EditorInterfaceFieldsSidebarItem) OptNilEditorInterfaceFieldsSidebarItemArray {
	return OptNilEditorInterfaceFieldsSidebarItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceFieldsSidebarItemArray is optional nullable []EditorInterfaceFieldsSidebarItem.
type OptNilEditorInterfaceFieldsSidebarItemArray struct {
	Value []EditorInterfaceFieldsSidebarItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceFieldsSidebarItemArray was set.
func (o OptNilEditorInterfaceFieldsSidebarItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceFieldsSidebarItemArray) Reset() {
	var v []EditorInterfaceFieldsSidebarItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceFieldsSidebarItemArray) SetTo(v []EditorInterfaceFieldsSidebarItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilEditorInterfaceFieldsSidebarItemArray) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilEditorInterfaceFieldsSidebarItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceFieldsSidebarItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceFieldsSidebarItemArray) Get() (v []EditorInterfaceFieldsSidebarItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceFieldsSidebarItemArray) Or(d []EditorInterfaceFieldsSidebarItem) []EditorInterfaceFieldsSidebarItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceGroupControlsItemArray returns new OptNilEditorInterfaceGroupControlsItemArray with value set to v.
func NewOptNilEditorInterfaceGroupControlsItemArray(v []EditorInterfaceGroupControlsItem) OptNilEditorInterfaceGroupControlsItemArray {
	return OptNilEditorInterfaceGroupControlsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceGroupControlsItemArray is optional nullable []EditorInterfaceGroupControlsItem.
type OptNilEditorInterfaceGroupControlsItemArray struct {
	Value []EditorInterfaceGroupControlsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceGroupControlsItemArray was set.
func (o OptNilEditorInterfaceGroupControlsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceGroupControlsItemArray) Reset() {
	var v []EditorInterfaceGroupControlsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceGroupControlsItemArray) SetTo(v []EditorInterfaceGroupControlsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilEditorInterfaceGroupControlsItemArray) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilEditorInterfaceGroupControlsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceGroupControlsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceGroupControlsItemArray) Get() (v []EditorInterfaceGroupControlsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceGroupControlsItemArray) Or(d []EditorInterfaceGroupControlsItem) []EditorInterfaceGroupControlsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditorInterfaceSidebarItemArray returns new OptNilEditorInterfaceSidebarItemArray with value set to v.
func NewOptNilEditorInterfaceSidebarItemArray(v []EditorInterfaceSidebarItem) OptNilEditorInterfaceSidebarItemArray {
	return OptNilEditorInterfaceSidebarItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEditorInterfaceSidebarItemArray is optional nullable []EditorInterfaceSidebarItem.
type OptNilEditorInterfaceSidebarItemArray struct {
	Value []EditorInterfaceSidebarItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditorInterfaceSidebarItemArray was set.
func (o OptNilEditorInterfaceSidebarItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditorInterfaceSidebarItemArray) Reset() {
	var v []EditorInterfaceSidebarItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditorInterfaceSidebarItemArray) SetTo(v []EditorInterfaceSidebarItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilEditorInterfaceSidebarItemArray) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilEditorInterfaceSidebarItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []EditorInterfaceSidebarItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditorInterfaceSidebarItemArray) Get() (v []EditorInterfaceSidebarItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditorInterfaceSidebarItemArray) Or(d []EditorInterfaceSidebarItem) []EditorInterfaceSidebarItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilInt) SetToNull() {
	o.Set = true
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilResourceLinkArray returns new OptNilResourceLinkArray with value set to v.
func NewOptNilResourceLinkArray(v []ResourceLink) OptNilResourceLinkArray {
	return OptNilResourceLinkArray{
		Value: v,
		Set:   true,
	}
}

// OptNilResourceLinkArray is optional nullable []ResourceLink.
type OptNilResourceLinkArray struct {
	Value []ResourceLink
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilResourceLinkArray was set.
func (o OptNilResourceLinkArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilResourceLinkArray) Reset() {
	var v []ResourceLink
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilResourceLinkArray) SetTo(v []ResourceLink) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilResourceLinkArray) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilResourceLinkArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []ResourceLink
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilResourceLinkArray) Get() (v []ResourceLink, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilResourceLinkArray) Or(d []ResourceLink) []ResourceLink {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookDefinitionFieldsTransformation returns new OptNilWebhookDefinitionFieldsTransformation with value set to v.
func NewOptNilWebhookDefinitionFieldsTransformation(v WebhookDefinitionFieldsTransformation) OptNilWebhookDefinitionFieldsTransformation {
	return OptNilWebhookDefinitionFieldsTransformation{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookDefinitionFieldsTransformation is optional nullable WebhookDefinitionFieldsTransformation.
type OptNilWebhookDefinitionFieldsTransformation struct {
	Value WebhookDefinitionFieldsTransformation
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookDefinitionFieldsTransformation was set.
func (o OptNilWebhookDefinitionFieldsTransformation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookDefinitionFieldsTransformation) Reset() {
	var v WebhookDefinitionFieldsTransformation
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookDefinitionFieldsTransformation) SetTo(v WebhookDefinitionFieldsTransformation) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilWebhookDefinitionFieldsTransformation) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilWebhookDefinitionFieldsTransformation) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookDefinitionFieldsTransformation
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookDefinitionFieldsTransformation) Get() (v WebhookDefinitionFieldsTransformation, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookDefinitionFieldsTransformation) Or(d WebhookDefinitionFieldsTransformation) WebhookDefinitionFieldsTransformation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookDefinitionFilterArray returns new OptNilWebhookDefinitionFilterArray with value set to v.
func NewOptNilWebhookDefinitionFilterArray(v []WebhookDefinitionFilter) OptNilWebhookDefinitionFilterArray {
	return OptNilWebhookDefinitionFilterArray{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookDefinitionFilterArray is optional nullable []WebhookDefinitionFilter.
type OptNilWebhookDefinitionFilterArray struct {
	Value []WebhookDefinitionFilter
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookDefinitionFilterArray was set.
func (o OptNilWebhookDefinitionFilterArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookDefinitionFilterArray) Reset() {
	var v []WebhookDefinitionFilter
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookDefinitionFilterArray) SetTo(v []WebhookDefinitionFilter) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilWebhookDefinitionFilterArray) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilWebhookDefinitionFilterArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []WebhookDefinitionFilter
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookDefinitionFilterArray) Get() (v []WebhookDefinitionFilter, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookDefinitionFilterArray) Or(d []WebhookDefinitionFilter) []WebhookDefinitionFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookDefinitionTransformation returns new OptNilWebhookDefinitionTransformation with value set to v.
func NewOptNilWebhookDefinitionTransformation(v WebhookDefinitionTransformation) OptNilWebhookDefinitionTransformation {
	return OptNilWebhookDefinitionTransformation{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookDefinitionTransformation is optional nullable WebhookDefinitionTransformation.
type OptNilWebhookDefinitionTransformation struct {
	Value WebhookDefinitionTransformation
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookDefinitionTransformation was set.
func (o OptNilWebhookDefinitionTransformation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookDefinitionTransformation) Reset() {
	var v WebhookDefinitionTransformation
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookDefinitionTransformation) SetTo(v WebhookDefinitionTransformation) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilWebhookDefinitionTransformation) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilWebhookDefinitionTransformation) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookDefinitionTransformation
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookDefinitionTransformation) Get() (v WebhookDefinitionTransformation, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookDefinitionTransformation) Or(d WebhookDefinitionTransformation) WebhookDefinitionTransformation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResourceTypeDefaultFieldMappingBadge returns new OptResourceTypeDefaultFieldMappingBadge with value set to v.
func NewOptResourceTypeDefaultFieldMappingBadge(v ResourceTypeDefaultFieldMappingBadge) OptResourceTypeDefaultFieldMappingBadge {
	return OptResourceTypeDefaultFieldMappingBadge{
		Value: v,
		Set:   true,
	}
}

// OptResourceTypeDefaultFieldMappingBadge is optional ResourceTypeDefaultFieldMappingBadge.
type OptResourceTypeDefaultFieldMappingBadge struct {
	Value ResourceTypeDefaultFieldMappingBadge
	Set   bool
}

// IsSet returns true if OptResourceTypeDefaultFieldMappingBadge was set.
func (o OptResourceTypeDefaultFieldMappingBadge) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResourceTypeDefaultFieldMappingBadge) Reset() {
	var v ResourceTypeDefaultFieldMappingBadge
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResourceTypeDefaultFieldMappingBadge) SetTo(v ResourceTypeDefaultFieldMappingBadge) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResourceTypeDefaultFieldMappingBadge) Get() (v ResourceTypeDefaultFieldMappingBadge, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResourceTypeDefaultFieldMappingBadge) Or(d ResourceTypeDefaultFieldMappingBadge) ResourceTypeDefaultFieldMappingBadge {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResourceTypeDefaultFieldMappingImage returns new OptResourceTypeDefaultFieldMappingImage with value set to v.
func NewOptResourceTypeDefaultFieldMappingImage(v ResourceTypeDefaultFieldMappingImage) OptResourceTypeDefaultFieldMappingImage {
	return OptResourceTypeDefaultFieldMappingImage{
		Value: v,
		Set:   true,
	}
}

// OptResourceTypeDefaultFieldMappingImage is optional ResourceTypeDefaultFieldMappingImage.
type OptResourceTypeDefaultFieldMappingImage struct {
	Value ResourceTypeDefaultFieldMappingImage
	Set   bool
}

// IsSet returns true if OptResourceTypeDefaultFieldMappingImage was set.
func (o OptResourceTypeDefaultFieldMappingImage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResourceTypeDefaultFieldMappingImage) Reset() {
	var v ResourceTypeDefaultFieldMappingImage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResourceTypeDefaultFieldMappingImage) SetTo(v ResourceTypeDefaultFieldMappingImage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResourceTypeDefaultFieldMappingImage) Get() (v ResourceTypeDefaultFieldMappingImage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResourceTypeDefaultFieldMappingImage) Or(d ResourceTypeDefaultFieldMappingImage) ResourceTypeDefaultFieldMappingImage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSpaceEnablementField returns new OptSpaceEnablementField with value set to v.
func NewOptSpaceEnablementField(v SpaceEnablementField) OptSpaceEnablementField {
	return OptSpaceEnablementField{
		Value: v,
		Set:   true,
	}
}

// OptSpaceEnablementField is optional SpaceEnablementField.
type OptSpaceEnablementField struct {
	Value SpaceEnablementField
	Set   bool
}

// IsSet returns true if OptSpaceEnablementField was set.
func (o OptSpaceEnablementField) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSpaceEnablementField) Reset() {
	var v SpaceEnablementField
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSpaceEnablementField) SetTo(v SpaceEnablementField) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSpaceEnablementField) Get() (v SpaceEnablementField, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSpaceEnablementField) Or(d SpaceEnablementField) SpaceEnablementField {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookDefinitionFilterNot returns new OptWebhookDefinitionFilterNot with value set to v.
func NewOptWebhookDefinitionFilterNot(v WebhookDefinitionFilterNot) OptWebhookDefinitionFilterNot {
	return OptWebhookDefinitionFilterNot{
		Value: v,
		Set:   true,
	}
}

// OptWebhookDefinitionFilterNot is optional WebhookDefinitionFilterNot.
type OptWebhookDefinitionFilterNot struct {
	Value WebhookDefinitionFilterNot
	Set   bool
}

// IsSet returns true if OptWebhookDefinitionFilterNot was set.
func (o OptWebhookDefinitionFilterNot) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookDefinitionFilterNot) Reset() {
	var v WebhookDefinitionFilterNot
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookDefinitionFilterNot) SetTo(v WebhookDefinitionFilterNot) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookDefinitionFilterNot) Get() (v WebhookDefinitionFilterNot, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookDefinitionFilterNot) Or(d WebhookDefinitionFilterNot) WebhookDefinitionFilterNot {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/OrganizationLink
type OrganizationLink struct {
	Sys OrganizationLinkSys `json:"sys"`
}

// GetSys returns the value of Sys.
func (s *OrganizationLink) GetSys() OrganizationLinkSys {
	return s.Sys
}

// SetSys sets the value of Sys.
func (s *OrganizationLink) SetSys(val OrganizationLinkSys) {
	s.Sys = val
}

// Merged schema.
type OrganizationLinkSys struct {
	// Merged property.
	Type OrganizationLinkSysType `json:"type"`
	ID   string                  `json:"id"`
	// Merged property.
	LinkType OrganizationLinkSysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *OrganizationLinkSys) GetType() OrganizationLinkSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *OrganizationLinkSys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *OrganizationLinkSys) GetLinkType() OrganizationLinkSysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *OrganizationLinkSys) SetType(val OrganizationLinkSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *OrganizationLinkSys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *OrganizationLinkSys) SetLinkType(val OrganizationLinkSysLinkType) {
	s.LinkType = val
}

// Merged schema.
type OrganizationLinkSysLinkType string

const (
	OrganizationLinkSysLinkTypeOrganization OrganizationLinkSysLinkType = "Organization"
)

// AllValues returns all OrganizationLinkSysLinkType values.
func (OrganizationLinkSysLinkType) AllValues() []OrganizationLinkSysLinkType {
	return []OrganizationLinkSysLinkType{
		OrganizationLinkSysLinkTypeOrganization,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrganizationLinkSysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case OrganizationLinkSysLinkTypeOrganization:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrganizationLinkSysLinkType) UnmarshalText(data []byte) error {
	switch OrganizationLinkSysLinkType(data) {
	case OrganizationLinkSysLinkTypeOrganization:
		*s = OrganizationLinkSysLinkTypeOrganization
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type OrganizationLinkSysType string

const (
	OrganizationLinkSysTypeLink OrganizationLinkSysType = "Link"
)

// AllValues returns all OrganizationLinkSysType values.
func (OrganizationLinkSysType) AllValues() []OrganizationLinkSysType {
	return []OrganizationLinkSysType{
		OrganizationLinkSysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrganizationLinkSysType) MarshalText() ([]byte, error) {
	switch s {
	case OrganizationLinkSysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrganizationLinkSysType) UnmarshalText(data []byte) error {
	switch OrganizationLinkSysType(data) {
	case OrganizationLinkSysTypeLink:
		*s = OrganizationLinkSysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/PersonalAccessToken
type PersonalAccessToken struct {
	Sys       PersonalAccessTokenSys `json:"sys"`
	Name      string                 `json:"name"`
	Scopes    []string               `json:"scopes"`
	Token     OptString              `json:"token"`
	RevokedAt OptNilDateTime         `json:"revokedAt"`
}

// GetSys returns the value of Sys.
func (s *PersonalAccessToken) GetSys() PersonalAccessTokenSys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *PersonalAccessToken) GetName() string {
	return s.Name
}

// GetScopes returns the value of Scopes.
func (s *PersonalAccessToken) GetScopes() []string {
	return s.Scopes
}

// GetToken returns the value of Token.
func (s *PersonalAccessToken) GetToken() OptString {
	return s.Token
}

// GetRevokedAt returns the value of RevokedAt.
func (s *PersonalAccessToken) GetRevokedAt() OptNilDateTime {
	return s.RevokedAt
}

// SetSys sets the value of Sys.
func (s *PersonalAccessToken) SetSys(val PersonalAccessTokenSys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *PersonalAccessToken) SetName(val string) {
	s.Name = val
}

// SetScopes sets the value of Scopes.
func (s *PersonalAccessToken) SetScopes(val []string) {
	s.Scopes = val
}

// SetToken sets the value of Token.
func (s *PersonalAccessToken) SetToken(val OptString) {
	s.Token = val
}

// SetRevokedAt sets the value of RevokedAt.
func (s *PersonalAccessToken) SetRevokedAt(val OptNilDateTime) {
	s.RevokedAt = val
}

func (*PersonalAccessToken) getPersonalAccessTokenRes() {}

// Ref: #/components/schemas/PersonalAccessTokenRequestFields
type PersonalAccessTokenRequestFields struct {
	Name      string    `json:"name"`
	Scopes    []string  `json:"scopes"`
	ExpiresIn OptNilInt `json:"expiresIn"`
}

// GetName returns the value of Name.
func (s *PersonalAccessTokenRequestFields) GetName() string {
	return s.Name
}

// GetScopes returns the value of Scopes.
func (s *PersonalAccessTokenRequestFields) GetScopes() []string {
	return s.Scopes
}

// GetExpiresIn returns the value of ExpiresIn.
func (s *PersonalAccessTokenRequestFields) GetExpiresIn() OptNilInt {
	return s.ExpiresIn
}

// SetName sets the value of Name.
func (s *PersonalAccessTokenRequestFields) SetName(val string) {
	s.Name = val
}

// SetScopes sets the value of Scopes.
func (s *PersonalAccessTokenRequestFields) SetScopes(val []string) {
	s.Scopes = val
}

// SetExpiresIn sets the value of ExpiresIn.
func (s *PersonalAccessTokenRequestFields) SetExpiresIn(val OptNilInt) {
	s.ExpiresIn = val
}

// PersonalAccessTokenStatusCode wraps PersonalAccessToken with StatusCode.
type PersonalAccessTokenStatusCode struct {
	StatusCode int
	Response   PersonalAccessToken
}

// GetStatusCode returns the value of StatusCode.
func (s *PersonalAccessTokenStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *PersonalAccessTokenStatusCode) GetResponse() PersonalAccessToken {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *PersonalAccessTokenStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *PersonalAccessTokenStatusCode) SetResponse(val PersonalAccessToken) {
	s.Response = val
}

func (*PersonalAccessTokenStatusCode) createPersonalAccessTokenRes() {}
func (*PersonalAccessTokenStatusCode) revokePersonalAccessTokenRes() {}

// Merged schema.
// Ref: #/components/schemas/PersonalAccessTokenSys
type PersonalAccessTokenSys struct {
	// Merged property.
	Type          PersonalAccessTokenSysType `json:"type"`
	ID            string                     `json:"id"`
	ExpiresAt     OptNilDateTime             `json:"expiresAt"`
	LastUsedAt    OptNilDateTime             `json:"lastUsedAt"`
	RedactedValue OptString                  `json:"redactedValue"`
}

// GetType returns the value of Type.
func (s *PersonalAccessTokenSys) GetType() PersonalAccessTokenSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *PersonalAccessTokenSys) GetID() string {
	return s.ID
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *PersonalAccessTokenSys) GetExpiresAt() OptNilDateTime {
	return s.ExpiresAt
}

// GetLastUsedAt returns the value of LastUsedAt.
func (s *PersonalAccessTokenSys) GetLastUsedAt() OptNilDateTime {
	return s.LastUsedAt
}

// GetRedactedValue returns the value of RedactedValue.
func (s *PersonalAccessTokenSys) GetRedactedValue() OptString {
	return s.RedactedValue
}

// SetType sets the value of Type.
func (s *PersonalAccessTokenSys) SetType(val PersonalAccessTokenSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *PersonalAccessTokenSys) SetID(val string) {
	s.ID = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *PersonalAccessTokenSys) SetExpiresAt(val OptNilDateTime) {
	s.ExpiresAt = val
}

// SetLastUsedAt sets the value of LastUsedAt.
func (s *PersonalAccessTokenSys) SetLastUsedAt(val OptNilDateTime) {
	s.LastUsedAt = val
}

// SetRedactedValue sets the value of RedactedValue.
func (s *PersonalAccessTokenSys) SetRedactedValue(val OptString) {
	s.RedactedValue = val
}

// Merged schema.
type PersonalAccessTokenSysType string

const (
	PersonalAccessTokenSysTypePersonalAccessToken PersonalAccessTokenSysType = "PersonalAccessToken"
)

// AllValues returns all PersonalAccessTokenSysType values.
func (PersonalAccessTokenSysType) AllValues() []PersonalAccessTokenSysType {
	return []PersonalAccessTokenSysType{
		PersonalAccessTokenSysTypePersonalAccessToken,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PersonalAccessTokenSysType) MarshalText() ([]byte, error) {
	switch s {
	case PersonalAccessTokenSysTypePersonalAccessToken:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PersonalAccessTokenSysType) UnmarshalText(data []byte) error {
	switch PersonalAccessTokenSysType(data) {
	case PersonalAccessTokenSysTypePersonalAccessToken:
		*s = PersonalAccessTokenSysTypePersonalAccessToken
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/PreviewApiKey
type PreviewApiKey struct {
	Sys          PreviewApiKeySys  `json:"sys"`
	Name         string            `json:"name"`
	Description  OptNilString      `json:"description"`
	AccessToken  string            `json:"accessToken"`
	Environments []EnvironmentLink `json:"environments"`
}

// GetSys returns the value of Sys.
func (s *PreviewApiKey) GetSys() PreviewApiKeySys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *PreviewApiKey) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *PreviewApiKey) GetDescription() OptNilString {
	return s.Description
}

// GetAccessToken returns the value of AccessToken.
func (s *PreviewApiKey) GetAccessToken() string {
	return s.AccessToken
}

// GetEnvironments returns the value of Environments.
func (s *PreviewApiKey) GetEnvironments() []EnvironmentLink {
	return s.Environments
}

// SetSys sets the value of Sys.
func (s *PreviewApiKey) SetSys(val PreviewApiKeySys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *PreviewApiKey) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *PreviewApiKey) SetDescription(val OptNilString) {
	s.Description = val
}

// SetAccessToken sets the value of AccessToken.
func (s *PreviewApiKey) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetEnvironments sets the value of Environments.
func (s *PreviewApiKey) SetEnvironments(val []EnvironmentLink) {
	s.Environments = val
}

func (*PreviewApiKey) getPreviewApiKeyRes() {}

// Merged schema.
// Ref: #/components/schemas/PreviewApiKeySys
type PreviewApiKeySys struct {
	// Merged property.
	Type      PreviewApiKeySysType `json:"type"`
	Space     SpaceLink            `json:"space"`
	ID        string               `json:"id"`
	Version   int                  `json:"version"`
	CreatedAt OptDateTime          `json:"createdAt"`
	UpdatedAt OptDateTime          `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *PreviewApiKeySys) GetType() PreviewApiKeySysType {
	return s.Type
}

// GetSpace returns the value of Space.
func (s *PreviewApiKeySys) GetSpace() SpaceLink {
	return s.Space
}

// GetID returns the value of ID.
func (s *PreviewApiKeySys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *PreviewApiKeySys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PreviewApiKeySys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PreviewApiKeySys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *PreviewApiKeySys) SetType(val PreviewApiKeySysType) {
	s.Type = val
}

// SetSpace sets the value of Space.
func (s *PreviewApiKeySys) SetSpace(val SpaceLink) {
	s.Space = val
}

// SetID sets the value of ID.
func (s *PreviewApiKeySys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *PreviewApiKeySys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PreviewApiKeySys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PreviewApiKeySys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type PreviewApiKeySysType string

const (
	PreviewApiKeySysTypePreviewApiKey PreviewApiKeySysType = "PreviewApiKey"
)

// AllValues returns all PreviewApiKeySysType values.
func (PreviewApiKeySysType) AllValues() []PreviewApiKeySysType {
	return []PreviewApiKeySysType{
		PreviewApiKeySysTypePreviewApiKey,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PreviewApiKeySysType) MarshalText() ([]byte, error) {
	switch s {
	case PreviewApiKeySysTypePreviewApiKey:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PreviewApiKeySysType) UnmarshalText(data []byte) error {
	switch PreviewApiKeySysType(data) {
	case PreviewApiKeySysTypePreviewApiKey:
		*s = PreviewApiKeySysTypePreviewApiKey
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PutAppDefinitionApplicationJSONUnauthorized Error

func (*PutAppDefinitionApplicationJSONUnauthorized) putAppDefinitionRes() {}

type PutAppDefinitionApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*PutAppDefinitionApplicationVndContentfulManagementV1JSONUnauthorized) putAppDefinitionRes() {}

type PutAppDefinitionResourceProviderApplicationJSONUnauthorized Error

func (*PutAppDefinitionResourceProviderApplicationJSONUnauthorized) putAppDefinitionResourceProviderRes() {
}

type PutAppDefinitionResourceProviderApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*PutAppDefinitionResourceProviderApplicationVndContentfulManagementV1JSONUnauthorized) putAppDefinitionResourceProviderRes() {
}

type PutAppDefinitionResourceTypeApplicationJSONUnauthorized Error

func (*PutAppDefinitionResourceTypeApplicationJSONUnauthorized) putAppDefinitionResourceTypeRes() {}

type PutAppDefinitionResourceTypeApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*PutAppDefinitionResourceTypeApplicationVndContentfulManagementV1JSONUnauthorized) putAppDefinitionResourceTypeRes() {
}

type PutAppInstallationApplicationJSONUnauthorized Error

func (*PutAppInstallationApplicationJSONUnauthorized) putAppInstallationRes() {}

type PutAppInstallationApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*PutAppInstallationApplicationVndContentfulManagementV1JSONUnauthorized) putAppInstallationRes() {
}

type PutContentTypeApplicationJSONUnauthorized Error

func (*PutContentTypeApplicationJSONUnauthorized) putContentTypeRes() {}

type PutContentTypeApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*PutContentTypeApplicationVndContentfulManagementV1JSONUnauthorized) putContentTypeRes() {}

type PutEditorInterfaceApplicationJSONUnauthorized Error

func (*PutEditorInterfaceApplicationJSONUnauthorized) putEditorInterfaceRes() {}

type PutEditorInterfaceApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*PutEditorInterfaceApplicationVndContentfulManagementV1JSONUnauthorized) putEditorInterfaceRes() {
}

type PutExtensionApplicationJSONUnauthorized Error

func (*PutExtensionApplicationJSONUnauthorized) putExtensionRes() {}

type PutExtensionApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*PutExtensionApplicationVndContentfulManagementV1JSONUnauthorized) putExtensionRes() {}

type PutSpaceEnablementsApplicationJSONUnauthorized Error

func (*PutSpaceEnablementsApplicationJSONUnauthorized) putSpaceEnablementsRes() {}

type PutSpaceEnablementsApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*PutSpaceEnablementsApplicationVndContentfulManagementV1JSONUnauthorized) putSpaceEnablementsRes() {
}

// Ref: #/components/schemas/ResourceLink
// ResourceLink represents sum type.
type ResourceLink struct {
	Type                        ResourceLinkType // switch on this field
	ContentfulEntryResourceLink ContentfulEntryResourceLink
	ExternalResourceLink        ExternalResourceLink
}

// ResourceLinkType is oneOf type of ResourceLink.
type ResourceLinkType string

// Possible values for ResourceLinkType.
const (
	ContentfulEntryResourceLinkResourceLink ResourceLinkType = "ContentfulEntryResourceLink"
	ExternalResourceLinkResourceLink        ResourceLinkType = "ExternalResourceLink"
)

// IsContentfulEntryResourceLink reports whether ResourceLink is ContentfulEntryResourceLink.
func (s ResourceLink) IsContentfulEntryResourceLink() bool {
	return s.Type == ContentfulEntryResourceLinkResourceLink
}

// IsExternalResourceLink reports whether ResourceLink is ExternalResourceLink.
func (s ResourceLink) IsExternalResourceLink() bool {
	return s.Type == ExternalResourceLinkResourceLink
}

// SetContentfulEntryResourceLink sets ResourceLink to ContentfulEntryResourceLink.
func (s *ResourceLink) SetContentfulEntryResourceLink(v ContentfulEntryResourceLink) {
	s.Type = ContentfulEntryResourceLinkResourceLink
	s.ContentfulEntryResourceLink = v
}

// GetContentfulEntryResourceLink returns ContentfulEntryResourceLink and true boolean if ResourceLink is ContentfulEntryResourceLink.
func (s ResourceLink) GetContentfulEntryResourceLink() (v ContentfulEntryResourceLink, ok bool) {
	if !s.IsContentfulEntryResourceLink() {
		return v, false
	}
	return s.ContentfulEntryResourceLink, true
}

// NewContentfulEntryResourceLinkResourceLink returns new ResourceLink from ContentfulEntryResourceLink.
func NewContentfulEntryResourceLinkResourceLink(v ContentfulEntryResourceLink) ResourceLink {
	var s ResourceLink
	s.SetContentfulEntryResourceLink(v)
	return s
}

// SetExternalResourceLink sets ResourceLink to ExternalResourceLink.
func (s *ResourceLink) SetExternalResourceLink(v ExternalResourceLink) {
	s.Type = ExternalResourceLinkResourceLink
	s.ExternalResourceLink = v
}

// GetExternalResourceLink returns ExternalResourceLink and true boolean if ResourceLink is ExternalResourceLink.
func (s ResourceLink) GetExternalResourceLink() (v ExternalResourceLink, ok bool) {
	if !s.IsExternalResourceLink() {
		return v, false
	}
	return s.ExternalResourceLink, true
}

// NewExternalResourceLinkResourceLink returns new ResourceLink from ExternalResourceLink.
func NewExternalResourceLinkResourceLink(v ExternalResourceLink) ResourceLink {
	var s ResourceLink
	s.SetExternalResourceLink(v)
	return s
}

// Merged schema.
// Ref: #/components/schemas/ResourceProvider
type ResourceProvider struct {
	Sys      ResourceProviderSys  `json:"sys"`
	Type     ResourceProviderType `json:"type"`
	Function FunctionLink         `json:"function"`
}

// GetSys returns the value of Sys.
func (s *ResourceProvider) GetSys() ResourceProviderSys {
	return s.Sys
}

// GetType returns the value of Type.
func (s *ResourceProvider) GetType() ResourceProviderType {
	return s.Type
}

// GetFunction returns the value of Function.
func (s *ResourceProvider) GetFunction() FunctionLink {
	return s.Function
}

// SetSys sets the value of Sys.
func (s *ResourceProvider) SetSys(val ResourceProviderSys) {
	s.Sys = val
}

// SetType sets the value of Type.
func (s *ResourceProvider) SetType(val ResourceProviderType) {
	s.Type = val
}

// SetFunction sets the value of Function.
func (s *ResourceProvider) SetFunction(val FunctionLink) {
	s.Function = val
}

func (*ResourceProvider) getAppDefinitionResourceProviderRes() {}

// Ref: #/components/schemas/ResourceProviderLink
type ResourceProviderLink struct {
	Sys ResourceProviderLinkSys `json:"sys"`
}

// GetSys returns the value of Sys.
func (s *ResourceProviderLink) GetSys() ResourceProviderLinkSys {
	return s.Sys
}

// SetSys sets the value of Sys.
func (s *ResourceProviderLink) SetSys(val ResourceProviderLinkSys) {
	s.Sys = val
}

// Merged schema.
type ResourceProviderLinkSys struct {
	// Merged property.
	Type ResourceProviderLinkSysType `json:"type"`
	ID   string                      `json:"id"`
	// Merged property.
	LinkType ResourceProviderLinkSysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *ResourceProviderLinkSys) GetType() ResourceProviderLinkSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *ResourceProviderLinkSys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *ResourceProviderLinkSys) GetLinkType() ResourceProviderLinkSysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *ResourceProviderLinkSys) SetType(val ResourceProviderLinkSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ResourceProviderLinkSys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *ResourceProviderLinkSys) SetLinkType(val ResourceProviderLinkSysLinkType) {
	s.LinkType = val
}

// Merged schema.
type ResourceProviderLinkSysLinkType string

const (
	ResourceProviderLinkSysLinkTypeResourceProvider ResourceProviderLinkSysLinkType = "ResourceProvider"
)

// AllValues returns all ResourceProviderLinkSysLinkType values.
func (ResourceProviderLinkSysLinkType) AllValues() []ResourceProviderLinkSysLinkType {
	return []ResourceProviderLinkSysLinkType{
		ResourceProviderLinkSysLinkTypeResourceProvider,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResourceProviderLinkSysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case ResourceProviderLinkSysLinkTypeResourceProvider:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResourceProviderLinkSysLinkType) UnmarshalText(data []byte) error {
	switch ResourceProviderLinkSysLinkType(data) {
	case ResourceProviderLinkSysLinkTypeResourceProvider:
		*s = ResourceProviderLinkSysLinkTypeResourceProvider
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type ResourceProviderLinkSysType string

const (
	ResourceProviderLinkSysTypeLink ResourceProviderLinkSysType = "Link"
)

// AllValues returns all ResourceProviderLinkSysType values.
func (ResourceProviderLinkSysType) AllValues() []ResourceProviderLinkSysType {
	return []ResourceProviderLinkSysType{
		ResourceProviderLinkSysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResourceProviderLinkSysType) MarshalText() ([]byte, error) {
	switch s {
	case ResourceProviderLinkSysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResourceProviderLinkSysType) UnmarshalText(data []byte) error {
	switch ResourceProviderLinkSysType(data) {
	case ResourceProviderLinkSysTypeLink:
		*s = ResourceProviderLinkSysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/ResourceProviderRequest
type ResourceProviderRequest struct {
	Sys      ResourceProviderRequestSys  `json:"sys"`
	Type     ResourceProviderRequestType `json:"type"`
	Function FunctionLink                `json:"function"`
}

// GetSys returns the value of Sys.
func (s *ResourceProviderRequest) GetSys() ResourceProviderRequestSys {
	return s.Sys
}

// GetType returns the value of Type.
func (s *ResourceProviderRequest) GetType() ResourceProviderRequestType {
	return s.Type
}

// GetFunction returns the value of Function.
func (s *ResourceProviderRequest) GetFunction() FunctionLink {
	return s.Function
}

// SetSys sets the value of Sys.
func (s *ResourceProviderRequest) SetSys(val ResourceProviderRequestSys) {
	s.Sys = val
}

// SetType sets the value of Type.
func (s *ResourceProviderRequest) SetType(val ResourceProviderRequestType) {
	s.Type = val
}

// SetFunction sets the value of Function.
func (s *ResourceProviderRequest) SetFunction(val FunctionLink) {
	s.Function = val
}

// Ref: #/components/schemas/ResourceProviderRequestSys
type ResourceProviderRequestSys struct {
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s *ResourceProviderRequestSys) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *ResourceProviderRequestSys) SetID(val string) {
	s.ID = val
}

type ResourceProviderRequestType string

const (
	ResourceProviderRequestTypeFunction ResourceProviderRequestType = "function"
)

// AllValues returns all ResourceProviderRequestType values.
func (ResourceProviderRequestType) AllValues() []ResourceProviderRequestType {
	return []ResourceProviderRequestType{
		ResourceProviderRequestTypeFunction,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResourceProviderRequestType) MarshalText() ([]byte, error) {
	switch s {
	case ResourceProviderRequestTypeFunction:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResourceProviderRequestType) UnmarshalText(data []byte) error {
	switch ResourceProviderRequestType(data) {
	case ResourceProviderRequestTypeFunction:
		*s = ResourceProviderRequestTypeFunction
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ResourceProviderStatusCode wraps ResourceProvider with StatusCode.
type ResourceProviderStatusCode struct {
	StatusCode int
	Response   ResourceProvider
}

// GetStatusCode returns the value of StatusCode.
func (s *ResourceProviderStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ResourceProviderStatusCode) GetResponse() ResourceProvider {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ResourceProviderStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ResourceProviderStatusCode) SetResponse(val ResourceProvider) {
	s.Response = val
}

func (*ResourceProviderStatusCode) putAppDefinitionResourceProviderRes() {}

// Merged schema.
// Ref: #/components/schemas/ResourceProviderSys
type ResourceProviderSys struct {
	// Merged property.
	Type          ResourceProviderSysType `json:"type"`
	ID            string                  `json:"id"`
	Organization  OrganizationLink        `json:"organization"`
	AppDefinition AppDefinitionLink       `json:"appDefinition"`
}

// GetType returns the value of Type.
func (s *ResourceProviderSys) GetType() ResourceProviderSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *ResourceProviderSys) GetID() string {
	return s.ID
}

// GetOrganization returns the value of Organization.
func (s *ResourceProviderSys) GetOrganization() OrganizationLink {
	return s.Organization
}

// GetAppDefinition returns the value of AppDefinition.
func (s *ResourceProviderSys) GetAppDefinition() AppDefinitionLink {
	return s.AppDefinition
}

// SetType sets the value of Type.
func (s *ResourceProviderSys) SetType(val ResourceProviderSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ResourceProviderSys) SetID(val string) {
	s.ID = val
}

// SetOrganization sets the value of Organization.
func (s *ResourceProviderSys) SetOrganization(val OrganizationLink) {
	s.Organization = val
}

// SetAppDefinition sets the value of AppDefinition.
func (s *ResourceProviderSys) SetAppDefinition(val AppDefinitionLink) {
	s.AppDefinition = val
}

// Merged schema.
type ResourceProviderSysType string

const (
	ResourceProviderSysTypeResourceProvider ResourceProviderSysType = "ResourceProvider"
)

// AllValues returns all ResourceProviderSysType values.
func (ResourceProviderSysType) AllValues() []ResourceProviderSysType {
	return []ResourceProviderSysType{
		ResourceProviderSysTypeResourceProvider,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResourceProviderSysType) MarshalText() ([]byte, error) {
	switch s {
	case ResourceProviderSysTypeResourceProvider:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResourceProviderSysType) UnmarshalText(data []byte) error {
	switch ResourceProviderSysType(data) {
	case ResourceProviderSysTypeResourceProvider:
		*s = ResourceProviderSysTypeResourceProvider
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ResourceProviderType string

const (
	ResourceProviderTypeFunction ResourceProviderType = "function"
)

// AllValues returns all ResourceProviderType values.
func (ResourceProviderType) AllValues() []ResourceProviderType {
	return []ResourceProviderType{
		ResourceProviderTypeFunction,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResourceProviderType) MarshalText() ([]byte, error) {
	switch s {
	case ResourceProviderTypeFunction:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResourceProviderType) UnmarshalText(data []byte) error {
	switch ResourceProviderType(data) {
	case ResourceProviderTypeFunction:
		*s = ResourceProviderTypeFunction
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/ResourceType
type ResourceType struct {
	Sys                 ResourceTypeSys                 `json:"sys"`
	Name                string                          `json:"name"`
	DefaultFieldMapping ResourceTypeDefaultFieldMapping `json:"defaultFieldMapping"`
}

// GetSys returns the value of Sys.
func (s *ResourceType) GetSys() ResourceTypeSys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *ResourceType) GetName() string {
	return s.Name
}

// GetDefaultFieldMapping returns the value of DefaultFieldMapping.
func (s *ResourceType) GetDefaultFieldMapping() ResourceTypeDefaultFieldMapping {
	return s.DefaultFieldMapping
}

// SetSys sets the value of Sys.
func (s *ResourceType) SetSys(val ResourceTypeSys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *ResourceType) SetName(val string) {
	s.Name = val
}

// SetDefaultFieldMapping sets the value of DefaultFieldMapping.
func (s *ResourceType) SetDefaultFieldMapping(val ResourceTypeDefaultFieldMapping) {
	s.DefaultFieldMapping = val
}

func (*ResourceType) getAppDefinitionResourceTypeRes() {}

// Ref: #/components/schemas/ResourceTypeDefaultFieldMapping
type ResourceTypeDefaultFieldMapping struct {
	Title       string                                  `json:"title"`
	Subtitle    OptString                               `json:"subtitle"`
	Description OptString                               `json:"description"`
	ExternalUrl OptString                               `json:"externalUrl"`
	Image       OptResourceTypeDefaultFieldMappingImage `json:"image"`
	Badge       OptResourceTypeDefaultFieldMappingBadge `json:"badge"`
}

// GetTitle returns the value of Title.
func (s *ResourceTypeDefaultFieldMapping) GetTitle() string {
	return s.Title
}

// GetSubtitle returns the value of Subtitle.
func (s *ResourceTypeDefaultFieldMapping) GetSubtitle() OptString {
	return s.Subtitle
}

// GetDescription returns the value of Description.
func (s *ResourceTypeDefaultFieldMapping) GetDescription() OptString {
	return s.Description
}

// GetExternalUrl returns the value of ExternalUrl.
func (s *ResourceTypeDefaultFieldMapping) GetExternalUrl() OptString {
	return s.ExternalUrl
}

// GetImage returns the value of Image.
func (s *ResourceTypeDefaultFieldMapping) GetImage() OptResourceTypeDefaultFieldMappingImage {
	return s.Image
}

// GetBadge returns the value of Badge.
func (s *ResourceTypeDefaultFieldMapping) GetBadge() OptResourceTypeDefaultFieldMappingBadge {
	return s.Badge
}

// SetTitle sets the value of Title.
func (s *ResourceTypeDefaultFieldMapping) SetTitle(val string) {
	s.Title = val
}

// SetSubtitle sets the value of Subtitle.
func (s *ResourceTypeDefaultFieldMapping) SetSubtitle(val OptString) {
	s.Subtitle = val
}

// SetDescription sets the value of Description.
func (s *ResourceTypeDefaultFieldMapping) SetDescription(val OptString) {
	s.Description = val
}

// SetExternalUrl sets the value of ExternalUrl.
func (s *ResourceTypeDefaultFieldMapping) SetExternalUrl(val OptString) {
	s.ExternalUrl = val
}

// SetImage sets the value of Image.
func (s *ResourceTypeDefaultFieldMapping) SetImage(val OptResourceTypeDefaultFieldMappingImage) {
	s.Image = val
}

// SetBadge sets the value of Badge.
func (s *ResourceTypeDefaultFieldMapping) SetBadge(val OptResourceTypeDefaultFieldMappingBadge) {
	s.Badge = val
}

type ResourceTypeDefaultFieldMappingBadge struct {
	Label   string `json:"label"`
	Variant string `json:"variant"`
}

// GetLabel returns the value of Label.
func (s *ResourceTypeDefaultFieldMappingBadge) GetLabel() string {
	return s.Label
}

// GetVariant returns the value of Variant.
func (s *ResourceTypeDefaultFieldMappingBadge) GetVariant() string {
	return s.Variant
}

// SetLabel sets the value of Label.
func (s *ResourceTypeDefaultFieldMappingBadge) SetLabel(val string) {
	s.Label = val
}

// SetVariant sets the value of Variant.
func (s *ResourceTypeDefaultFieldMappingBadge) SetVariant(val string) {
	s.Variant = val
}

type ResourceTypeDefaultFieldMappingImage struct {
	URL     string    `json:"url"`
	AltText OptString `json:"altText"`
}

// GetURL returns the value of URL.
func (s *ResourceTypeDefaultFieldMappingImage) GetURL() string {
	return s.URL
}

// GetAltText returns the value of AltText.
func (s *ResourceTypeDefaultFieldMappingImage) GetAltText() OptString {
	return s.AltText
}

// SetURL sets the value of URL.
func (s *ResourceTypeDefaultFieldMappingImage) SetURL(val string) {
	s.URL = val
}

// SetAltText sets the value of AltText.
func (s *ResourceTypeDefaultFieldMappingImage) SetAltText(val OptString) {
	s.AltText = val
}

// Ref: #/components/schemas/ResourceTypeFields
type ResourceTypeFields struct {
	Name                string                          `json:"name"`
	DefaultFieldMapping ResourceTypeDefaultFieldMapping `json:"defaultFieldMapping"`
}

// GetName returns the value of Name.
func (s *ResourceTypeFields) GetName() string {
	return s.Name
}

// GetDefaultFieldMapping returns the value of DefaultFieldMapping.
func (s *ResourceTypeFields) GetDefaultFieldMapping() ResourceTypeDefaultFieldMapping {
	return s.DefaultFieldMapping
}

// SetName sets the value of Name.
func (s *ResourceTypeFields) SetName(val string) {
	s.Name = val
}

// SetDefaultFieldMapping sets the value of DefaultFieldMapping.
func (s *ResourceTypeFields) SetDefaultFieldMapping(val ResourceTypeDefaultFieldMapping) {
	s.DefaultFieldMapping = val
}

// ResourceTypeStatusCode wraps ResourceType with StatusCode.
type ResourceTypeStatusCode struct {
	StatusCode int
	Response   ResourceType
}

// GetStatusCode returns the value of StatusCode.
func (s *ResourceTypeStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ResourceTypeStatusCode) GetResponse() ResourceType {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ResourceTypeStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ResourceTypeStatusCode) SetResponse(val ResourceType) {
	s.Response = val
}

func (*ResourceTypeStatusCode) putAppDefinitionResourceTypeRes() {}

// Merged schema.
// Ref: #/components/schemas/ResourceTypeSys
type ResourceTypeSys struct {
	// Merged property.
	Type             ResourceTypeSysType  `json:"type"`
	ID               string               `json:"id"`
	Organization     OrganizationLink     `json:"organization"`
	AppDefinition    AppDefinitionLink    `json:"appDefinition"`
	ResourceProvider ResourceProviderLink `json:"resourceProvider"`
}

// GetType returns the value of Type.
func (s *ResourceTypeSys) GetType() ResourceTypeSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *ResourceTypeSys) GetID() string {
	return s.ID
}

// GetOrganization returns the value of Organization.
func (s *ResourceTypeSys) GetOrganization() OrganizationLink {
	return s.Organization
}

// GetAppDefinition returns the value of AppDefinition.
func (s *ResourceTypeSys) GetAppDefinition() AppDefinitionLink {
	return s.AppDefinition
}

// GetResourceProvider returns the value of ResourceProvider.
func (s *ResourceTypeSys) GetResourceProvider() ResourceProviderLink {
	return s.ResourceProvider
}

// SetType sets the value of Type.
func (s *ResourceTypeSys) SetType(val ResourceTypeSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ResourceTypeSys) SetID(val string) {
	s.ID = val
}

// SetOrganization sets the value of Organization.
func (s *ResourceTypeSys) SetOrganization(val OrganizationLink) {
	s.Organization = val
}

// SetAppDefinition sets the value of AppDefinition.
func (s *ResourceTypeSys) SetAppDefinition(val AppDefinitionLink) {
	s.AppDefinition = val
}

// SetResourceProvider sets the value of ResourceProvider.
func (s *ResourceTypeSys) SetResourceProvider(val ResourceProviderLink) {
	s.ResourceProvider = val
}

// Merged schema.
type ResourceTypeSysType string

const (
	ResourceTypeSysTypeResourceType ResourceTypeSysType = "ResourceType"
)

// AllValues returns all ResourceTypeSysType values.
func (ResourceTypeSysType) AllValues() []ResourceTypeSysType {
	return []ResourceTypeSysType{
		ResourceTypeSysTypeResourceType,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResourceTypeSysType) MarshalText() ([]byte, error) {
	switch s {
	case ResourceTypeSysTypeResourceType:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResourceTypeSysType) UnmarshalText(data []byte) error {
	switch ResourceTypeSysType(data) {
	case ResourceTypeSysTypeResourceType:
		*s = ResourceTypeSysTypeResourceType
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RevokePersonalAccessTokenApplicationJSONUnauthorized Error

func (*RevokePersonalAccessTokenApplicationJSONUnauthorized) revokePersonalAccessTokenRes() {}

type RevokePersonalAccessTokenApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*RevokePersonalAccessTokenApplicationVndContentfulManagementV1JSONUnauthorized) revokePersonalAccessTokenRes() {
}

// Merged schema.
// Ref: #/components/schemas/Role
type Role struct {
	Sys         RoleSys            `json:"sys"`
	Name        string             `json:"name"`
	Description OptNilString       `json:"description"`
	Permissions RolePermissions    `json:"permissions"`
	Policies    []RolePoliciesItem `json:"policies"`
}

// GetSys returns the value of Sys.
func (s *Role) GetSys() RoleSys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *Role) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Role) GetDescription() OptNilString {
	return s.Description
}

// GetPermissions returns the value of Permissions.
func (s *Role) GetPermissions() RolePermissions {
	return s.Permissions
}

// GetPolicies returns the value of Policies.
func (s *Role) GetPolicies() []RolePoliciesItem {
	return s.Policies
}

// SetSys sets the value of Sys.
func (s *Role) SetSys(val RoleSys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *Role) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Role) SetDescription(val OptNilString) {
	s.Description = val
}

// SetPermissions sets the value of Permissions.
func (s *Role) SetPermissions(val RolePermissions) {
	s.Permissions = val
}

// SetPolicies sets the value of Policies.
func (s *Role) SetPolicies(val []RolePoliciesItem) {
	s.Policies = val
}

func (*Role) getRoleRes() {}

// Ref: #/components/schemas/RoleFields
type RoleFields struct {
	Name        string                   `json:"name"`
	Description OptNilString             `json:"description"`
	Permissions RoleFieldsPermissions    `json:"permissions"`
	Policies    []RoleFieldsPoliciesItem `json:"policies"`
}

// GetName returns the value of Name.
func (s *RoleFields) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *RoleFields) GetDescription() OptNilString {
	return s.Description
}

// GetPermissions returns the value of Permissions.
func (s *RoleFields) GetPermissions() RoleFieldsPermissions {
	return s.Permissions
}

// GetPolicies returns the value of Policies.
func (s *RoleFields) GetPolicies() []RoleFieldsPoliciesItem {
	return s.Policies
}

// SetName sets the value of Name.
func (s *RoleFields) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *RoleFields) SetDescription(val OptNilString) {
	s.Description = val
}

// SetPermissions sets the value of Permissions.
func (s *RoleFields) SetPermissions(val RoleFieldsPermissions) {
	s.Permissions = val
}

// SetPolicies sets the value of Policies.
func (s *RoleFields) SetPolicies(val []RoleFieldsPoliciesItem) {
	s.Policies = val
}

type RoleFieldsPermissions map[string]RoleFieldsPermissionsItem

func (s *RoleFieldsPermissions) init() RoleFieldsPermissions {
	m := *s
	if m == nil {
		m = map[string]RoleFieldsPermissionsItem{}
		*s = m
	}
	return m
}

// RoleFieldsPermissionsItem represents sum type.
type RoleFieldsPermissionsItem struct {
	Type        RoleFieldsPermissionsItemType // switch on this field
	String      string
	StringArray []string
}

// RoleFieldsPermissionsItemType is oneOf type of RoleFieldsPermissionsItem.
type RoleFieldsPermissionsItemType string

// Possible values for RoleFieldsPermissionsItemType.
const (
	StringRoleFieldsPermissionsItem      RoleFieldsPermissionsItemType = "string"
	StringArrayRoleFieldsPermissionsItem RoleFieldsPermissionsItemType = "[]string"
)

// IsString reports whether RoleFieldsPermissionsItem is string.
func (s RoleFieldsPermissionsItem) IsString() bool { return s.Type == StringRoleFieldsPermissionsItem }

// IsStringArray reports whether RoleFieldsPermissionsItem is []string.
func (s RoleFieldsPermissionsItem) IsStringArray() bool {
	return s.Type == StringArrayRoleFieldsPermissionsItem
}

// SetString sets RoleFieldsPermissionsItem to string.
func (s *RoleFieldsPermissionsItem) SetString(v string) {
	s.Type = StringRoleFieldsPermissionsItem
	s.String = v
}

// GetString returns string and true boolean if RoleFieldsPermissionsItem is string.
func (s RoleFieldsPermissionsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringRoleFieldsPermissionsItem returns new RoleFieldsPermissionsItem from string.
func NewStringRoleFieldsPermissionsItem(v string) RoleFieldsPermissionsItem {
	var s RoleFieldsPermissionsItem
	s.SetString(v)
	return s
}

// SetStringArray sets RoleFieldsPermissionsItem to []string.
func (s *RoleFieldsPermissionsItem) SetStringArray(v []string) {
	s.Type = StringArrayRoleFieldsPermissionsItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if RoleFieldsPermissionsItem is []string.
func (s RoleFieldsPermissionsItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayRoleFieldsPermissionsItem returns new RoleFieldsPermissionsItem from []string.
func NewStringArrayRoleFieldsPermissionsItem(v []string) RoleFieldsPermissionsItem {
	var s RoleFieldsPermissionsItem
	s.SetStringArray(v)
	return s
}

type RoleFieldsPoliciesItem struct {
	Effect     RoleFieldsPoliciesItemEffect  `json:"effect"`
	Actions    RoleFieldsPoliciesItemActions `json:"actions"`
	Constraint jx.Raw                        `json:"constraint"`
}

// GetEffect returns the value of Effect.
func (s *RoleFieldsPoliciesItem) GetEffect() RoleFieldsPoliciesItemEffect {
	return s.Effect
}

// GetActions returns the value of Actions.
func (s *RoleFieldsPoliciesItem) GetActions() RoleFieldsPoliciesItemActions {
	return s.Actions
}

// GetConstraint returns the value of Constraint.
func (s *RoleFieldsPoliciesItem) GetConstraint() jx.Raw {
	return s.Constraint
}

// SetEffect sets the value of Effect.
func (s *RoleFieldsPoliciesItem) SetEffect(val RoleFieldsPoliciesItemEffect) {
	s.Effect = val
}

// SetActions sets the value of Actions.
func (s *RoleFieldsPoliciesItem) SetActions(val RoleFieldsPoliciesItemActions) {
	s.Actions = val
}

// SetConstraint sets the value of Constraint.
func (s *RoleFieldsPoliciesItem) SetConstraint(val jx.Raw) {
	s.Constraint = val
}

// RoleFieldsPoliciesItemActions represents sum type.
type RoleFieldsPoliciesItemActions struct {
	Type        RoleFieldsPoliciesItemActionsType // switch on this field
	String      string
	StringArray []string
}

// RoleFieldsPoliciesItemActionsType is oneOf type of RoleFieldsPoliciesItemActions.
type RoleFieldsPoliciesItemActionsType string

// Possible values for RoleFieldsPoliciesItemActionsType.
const (
	StringRoleFieldsPoliciesItemActions      RoleFieldsPoliciesItemActionsType = "string"
	StringArrayRoleFieldsPoliciesItemActions RoleFieldsPoliciesItemActionsType = "[]string"
)

// IsString reports whether RoleFieldsPoliciesItemActions is string.
func (s RoleFieldsPoliciesItemActions) IsString() bool {
	return s.Type == StringRoleFieldsPoliciesItemActions
}

// IsStringArray reports whether RoleFieldsPoliciesItemActions is []string.
func (s RoleFieldsPoliciesItemActions) IsStringArray() bool {
	return s.Type == StringArrayRoleFieldsPoliciesItemActions
}

// SetString sets RoleFieldsPoliciesItemActions to string.
func (s *RoleFieldsPoliciesItemActions) SetString(v string) {
	s.Type = StringRoleFieldsPoliciesItemActions
	s.String = v
}

// GetString returns string and true boolean if RoleFieldsPoliciesItemActions is string.
func (s RoleFieldsPoliciesItemActions) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringRoleFieldsPoliciesItemActions returns new RoleFieldsPoliciesItemActions from string.
func NewStringRoleFieldsPoliciesItemActions(v string) RoleFieldsPoliciesItemActions {
	var s RoleFieldsPoliciesItemActions
	s.SetString(v)
	return s
}

// SetStringArray sets RoleFieldsPoliciesItemActions to []string.
func (s *RoleFieldsPoliciesItemActions) SetStringArray(v []string) {
	s.Type = StringArrayRoleFieldsPoliciesItemActions
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if RoleFieldsPoliciesItemActions is []string.
func (s RoleFieldsPoliciesItemActions) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayRoleFieldsPoliciesItemActions returns new RoleFieldsPoliciesItemActions from []string.
func NewStringArrayRoleFieldsPoliciesItemActions(v []string) RoleFieldsPoliciesItemActions {
	var s RoleFieldsPoliciesItemActions
	s.SetStringArray(v)
	return s
}

type RoleFieldsPoliciesItemEffect string

const (
	RoleFieldsPoliciesItemEffectAllow RoleFieldsPoliciesItemEffect = "allow"
	RoleFieldsPoliciesItemEffectDeny  RoleFieldsPoliciesItemEffect = "deny"
)

// AllValues returns all RoleFieldsPoliciesItemEffect values.
func (RoleFieldsPoliciesItemEffect) AllValues() []RoleFieldsPoliciesItemEffect {
	return []RoleFieldsPoliciesItemEffect{
		RoleFieldsPoliciesItemEffectAllow,
		RoleFieldsPoliciesItemEffectDeny,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RoleFieldsPoliciesItemEffect) MarshalText() ([]byte, error) {
	switch s {
	case RoleFieldsPoliciesItemEffectAllow:
		return []byte(s), nil
	case RoleFieldsPoliciesItemEffectDeny:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RoleFieldsPoliciesItemEffect) UnmarshalText(data []byte) error {
	switch RoleFieldsPoliciesItemEffect(data) {
	case RoleFieldsPoliciesItemEffectAllow:
		*s = RoleFieldsPoliciesItemEffectAllow
		return nil
	case RoleFieldsPoliciesItemEffectDeny:
		*s = RoleFieldsPoliciesItemEffectDeny
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RolePermissions map[string]RolePermissionsItem

func (s *RolePermissions) init() RolePermissions {
	m := *s
	if m == nil {
		m = map[string]RolePermissionsItem{}
		*s = m
	}
	return m
}

// RolePermissionsItem represents sum type.
type RolePermissionsItem struct {
	Type        RolePermissionsItemType // switch on this field
	String      string
	StringArray []string
}

// RolePermissionsItemType is oneOf type of RolePermissionsItem.
type RolePermissionsItemType string

// Possible values for RolePermissionsItemType.
const (
	StringRolePermissionsItem      RolePermissionsItemType = "string"
	StringArrayRolePermissionsItem RolePermissionsItemType = "[]string"
)

// IsString reports whether RolePermissionsItem is string.
func (s RolePermissionsItem) IsString() bool { return s.Type == StringRolePermissionsItem }

// IsStringArray reports whether RolePermissionsItem is []string.
func (s RolePermissionsItem) IsStringArray() bool { return s.Type == StringArrayRolePermissionsItem }

// SetString sets RolePermissionsItem to string.
func (s *RolePermissionsItem) SetString(v string) {
	s.Type = StringRolePermissionsItem
	s.String = v
}

// GetString returns string and true boolean if RolePermissionsItem is string.
func (s RolePermissionsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringRolePermissionsItem returns new RolePermissionsItem from string.
func NewStringRolePermissionsItem(v string) RolePermissionsItem {
	var s RolePermissionsItem
	s.SetString(v)
	return s
}

// SetStringArray sets RolePermissionsItem to []string.
func (s *RolePermissionsItem) SetStringArray(v []string) {
	s.Type = StringArrayRolePermissionsItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if RolePermissionsItem is []string.
func (s RolePermissionsItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayRolePermissionsItem returns new RolePermissionsItem from []string.
func NewStringArrayRolePermissionsItem(v []string) RolePermissionsItem {
	var s RolePermissionsItem
	s.SetStringArray(v)
	return s
}

type RolePoliciesItem struct {
	Effect     RolePoliciesItemEffect  `json:"effect"`
	Actions    RolePoliciesItemActions `json:"actions"`
	Constraint jx.Raw                  `json:"constraint"`
}

// GetEffect returns the value of Effect.
func (s *RolePoliciesItem) GetEffect() RolePoliciesItemEffect {
	return s.Effect
}

// GetActions returns the value of Actions.
func (s *RolePoliciesItem) GetActions() RolePoliciesItemActions {
	return s.Actions
}

// GetConstraint returns the value of Constraint.
func (s *RolePoliciesItem) GetConstraint() jx.Raw {
	return s.Constraint
}

// SetEffect sets the value of Effect.
func (s *RolePoliciesItem) SetEffect(val RolePoliciesItemEffect) {
	s.Effect = val
}

// SetActions sets the value of Actions.
func (s *RolePoliciesItem) SetActions(val RolePoliciesItemActions) {
	s.Actions = val
}

// SetConstraint sets the value of Constraint.
func (s *RolePoliciesItem) SetConstraint(val jx.Raw) {
	s.Constraint = val
}

// RolePoliciesItemActions represents sum type.
type RolePoliciesItemActions struct {
	Type        RolePoliciesItemActionsType // switch on this field
	String      string
	StringArray []string
}

// RolePoliciesItemActionsType is oneOf type of RolePoliciesItemActions.
type RolePoliciesItemActionsType string

// Possible values for RolePoliciesItemActionsType.
const (
	StringRolePoliciesItemActions      RolePoliciesItemActionsType = "string"
	StringArrayRolePoliciesItemActions RolePoliciesItemActionsType = "[]string"
)

// IsString reports whether RolePoliciesItemActions is string.
func (s RolePoliciesItemActions) IsString() bool { return s.Type == StringRolePoliciesItemActions }

// IsStringArray reports whether RolePoliciesItemActions is []string.
func (s RolePoliciesItemActions) IsStringArray() bool {
	return s.Type == StringArrayRolePoliciesItemActions
}

// SetString sets RolePoliciesItemActions to string.
func (s *RolePoliciesItemActions) SetString(v string) {
	s.Type = StringRolePoliciesItemActions
	s.String = v
}

// GetString returns string and true boolean if RolePoliciesItemActions is string.
func (s RolePoliciesItemActions) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringRolePoliciesItemActions returns new RolePoliciesItemActions from string.
func NewStringRolePoliciesItemActions(v string) RolePoliciesItemActions {
	var s RolePoliciesItemActions
	s.SetString(v)
	return s
}

// SetStringArray sets RolePoliciesItemActions to []string.
func (s *RolePoliciesItemActions) SetStringArray(v []string) {
	s.Type = StringArrayRolePoliciesItemActions
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if RolePoliciesItemActions is []string.
func (s RolePoliciesItemActions) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayRolePoliciesItemActions returns new RolePoliciesItemActions from []string.
func NewStringArrayRolePoliciesItemActions(v []string) RolePoliciesItemActions {
	var s RolePoliciesItemActions
	s.SetStringArray(v)
	return s
}

type RolePoliciesItemEffect string

const (
	RolePoliciesItemEffectAllow RolePoliciesItemEffect = "allow"
	RolePoliciesItemEffectDeny  RolePoliciesItemEffect = "deny"
)

// AllValues returns all RolePoliciesItemEffect values.
func (RolePoliciesItemEffect) AllValues() []RolePoliciesItemEffect {
	return []RolePoliciesItemEffect{
		RolePoliciesItemEffectAllow,
		RolePoliciesItemEffectDeny,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RolePoliciesItemEffect) MarshalText() ([]byte, error) {
	switch s {
	case RolePoliciesItemEffectAllow:
		return []byte(s), nil
	case RolePoliciesItemEffectDeny:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RolePoliciesItemEffect) UnmarshalText(data []byte) error {
	switch RolePoliciesItemEffect(data) {
	case RolePoliciesItemEffectAllow:
		*s = RolePoliciesItemEffectAllow
		return nil
	case RolePoliciesItemEffectDeny:
		*s = RolePoliciesItemEffectDeny
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// RoleStatusCode wraps Role with StatusCode.
type RoleStatusCode struct {
	StatusCode int
	Response   Role
}

// GetStatusCode returns the value of StatusCode.
func (s *RoleStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *RoleStatusCode) GetResponse() Role {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *RoleStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *RoleStatusCode) SetResponse(val Role) {
	s.Response = val
}

func (*RoleStatusCode) createRoleRes() {}
func (*RoleStatusCode) updateRoleRes() {}

// Merged schema.
// Ref: #/components/schemas/RoleSys
type RoleSys struct {
	// Merged property.
	Type      RoleSysType `json:"type"`
	Space     SpaceLink   `json:"space"`
	ID        string      `json:"id"`
	Version   int         `json:"version"`
	CreatedAt OptDateTime `json:"createdAt"`
	UpdatedAt OptDateTime `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *RoleSys) GetType() RoleSysType {
	return s.Type
}

// GetSpace returns the value of Space.
func (s *RoleSys) GetSpace() SpaceLink {
	return s.Space
}

// GetID returns the value of ID.
func (s *RoleSys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *RoleSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RoleSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *RoleSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *RoleSys) SetType(val RoleSysType) {
	s.Type = val
}

// SetSpace sets the value of Space.
func (s *RoleSys) SetSpace(val SpaceLink) {
	s.Space = val
}

// SetID sets the value of ID.
func (s *RoleSys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *RoleSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RoleSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *RoleSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type RoleSysType string

const (
	RoleSysTypeRole RoleSysType = "Role"
)

// AllValues returns all RoleSysType values.
func (RoleSysType) AllValues() []RoleSysType {
	return []RoleSysType{
		RoleSysTypeRole,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RoleSysType) MarshalText() ([]byte, error) {
	switch s {
	case RoleSysTypeRole:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RoleSysType) UnmarshalText(data []byte) error {
	switch RoleSysType(data) {
	case RoleSysTypeRole:
		*s = RoleSysTypeRole
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/SpaceEnablement
type SpaceEnablement struct {
	Sys               SpaceEnablementSys      `json:"sys"`
	CrossSpaceLinks   OptSpaceEnablementField `json:"crossSpaceLinks"`
	SpaceTemplates    OptSpaceEnablementField `json:"spaceTemplates"`
	StudioExperiences OptSpaceEnablementField `json:"studioExperiences"`
	SuggestConcepts   OptSpaceEnablementField `json:"suggestConcepts"`
}

// GetSys returns the value of Sys.
func (s *SpaceEnablement) GetSys() SpaceEnablementSys {
	return s.Sys
}

// GetCrossSpaceLinks returns the value of CrossSpaceLinks.
func (s *SpaceEnablement) GetCrossSpaceLinks() OptSpaceEnablementField {
	return s.CrossSpaceLinks
}

// GetSpaceTemplates returns the value of SpaceTemplates.
func (s *SpaceEnablement) GetSpaceTemplates() OptSpaceEnablementField {
	return s.SpaceTemplates
}

// GetStudioExperiences returns the value of StudioExperiences.
func (s *SpaceEnablement) GetStudioExperiences() OptSpaceEnablementField {
	return s.StudioExperiences
}

// GetSuggestConcepts returns the value of SuggestConcepts.
func (s *SpaceEnablement) GetSuggestConcepts() OptSpaceEnablementField {
	return s.SuggestConcepts
}

// SetSys sets the value of Sys.
func (s *SpaceEnablement) SetSys(val SpaceEnablementSys) {
	s.Sys = val
}

// SetCrossSpaceLinks sets the value of CrossSpaceLinks.
func (s *SpaceEnablement) SetCrossSpaceLinks(val OptSpaceEnablementField) {
	s.CrossSpaceLinks = val
}

// SetSpaceTemplates sets the value of SpaceTemplates.
func (s *SpaceEnablement) SetSpaceTemplates(val OptSpaceEnablementField) {
	s.SpaceTemplates = val
}

// SetStudioExperiences sets the value of StudioExperiences.
func (s *SpaceEnablement) SetStudioExperiences(val OptSpaceEnablementField) {
	s.StudioExperiences = val
}

// SetSuggestConcepts sets the value of SuggestConcepts.
func (s *SpaceEnablement) SetSuggestConcepts(val OptSpaceEnablementField) {
	s.SuggestConcepts = val
}

// Ref: #/components/schemas/SpaceEnablementField
type SpaceEnablementField struct {
	Enabled bool `json:"enabled"`
}

// GetEnabled returns the value of Enabled.
func (s *SpaceEnablementField) GetEnabled() bool {
	return s.Enabled
}

// SetEnabled sets the value of Enabled.
func (s *SpaceEnablementField) SetEnabled(val bool) {
	s.Enabled = val
}

// Ref: #/components/schemas/SpaceEnablementFields
type SpaceEnablementFields struct {
	CrossSpaceLinks   OptSpaceEnablementField `json:"crossSpaceLinks"`
	SpaceTemplates    OptSpaceEnablementField `json:"spaceTemplates"`
	StudioExperiences OptSpaceEnablementField `json:"studioExperiences"`
	SuggestConcepts   OptSpaceEnablementField `json:"suggestConcepts"`
}

// GetCrossSpaceLinks returns the value of CrossSpaceLinks.
func (s *SpaceEnablementFields) GetCrossSpaceLinks() OptSpaceEnablementField {
	return s.CrossSpaceLinks
}

// GetSpaceTemplates returns the value of SpaceTemplates.
func (s *SpaceEnablementFields) GetSpaceTemplates() OptSpaceEnablementField {
	return s.SpaceTemplates
}

// GetStudioExperiences returns the value of StudioExperiences.
func (s *SpaceEnablementFields) GetStudioExperiences() OptSpaceEnablementField {
	return s.StudioExperiences
}

// GetSuggestConcepts returns the value of SuggestConcepts.
func (s *SpaceEnablementFields) GetSuggestConcepts() OptSpaceEnablementField {
	return s.SuggestConcepts
}

// SetCrossSpaceLinks sets the value of CrossSpaceLinks.
func (s *SpaceEnablementFields) SetCrossSpaceLinks(val OptSpaceEnablementField) {
	s.CrossSpaceLinks = val
}

// SetSpaceTemplates sets the value of SpaceTemplates.
func (s *SpaceEnablementFields) SetSpaceTemplates(val OptSpaceEnablementField) {
	s.SpaceTemplates = val
}

// SetStudioExperiences sets the value of StudioExperiences.
func (s *SpaceEnablementFields) SetStudioExperiences(val OptSpaceEnablementField) {
	s.StudioExperiences = val
}

// SetSuggestConcepts sets the value of SuggestConcepts.
func (s *SpaceEnablementFields) SetSuggestConcepts(val OptSpaceEnablementField) {
	s.SuggestConcepts = val
}

// SpaceEnablementStatusCode wraps SpaceEnablement with StatusCode.
type SpaceEnablementStatusCode struct {
	StatusCode int
	Response   SpaceEnablement
}

// GetStatusCode returns the value of StatusCode.
func (s *SpaceEnablementStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *SpaceEnablementStatusCode) GetResponse() SpaceEnablement {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *SpaceEnablementStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *SpaceEnablementStatusCode) SetResponse(val SpaceEnablement) {
	s.Response = val
}

func (*SpaceEnablementStatusCode) putSpaceEnablementsRes() {}

// Merged schema.
// Ref: #/components/schemas/SpaceEnablementSys
type SpaceEnablementSys struct {
	// Merged property.
	Type      SpaceEnablementSysType `json:"type"`
	Space     SpaceLink              `json:"space"`
	Version   int                    `json:"version"`
	CreatedAt OptDateTime            `json:"createdAt"`
	UpdatedAt OptDateTime            `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *SpaceEnablementSys) GetType() SpaceEnablementSysType {
	return s.Type
}

// GetSpace returns the value of Space.
func (s *SpaceEnablementSys) GetSpace() SpaceLink {
	return s.Space
}

// GetVersion returns the value of Version.
func (s *SpaceEnablementSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SpaceEnablementSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *SpaceEnablementSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *SpaceEnablementSys) SetType(val SpaceEnablementSysType) {
	s.Type = val
}

// SetSpace sets the value of Space.
func (s *SpaceEnablementSys) SetSpace(val SpaceLink) {
	s.Space = val
}

// SetVersion sets the value of Version.
func (s *SpaceEnablementSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SpaceEnablementSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *SpaceEnablementSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type SpaceEnablementSysType string

const (
	SpaceEnablementSysTypeSpaceEnablement SpaceEnablementSysType = "SpaceEnablement"
)

// AllValues returns all SpaceEnablementSysType values.
func (SpaceEnablementSysType) AllValues() []SpaceEnablementSysType {
	return []SpaceEnablementSysType{
		SpaceEnablementSysTypeSpaceEnablement,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SpaceEnablementSysType) MarshalText() ([]byte, error) {
	switch s {
	case SpaceEnablementSysTypeSpaceEnablement:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SpaceEnablementSysType) UnmarshalText(data []byte) error {
	switch SpaceEnablementSysType(data) {
	case SpaceEnablementSysTypeSpaceEnablement:
		*s = SpaceEnablementSysTypeSpaceEnablement
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SpaceLink
type SpaceLink struct {
	Sys SpaceLinkSys `json:"sys"`
}

// GetSys returns the value of Sys.
func (s *SpaceLink) GetSys() SpaceLinkSys {
	return s.Sys
}

// SetSys sets the value of Sys.
func (s *SpaceLink) SetSys(val SpaceLinkSys) {
	s.Sys = val
}

// Merged schema.
type SpaceLinkSys struct {
	// Merged property.
	Type SpaceLinkSysType `json:"type"`
	ID   string           `json:"id"`
	// Merged property.
	LinkType SpaceLinkSysLinkType `json:"linkType"`
}

// GetType returns the value of Type.
func (s *SpaceLinkSys) GetType() SpaceLinkSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *SpaceLinkSys) GetID() string {
	return s.ID
}

// GetLinkType returns the value of LinkType.
func (s *SpaceLinkSys) GetLinkType() SpaceLinkSysLinkType {
	return s.LinkType
}

// SetType sets the value of Type.
func (s *SpaceLinkSys) SetType(val SpaceLinkSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *SpaceLinkSys) SetID(val string) {
	s.ID = val
}

// SetLinkType sets the value of LinkType.
func (s *SpaceLinkSys) SetLinkType(val SpaceLinkSysLinkType) {
	s.LinkType = val
}

// Merged schema.
type SpaceLinkSysLinkType string

const (
	SpaceLinkSysLinkTypeSpace SpaceLinkSysLinkType = "Space"
)

// AllValues returns all SpaceLinkSysLinkType values.
func (SpaceLinkSysLinkType) AllValues() []SpaceLinkSysLinkType {
	return []SpaceLinkSysLinkType{
		SpaceLinkSysLinkTypeSpace,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SpaceLinkSysLinkType) MarshalText() ([]byte, error) {
	switch s {
	case SpaceLinkSysLinkTypeSpace:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SpaceLinkSysLinkType) UnmarshalText(data []byte) error {
	switch SpaceLinkSysLinkType(data) {
	case SpaceLinkSysLinkTypeSpace:
		*s = SpaceLinkSysLinkTypeSpace
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type SpaceLinkSysType string

const (
	SpaceLinkSysTypeLink SpaceLinkSysType = "Link"
)

// AllValues returns all SpaceLinkSysType values.
func (SpaceLinkSysType) AllValues() []SpaceLinkSysType {
	return []SpaceLinkSysType{
		SpaceLinkSysTypeLink,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SpaceLinkSysType) MarshalText() ([]byte, error) {
	switch s {
	case SpaceLinkSysTypeLink:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SpaceLinkSysType) UnmarshalText(data []byte) error {
	switch SpaceLinkSysType(data) {
	case SpaceLinkSysTypeLink:
		*s = SpaceLinkSysTypeLink
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateDeliveryApiKeyApplicationJSONUnauthorized Error

func (*UpdateDeliveryApiKeyApplicationJSONUnauthorized) updateDeliveryApiKeyRes() {}

type UpdateDeliveryApiKeyApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*UpdateDeliveryApiKeyApplicationVndContentfulManagementV1JSONUnauthorized) updateDeliveryApiKeyRes() {
}

type UpdateRoleApplicationJSONUnauthorized Error

func (*UpdateRoleApplicationJSONUnauthorized) updateRoleRes() {}

type UpdateRoleApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*UpdateRoleApplicationVndContentfulManagementV1JSONUnauthorized) updateRoleRes() {}

type UpdateWebhookDefinitionApplicationJSONUnauthorized Error

func (*UpdateWebhookDefinitionApplicationJSONUnauthorized) updateWebhookDefinitionRes() {}

type UpdateWebhookDefinitionApplicationVndContentfulManagementV1JSONUnauthorized Error

func (*UpdateWebhookDefinitionApplicationVndContentfulManagementV1JSONUnauthorized) updateWebhookDefinitionRes() {
}

// Merged schema.
// Ref: #/components/schemas/User
type User struct {
	Sys       UserSys `json:"sys"`
	Email     string  `json:"email"`
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
}

// GetSys returns the value of Sys.
func (s *User) GetSys() UserSys {
	return s.Sys
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() string {
	return s.Email
}

// GetFirstName returns the value of FirstName.
func (s *User) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *User) GetLastName() string {
	return s.LastName
}

// SetSys sets the value of Sys.
func (s *User) SetSys(val UserSys) {
	s.Sys = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val string) {
	s.Email = val
}

// SetFirstName sets the value of FirstName.
func (s *User) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *User) SetLastName(val string) {
	s.LastName = val
}

func (*User) getAuthenticatedUserRes() {}

// Merged schema.
// Ref: #/components/schemas/UserSys
type UserSys struct {
	// Merged property.
	Type      UserSysType `json:"type"`
	ID        string      `json:"id"`
	Version   int         `json:"version"`
	CreatedAt OptDateTime `json:"createdAt"`
	UpdatedAt OptDateTime `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *UserSys) GetType() UserSysType {
	return s.Type
}

// GetID returns the value of ID.
func (s *UserSys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *UserSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UserSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *UserSys) SetType(val UserSysType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *UserSys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *UserSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UserSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type UserSysType string

const (
	UserSysTypeUser UserSysType = "User"
)

// AllValues returns all UserSysType values.
func (UserSysType) AllValues() []UserSysType {
	return []UserSysType{
		UserSysTypeUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserSysType) MarshalText() ([]byte, error) {
	switch s {
	case UserSysTypeUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserSysType) UnmarshalText(data []byte) error {
	switch UserSysType(data) {
	case UserSysTypeUser:
		*s = UserSysTypeUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/WebhookDefinition
type WebhookDefinition struct {
	Sys               WebhookDefinitionSys                  `json:"sys"`
	Name              string                                `json:"name"`
	URL               string                                `json:"url"`
	Topics            []string                              `json:"topics"`
	Filters           OptNilWebhookDefinitionFilterArray    `json:"filters"`
	HttpBasicUsername OptNilString                          `json:"httpBasicUsername"`
	HttpBasicPassword OptNilString                          `json:"httpBasicPassword"`
	Headers           WebhookDefinitionHeaders              `json:"headers"`
	Transformation    OptNilWebhookDefinitionTransformation `json:"transformation"`
	Active            OptBool                               `json:"active"`
}

// GetSys returns the value of Sys.
func (s *WebhookDefinition) GetSys() WebhookDefinitionSys {
	return s.Sys
}

// GetName returns the value of Name.
func (s *WebhookDefinition) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *WebhookDefinition) GetURL() string {
	return s.URL
}

// GetTopics returns the value of Topics.
func (s *WebhookDefinition) GetTopics() []string {
	return s.Topics
}

// GetFilters returns the value of Filters.
func (s *WebhookDefinition) GetFilters() OptNilWebhookDefinitionFilterArray {
	return s.Filters
}

// GetHttpBasicUsername returns the value of HttpBasicUsername.
func (s *WebhookDefinition) GetHttpBasicUsername() OptNilString {
	return s.HttpBasicUsername
}

// GetHttpBasicPassword returns the value of HttpBasicPassword.
func (s *WebhookDefinition) GetHttpBasicPassword() OptNilString {
	return s.HttpBasicPassword
}

// GetHeaders returns the value of Headers.
func (s *WebhookDefinition) GetHeaders() WebhookDefinitionHeaders {
	return s.Headers
}

// GetTransformation returns the value of Transformation.
func (s *WebhookDefinition) GetTransformation() OptNilWebhookDefinitionTransformation {
	return s.Transformation
}

// GetActive returns the value of Active.
func (s *WebhookDefinition) GetActive() OptBool {
	return s.Active
}

// SetSys sets the value of Sys.
func (s *WebhookDefinition) SetSys(val WebhookDefinitionSys) {
	s.Sys = val
}

// SetName sets the value of Name.
func (s *WebhookDefinition) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *WebhookDefinition) SetURL(val string) {
	s.URL = val
}

// SetTopics sets the value of Topics.
func (s *WebhookDefinition) SetTopics(val []string) {
	s.Topics = val
}

// SetFilters sets the value of Filters.
func (s *WebhookDefinition) SetFilters(val OptNilWebhookDefinitionFilterArray) {
	s.Filters = val
}

// SetHttpBasicUsername sets the value of HttpBasicUsername.
func (s *WebhookDefinition) SetHttpBasicUsername(val OptNilString) {
	s.HttpBasicUsername = val
}

// SetHttpBasicPassword sets the value of HttpBasicPassword.
func (s *WebhookDefinition) SetHttpBasicPassword(val OptNilString) {
	s.HttpBasicPassword = val
}

// SetHeaders sets the value of Headers.
func (s *WebhookDefinition) SetHeaders(val WebhookDefinitionHeaders) {
	s.Headers = val
}

// SetTransformation sets the value of Transformation.
func (s *WebhookDefinition) SetTransformation(val OptNilWebhookDefinitionTransformation) {
	s.Transformation = val
}

// SetActive sets the value of Active.
func (s *WebhookDefinition) SetActive(val OptBool) {
	s.Active = val
}

func (*WebhookDefinition) getWebhookDefinitionRes() {}

// Ref: #/components/schemas/WebhookDefinitionFields
type WebhookDefinitionFields struct {
	Name              string                                      `json:"name"`
	URL               string                                      `json:"url"`
	Topics            []string                                    `json:"topics"`
	Filters           OptNilWebhookDefinitionFilterArray          `json:"filters"`
	HttpBasicUsername OptNilString                                `json:"httpBasicUsername"`
	HttpBasicPassword OptNilString                                `json:"httpBasicPassword"`
	Headers           WebhookDefinitionHeaders                    `json:"headers"`
	Transformation    OptNilWebhookDefinitionFieldsTransformation `json:"transformation"`
	Active            OptBool                                     `json:"active"`
}

// GetName returns the value of Name.
func (s *WebhookDefinitionFields) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *WebhookDefinitionFields) GetURL() string {
	return s.URL
}

// GetTopics returns the value of Topics.
func (s *WebhookDefinitionFields) GetTopics() []string {
	return s.Topics
}

// GetFilters returns the value of Filters.
func (s *WebhookDefinitionFields) GetFilters() OptNilWebhookDefinitionFilterArray {
	return s.Filters
}

// GetHttpBasicUsername returns the value of HttpBasicUsername.
func (s *WebhookDefinitionFields) GetHttpBasicUsername() OptNilString {
	return s.HttpBasicUsername
}

// GetHttpBasicPassword returns the value of HttpBasicPassword.
func (s *WebhookDefinitionFields) GetHttpBasicPassword() OptNilString {
	return s.HttpBasicPassword
}

// GetHeaders returns the value of Headers.
func (s *WebhookDefinitionFields) GetHeaders() WebhookDefinitionHeaders {
	return s.Headers
}

// GetTransformation returns the value of Transformation.
func (s *WebhookDefinitionFields) GetTransformation() OptNilWebhookDefinitionFieldsTransformation {
	return s.Transformation
}

// GetActive returns the value of Active.
func (s *WebhookDefinitionFields) GetActive() OptBool {
	return s.Active
}

// SetName sets the value of Name.
func (s *WebhookDefinitionFields) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *WebhookDefinitionFields) SetURL(val string) {
	s.URL = val
}

// SetTopics sets the value of Topics.
func (s *WebhookDefinitionFields) SetTopics(val []string) {
	s.Topics = val
}

// SetFilters sets the value of Filters.
func (s *WebhookDefinitionFields) SetFilters(val OptNilWebhookDefinitionFilterArray) {
	s.Filters = val
}

// SetHttpBasicUsername sets the value of HttpBasicUsername.
func (s *WebhookDefinitionFields) SetHttpBasicUsername(val OptNilString) {
	s.HttpBasicUsername = val
}

// SetHttpBasicPassword sets the value of HttpBasicPassword.
func (s *WebhookDefinitionFields) SetHttpBasicPassword(val OptNilString) {
	s.HttpBasicPassword = val
}

// SetHeaders sets the value of Headers.
func (s *WebhookDefinitionFields) SetHeaders(val WebhookDefinitionHeaders) {
	s.Headers = val
}

// SetTransformation sets the value of Transformation.
func (s *WebhookDefinitionFields) SetTransformation(val OptNilWebhookDefinitionFieldsTransformation) {
	s.Transformation = val
}

// SetActive sets the value of Active.
func (s *WebhookDefinitionFields) SetActive(val OptBool) {
	s.Active = val
}

type WebhookDefinitionFieldsTransformation struct {
	Method               OptString `json:"method"`
	ContentType          OptString `json:"contentType"`
	IncludeContentLength OptBool   `json:"includeContentLength"`
	Body                 jx.Raw    `json:"body"`
}

// GetMethod returns the value of Method.
func (s *WebhookDefinitionFieldsTransformation) GetMethod() OptString {
	return s.Method
}

// GetContentType returns the value of ContentType.
func (s *WebhookDefinitionFieldsTransformation) GetContentType() OptString {
	return s.ContentType
}

// GetIncludeContentLength returns the value of IncludeContentLength.
func (s *WebhookDefinitionFieldsTransformation) GetIncludeContentLength() OptBool {
	return s.IncludeContentLength
}

// GetBody returns the value of Body.
func (s *WebhookDefinitionFieldsTransformation) GetBody() jx.Raw {
	return s.Body
}

// SetMethod sets the value of Method.
func (s *WebhookDefinitionFieldsTransformation) SetMethod(val OptString) {
	s.Method = val
}

// SetContentType sets the value of ContentType.
func (s *WebhookDefinitionFieldsTransformation) SetContentType(val OptString) {
	s.ContentType = val
}

// SetIncludeContentLength sets the value of IncludeContentLength.
func (s *WebhookDefinitionFieldsTransformation) SetIncludeContentLength(val OptBool) {
	s.IncludeContentLength = val
}

// SetBody sets the value of Body.
func (s *WebhookDefinitionFieldsTransformation) SetBody(val jx.Raw) {
	s.Body = val
}

// Ref: #/components/schemas/WebhookDefinitionFilter
type WebhookDefinitionFilter struct {
	Not    OptWebhookDefinitionFilterNot `json:"not"`
	Equals WebhookDefinitionFilterEquals `json:"equals"`
	In     WebhookDefinitionFilterIn     `json:"in"`
	Regexp WebhookDefinitionFilterRegexp `json:"regexp"`
}

// GetNot returns the value of Not.
func (s *WebhookDefinitionFilter) GetNot() OptWebhookDefinitionFilterNot {
	return s.Not
}

// GetEquals returns the value of Equals.
func (s *WebhookDefinitionFilter) GetEquals() WebhookDefinitionFilterEquals {
	return s.Equals
}

// GetIn returns the value of In.
func (s *WebhookDefinitionFilter) GetIn() WebhookDefinitionFilterIn {
	return s.In
}

// GetRegexp returns the value of Regexp.
func (s *WebhookDefinitionFilter) GetRegexp() WebhookDefinitionFilterRegexp {
	return s.Regexp
}

// SetNot sets the value of Not.
func (s *WebhookDefinitionFilter) SetNot(val OptWebhookDefinitionFilterNot) {
	s.Not = val
}

// SetEquals sets the value of Equals.
func (s *WebhookDefinitionFilter) SetEquals(val WebhookDefinitionFilterEquals) {
	s.Equals = val
}

// SetIn sets the value of In.
func (s *WebhookDefinitionFilter) SetIn(val WebhookDefinitionFilterIn) {
	s.In = val
}

// SetRegexp sets the value of Regexp.
func (s *WebhookDefinitionFilter) SetRegexp(val WebhookDefinitionFilterRegexp) {
	s.Regexp = val
}

type WebhookDefinitionFilterEquals []jx.Raw

type WebhookDefinitionFilterIn []jx.Raw

// Ref: #/components/schemas/WebhookDefinitionFilterNot
type WebhookDefinitionFilterNot struct {
	Equals WebhookDefinitionFilterEquals `json:"equals"`
	In     WebhookDefinitionFilterIn     `json:"in"`
	Regexp WebhookDefinitionFilterRegexp `json:"regexp"`
}

// GetEquals returns the value of Equals.
func (s *WebhookDefinitionFilterNot) GetEquals() WebhookDefinitionFilterEquals {
	return s.Equals
}

// GetIn returns the value of In.
func (s *WebhookDefinitionFilterNot) GetIn() WebhookDefinitionFilterIn {
	return s.In
}

// GetRegexp returns the value of Regexp.
func (s *WebhookDefinitionFilterNot) GetRegexp() WebhookDefinitionFilterRegexp {
	return s.Regexp
}

// SetEquals sets the value of Equals.
func (s *WebhookDefinitionFilterNot) SetEquals(val WebhookDefinitionFilterEquals) {
	s.Equals = val
}

// SetIn sets the value of In.
func (s *WebhookDefinitionFilterNot) SetIn(val WebhookDefinitionFilterIn) {
	s.In = val
}

// SetRegexp sets the value of Regexp.
func (s *WebhookDefinitionFilterNot) SetRegexp(val WebhookDefinitionFilterRegexp) {
	s.Regexp = val
}

type WebhookDefinitionFilterRegexp []jx.Raw

// Ref: #/components/schemas/WebhookDefinitionHeader
type WebhookDefinitionHeader struct {
	Key    string    `json:"key"`
	Value  OptString `json:"value"`
	Secret OptBool   `json:"secret"`
}

// GetKey returns the value of Key.
func (s *WebhookDefinitionHeader) GetKey() string {
	return s.Key
}

// GetValue returns the value of Value.
func (s *WebhookDefinitionHeader) GetValue() OptString {
	return s.Value
}

// GetSecret returns the value of Secret.
func (s *WebhookDefinitionHeader) GetSecret() OptBool {
	return s.Secret
}

// SetKey sets the value of Key.
func (s *WebhookDefinitionHeader) SetKey(val string) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *WebhookDefinitionHeader) SetValue(val OptString) {
	s.Value = val
}

// SetSecret sets the value of Secret.
func (s *WebhookDefinitionHeader) SetSecret(val OptBool) {
	s.Secret = val
}

type WebhookDefinitionHeaders []WebhookDefinitionHeader

// WebhookDefinitionStatusCode wraps WebhookDefinition with StatusCode.
type WebhookDefinitionStatusCode struct {
	StatusCode int
	Response   WebhookDefinition
}

// GetStatusCode returns the value of StatusCode.
func (s *WebhookDefinitionStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *WebhookDefinitionStatusCode) GetResponse() WebhookDefinition {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *WebhookDefinitionStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *WebhookDefinitionStatusCode) SetResponse(val WebhookDefinition) {
	s.Response = val
}

func (*WebhookDefinitionStatusCode) createWebhookDefinitionRes() {}
func (*WebhookDefinitionStatusCode) updateWebhookDefinitionRes() {}

// Merged schema.
// Ref: #/components/schemas/WebhookDefinitionSys
type WebhookDefinitionSys struct {
	// Merged property.
	Type      WebhookDefinitionSysType `json:"type"`
	Space     SpaceLink                `json:"space"`
	ID        string                   `json:"id"`
	Version   int                      `json:"version"`
	CreatedAt OptDateTime              `json:"createdAt"`
	UpdatedAt OptDateTime              `json:"updatedAt"`
}

// GetType returns the value of Type.
func (s *WebhookDefinitionSys) GetType() WebhookDefinitionSysType {
	return s.Type
}

// GetSpace returns the value of Space.
func (s *WebhookDefinitionSys) GetSpace() SpaceLink {
	return s.Space
}

// GetID returns the value of ID.
func (s *WebhookDefinitionSys) GetID() string {
	return s.ID
}

// GetVersion returns the value of Version.
func (s *WebhookDefinitionSys) GetVersion() int {
	return s.Version
}

// GetCreatedAt returns the value of CreatedAt.
func (s *WebhookDefinitionSys) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *WebhookDefinitionSys) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetType sets the value of Type.
func (s *WebhookDefinitionSys) SetType(val WebhookDefinitionSysType) {
	s.Type = val
}

// SetSpace sets the value of Space.
func (s *WebhookDefinitionSys) SetSpace(val SpaceLink) {
	s.Space = val
}

// SetID sets the value of ID.
func (s *WebhookDefinitionSys) SetID(val string) {
	s.ID = val
}

// SetVersion sets the value of Version.
func (s *WebhookDefinitionSys) SetVersion(val int) {
	s.Version = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *WebhookDefinitionSys) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *WebhookDefinitionSys) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Merged schema.
type WebhookDefinitionSysType string

const (
	WebhookDefinitionSysTypeWebhookDefinition WebhookDefinitionSysType = "WebhookDefinition"
)

// AllValues returns all WebhookDefinitionSysType values.
func (WebhookDefinitionSysType) AllValues() []WebhookDefinitionSysType {
	return []WebhookDefinitionSysType{
		WebhookDefinitionSysTypeWebhookDefinition,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookDefinitionSysType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookDefinitionSysTypeWebhookDefinition:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookDefinitionSysType) UnmarshalText(data []byte) error {
	switch WebhookDefinitionSysType(data) {
	case WebhookDefinitionSysTypeWebhookDefinition:
		*s = WebhookDefinitionSysTypeWebhookDefinition
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type WebhookDefinitionTransformation struct {
	Method               OptString `json:"method"`
	ContentType          OptString `json:"contentType"`
	IncludeContentLength OptBool   `json:"includeContentLength"`
	Body                 jx.Raw    `json:"body"`
}

// GetMethod returns the value of Method.
func (s *WebhookDefinitionTransformation) GetMethod() OptString {
	return s.Method
}

// GetContentType returns the value of ContentType.
func (s *WebhookDefinitionTransformation) GetContentType() OptString {
	return s.ContentType
}

// GetIncludeContentLength returns the value of IncludeContentLength.
func (s *WebhookDefinitionTransformation) GetIncludeContentLength() OptBool {
	return s.IncludeContentLength
}

// GetBody returns the value of Body.
func (s *WebhookDefinitionTransformation) GetBody() jx.Raw {
	return s.Body
}

// SetMethod sets the value of Method.
func (s *WebhookDefinitionTransformation) SetMethod(val OptString) {
	s.Method = val
}

// SetContentType sets the value of ContentType.
func (s *WebhookDefinitionTransformation) SetContentType(val OptString) {
	s.ContentType = val
}

// SetIncludeContentLength sets the value of IncludeContentLength.
func (s *WebhookDefinitionTransformation) SetIncludeContentLength(val OptBool) {
	s.IncludeContentLength = val
}

// SetBody sets the value of Body.
func (s *WebhookDefinitionTransformation) SetBody(val jx.Raw) {
	s.Body = val
}
