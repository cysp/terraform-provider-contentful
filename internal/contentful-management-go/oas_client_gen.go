// Code generated by ogen, DO NOT EDIT.

package client

import (
	"context"
	"net/url"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// ActivateContentType invokes activateContentType operation.
	//
	// Activate a content type.
	//
	// PUT /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/published
	ActivateContentType(ctx context.Context, params ActivateContentTypeParams) (ActivateContentTypeRes, error)
	// CreateDeliveryApiKey invokes createDeliveryApiKey operation.
	//
	// Create a delivery api key.
	//
	// POST /spaces/{space_id}/api_keys
	CreateDeliveryApiKey(ctx context.Context, request *CreateDeliveryApiKeyReq, params CreateDeliveryApiKeyParams) (CreateDeliveryApiKeyRes, error)
	// CreatePersonalAccessToken invokes createPersonalAccessToken operation.
	//
	// Create a personal access token.
	//
	// POST /users/me/access_tokens
	CreatePersonalAccessToken(ctx context.Context, request *CreatePersonalAccessTokenReq) (CreatePersonalAccessTokenRes, error)
	// DeactivateContentType invokes deactivateContentType operation.
	//
	// Deactivate a content type.
	//
	// DELETE /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/published
	DeactivateContentType(ctx context.Context, params DeactivateContentTypeParams) (DeactivateContentTypeRes, error)
	// DeleteAppInstallation invokes deleteAppInstallation operation.
	//
	// Uninstall an app.
	//
	// DELETE /spaces/{space_id}/environments/{environment_id}/app_installations/{app_definition_id}
	DeleteAppInstallation(ctx context.Context, params DeleteAppInstallationParams) (DeleteAppInstallationRes, error)
	// DeleteContentType invokes deleteContentType operation.
	//
	// Delete a content type.
	//
	// DELETE /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}
	DeleteContentType(ctx context.Context, params DeleteContentTypeParams) (DeleteContentTypeRes, error)
	// DeleteDeliveryApiKey invokes deleteDeliveryApiKey operation.
	//
	// Delete a single delivery api key.
	//
	// DELETE /spaces/{space_id}/api_keys/{api_key_id}
	DeleteDeliveryApiKey(ctx context.Context, params DeleteDeliveryApiKeyParams) (DeleteDeliveryApiKeyRes, error)
	// GetAppInstallation invokes getAppInstallation operation.
	//
	// Get one app installation.
	//
	// GET /spaces/{space_id}/environments/{environment_id}/app_installations/{app_definition_id}
	GetAppInstallation(ctx context.Context, params GetAppInstallationParams) (GetAppInstallationRes, error)
	// GetAuthenticatedUser invokes getAuthenticatedUser operation.
	//
	// Get the authenticated user.
	//
	// GET /users/me
	GetAuthenticatedUser(ctx context.Context) (GetAuthenticatedUserRes, error)
	// GetContentType invokes getContentType operation.
	//
	// Get a content type.
	//
	// GET /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}
	GetContentType(ctx context.Context, params GetContentTypeParams) (GetContentTypeRes, error)
	// GetDeliveryApiKey invokes getDeliveryApiKey operation.
	//
	// Get a single delivery api key.
	//
	// GET /spaces/{space_id}/api_keys/{api_key_id}
	GetDeliveryApiKey(ctx context.Context, params GetDeliveryApiKeyParams) (GetDeliveryApiKeyRes, error)
	// GetEditorInterface invokes getEditorInterface operation.
	//
	// Get the editor interface for a content type.
	//
	// GET /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/editor_interface
	GetEditorInterface(ctx context.Context, params GetEditorInterfaceParams) (GetEditorInterfaceRes, error)
	// GetPersonalAccessToken invokes getPersonalAccessToken operation.
	//
	// Get a single personal access token.
	//
	// GET /users/me/access_tokens/{access_token_id}
	GetPersonalAccessToken(ctx context.Context, params GetPersonalAccessTokenParams) (GetPersonalAccessTokenRes, error)
	// GetPreviewApiKey invokes getPreviewApiKey operation.
	//
	// Get a single preview api key.
	//
	// GET /spaces/{space_id}/preview_api_keys/{preview_api_key_id}
	GetPreviewApiKey(ctx context.Context, params GetPreviewApiKeyParams) (GetPreviewApiKeyRes, error)
	// PutAppInstallation invokes putAppInstallation operation.
	//
	// Install or update an app.
	//
	// PUT /spaces/{space_id}/environments/{environment_id}/app_installations/{app_definition_id}
	PutAppInstallation(ctx context.Context, request *PutAppInstallationReq, params PutAppInstallationParams) (PutAppInstallationRes, error)
	// PutContentType invokes putContentType operation.
	//
	// Update a content type.
	//
	// PUT /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}
	PutContentType(ctx context.Context, request *PutContentTypeReq, params PutContentTypeParams) (PutContentTypeRes, error)
	// PutEditorInterface invokes putEditorInterface operation.
	//
	// Update the editor interface for a content type.
	//
	// PUT /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/editor_interface
	PutEditorInterface(ctx context.Context, request *PutEditorInterfaceReq, params PutEditorInterfaceParams) (PutEditorInterfaceRes, error)
	// RevokePersonalAccessToken invokes revokePersonalAccessToken operation.
	//
	// Revoke a personal access token.
	//
	// PUT /users/me/access_tokens/{access_token_id}/revoked
	RevokePersonalAccessToken(ctx context.Context, params RevokePersonalAccessTokenParams) (RevokePersonalAccessTokenRes, error)
	// UpdateDeliveryApiKey invokes updateDeliveryApiKey operation.
	//
	// Update a single delivery api key.
	//
	// PUT /spaces/{space_id}/api_keys/{api_key_id}
	UpdateDeliveryApiKey(ctx context.Context, request *UpdateDeliveryApiKeyReq, params UpdateDeliveryApiKeyParams) (UpdateDeliveryApiKeyRes, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	sec       SecuritySource
	baseClient
}

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, sec SecuritySource, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		sec:        sec,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// ActivateContentType invokes activateContentType operation.
//
// Activate a content type.
//
// PUT /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/published
func (c *Client) ActivateContentType(ctx context.Context, params ActivateContentTypeParams) (ActivateContentTypeRes, error) {
	res, err := c.sendActivateContentType(ctx, params)
	return res, err
}

func (c *Client) sendActivateContentType(ctx context.Context, params ActivateContentTypeParams) (res ActivateContentTypeRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [7]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/content_types/"
	{
		// Encode "content_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "content_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ContentTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	pathParts[6] = "/published"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	h := uri.NewHeaderEncoder(r.Header)
	{
		cfg := uri.HeaderParameterEncodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.IntToString(params.XContentfulVersion))
		}); err != nil {
			return res, errors.Wrap(err, "encode header")
		}
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "ActivateContentType", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeActivateContentTypeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateDeliveryApiKey invokes createDeliveryApiKey operation.
//
// Create a delivery api key.
//
// POST /spaces/{space_id}/api_keys
func (c *Client) CreateDeliveryApiKey(ctx context.Context, request *CreateDeliveryApiKeyReq, params CreateDeliveryApiKeyParams) (CreateDeliveryApiKeyRes, error) {
	res, err := c.sendCreateDeliveryApiKey(ctx, request, params)
	return res, err
}

func (c *Client) sendCreateDeliveryApiKey(ctx context.Context, request *CreateDeliveryApiKeyReq, params CreateDeliveryApiKeyParams) (res CreateDeliveryApiKeyRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/api_keys"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateDeliveryApiKeyRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "CreateDeliveryApiKey", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateDeliveryApiKeyResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreatePersonalAccessToken invokes createPersonalAccessToken operation.
//
// Create a personal access token.
//
// POST /users/me/access_tokens
func (c *Client) CreatePersonalAccessToken(ctx context.Context, request *CreatePersonalAccessTokenReq) (CreatePersonalAccessTokenRes, error) {
	res, err := c.sendCreatePersonalAccessToken(ctx, request)
	return res, err
}

func (c *Client) sendCreatePersonalAccessToken(ctx context.Context, request *CreatePersonalAccessTokenReq) (res CreatePersonalAccessTokenRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/users/me/access_tokens"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreatePersonalAccessTokenRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "CreatePersonalAccessToken", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreatePersonalAccessTokenResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeactivateContentType invokes deactivateContentType operation.
//
// Deactivate a content type.
//
// DELETE /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/published
func (c *Client) DeactivateContentType(ctx context.Context, params DeactivateContentTypeParams) (DeactivateContentTypeRes, error) {
	res, err := c.sendDeactivateContentType(ctx, params)
	return res, err
}

func (c *Client) sendDeactivateContentType(ctx context.Context, params DeactivateContentTypeParams) (res DeactivateContentTypeRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [7]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/content_types/"
	{
		// Encode "content_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "content_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ContentTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	pathParts[6] = "/published"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "DeactivateContentType", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeactivateContentTypeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteAppInstallation invokes deleteAppInstallation operation.
//
// Uninstall an app.
//
// DELETE /spaces/{space_id}/environments/{environment_id}/app_installations/{app_definition_id}
func (c *Client) DeleteAppInstallation(ctx context.Context, params DeleteAppInstallationParams) (DeleteAppInstallationRes, error) {
	res, err := c.sendDeleteAppInstallation(ctx, params)
	return res, err
}

func (c *Client) sendDeleteAppInstallation(ctx context.Context, params DeleteAppInstallationParams) (res DeleteAppInstallationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/app_installations/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "DeleteAppInstallation", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteAppInstallationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteContentType invokes deleteContentType operation.
//
// Delete a content type.
//
// DELETE /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}
func (c *Client) DeleteContentType(ctx context.Context, params DeleteContentTypeParams) (DeleteContentTypeRes, error) {
	res, err := c.sendDeleteContentType(ctx, params)
	return res, err
}

func (c *Client) sendDeleteContentType(ctx context.Context, params DeleteContentTypeParams) (res DeleteContentTypeRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/content_types/"
	{
		// Encode "content_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "content_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ContentTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "DeleteContentType", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteContentTypeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteDeliveryApiKey invokes deleteDeliveryApiKey operation.
//
// Delete a single delivery api key.
//
// DELETE /spaces/{space_id}/api_keys/{api_key_id}
func (c *Client) DeleteDeliveryApiKey(ctx context.Context, params DeleteDeliveryApiKeyParams) (DeleteDeliveryApiKeyRes, error) {
	res, err := c.sendDeleteDeliveryApiKey(ctx, params)
	return res, err
}

func (c *Client) sendDeleteDeliveryApiKey(ctx context.Context, params DeleteDeliveryApiKeyParams) (res DeleteDeliveryApiKeyRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/api_keys/"
	{
		// Encode "api_key_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "api_key_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.APIKeyID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "DeleteDeliveryApiKey", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteDeliveryApiKeyResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAppInstallation invokes getAppInstallation operation.
//
// Get one app installation.
//
// GET /spaces/{space_id}/environments/{environment_id}/app_installations/{app_definition_id}
func (c *Client) GetAppInstallation(ctx context.Context, params GetAppInstallationParams) (GetAppInstallationRes, error) {
	res, err := c.sendGetAppInstallation(ctx, params)
	return res, err
}

func (c *Client) sendGetAppInstallation(ctx context.Context, params GetAppInstallationParams) (res GetAppInstallationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/app_installations/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "GetAppInstallation", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAppInstallationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAuthenticatedUser invokes getAuthenticatedUser operation.
//
// Get the authenticated user.
//
// GET /users/me
func (c *Client) GetAuthenticatedUser(ctx context.Context) (GetAuthenticatedUserRes, error) {
	res, err := c.sendGetAuthenticatedUser(ctx)
	return res, err
}

func (c *Client) sendGetAuthenticatedUser(ctx context.Context) (res GetAuthenticatedUserRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/users/me"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "GetAuthenticatedUser", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAuthenticatedUserResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetContentType invokes getContentType operation.
//
// Get a content type.
//
// GET /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}
func (c *Client) GetContentType(ctx context.Context, params GetContentTypeParams) (GetContentTypeRes, error) {
	res, err := c.sendGetContentType(ctx, params)
	return res, err
}

func (c *Client) sendGetContentType(ctx context.Context, params GetContentTypeParams) (res GetContentTypeRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/content_types/"
	{
		// Encode "content_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "content_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ContentTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "GetContentType", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetContentTypeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetDeliveryApiKey invokes getDeliveryApiKey operation.
//
// Get a single delivery api key.
//
// GET /spaces/{space_id}/api_keys/{api_key_id}
func (c *Client) GetDeliveryApiKey(ctx context.Context, params GetDeliveryApiKeyParams) (GetDeliveryApiKeyRes, error) {
	res, err := c.sendGetDeliveryApiKey(ctx, params)
	return res, err
}

func (c *Client) sendGetDeliveryApiKey(ctx context.Context, params GetDeliveryApiKeyParams) (res GetDeliveryApiKeyRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/api_keys/"
	{
		// Encode "api_key_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "api_key_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.APIKeyID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "GetDeliveryApiKey", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetDeliveryApiKeyResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetEditorInterface invokes getEditorInterface operation.
//
// Get the editor interface for a content type.
//
// GET /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/editor_interface
func (c *Client) GetEditorInterface(ctx context.Context, params GetEditorInterfaceParams) (GetEditorInterfaceRes, error) {
	res, err := c.sendGetEditorInterface(ctx, params)
	return res, err
}

func (c *Client) sendGetEditorInterface(ctx context.Context, params GetEditorInterfaceParams) (res GetEditorInterfaceRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [7]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/content_types/"
	{
		// Encode "content_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "content_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ContentTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	pathParts[6] = "/editor_interface"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "GetEditorInterface", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetEditorInterfaceResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetPersonalAccessToken invokes getPersonalAccessToken operation.
//
// Get a single personal access token.
//
// GET /users/me/access_tokens/{access_token_id}
func (c *Client) GetPersonalAccessToken(ctx context.Context, params GetPersonalAccessTokenParams) (GetPersonalAccessTokenRes, error) {
	res, err := c.sendGetPersonalAccessToken(ctx, params)
	return res, err
}

func (c *Client) sendGetPersonalAccessToken(ctx context.Context, params GetPersonalAccessTokenParams) (res GetPersonalAccessTokenRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/users/me/access_tokens/"
	{
		// Encode "access_token_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "access_token_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AccessTokenID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "GetPersonalAccessToken", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetPersonalAccessTokenResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetPreviewApiKey invokes getPreviewApiKey operation.
//
// Get a single preview api key.
//
// GET /spaces/{space_id}/preview_api_keys/{preview_api_key_id}
func (c *Client) GetPreviewApiKey(ctx context.Context, params GetPreviewApiKeyParams) (GetPreviewApiKeyRes, error) {
	res, err := c.sendGetPreviewApiKey(ctx, params)
	return res, err
}

func (c *Client) sendGetPreviewApiKey(ctx context.Context, params GetPreviewApiKeyParams) (res GetPreviewApiKeyRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/preview_api_keys/"
	{
		// Encode "preview_api_key_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "preview_api_key_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.PreviewAPIKeyID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "GetPreviewApiKey", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetPreviewApiKeyResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutAppInstallation invokes putAppInstallation operation.
//
// Install or update an app.
//
// PUT /spaces/{space_id}/environments/{environment_id}/app_installations/{app_definition_id}
func (c *Client) PutAppInstallation(ctx context.Context, request *PutAppInstallationReq, params PutAppInstallationParams) (PutAppInstallationRes, error) {
	res, err := c.sendPutAppInstallation(ctx, request, params)
	return res, err
}

func (c *Client) sendPutAppInstallation(ctx context.Context, request *PutAppInstallationReq, params PutAppInstallationParams) (res PutAppInstallationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/app_installations/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutAppInstallationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	h := uri.NewHeaderEncoder(r.Header)
	{
		cfg := uri.HeaderParameterEncodingConfig{
			Name:    "X-Contentful-Marketplace",
			Explode: false,
		}
		if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.XContentfulMarketplace.Get(); ok {
				return e.EncodeValue(conv.StringToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode header")
		}
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "PutAppInstallation", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePutAppInstallationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutContentType invokes putContentType operation.
//
// Update a content type.
//
// PUT /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}
func (c *Client) PutContentType(ctx context.Context, request *PutContentTypeReq, params PutContentTypeParams) (PutContentTypeRes, error) {
	res, err := c.sendPutContentType(ctx, request, params)
	return res, err
}

func (c *Client) sendPutContentType(ctx context.Context, request *PutContentTypeReq, params PutContentTypeParams) (res PutContentTypeRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/content_types/"
	{
		// Encode "content_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "content_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ContentTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutContentTypeRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	h := uri.NewHeaderEncoder(r.Header)
	{
		cfg := uri.HeaderParameterEncodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.IntToString(params.XContentfulVersion))
		}); err != nil {
			return res, errors.Wrap(err, "encode header")
		}
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "PutContentType", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePutContentTypeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutEditorInterface invokes putEditorInterface operation.
//
// Update the editor interface for a content type.
//
// PUT /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/editor_interface
func (c *Client) PutEditorInterface(ctx context.Context, request *PutEditorInterfaceReq, params PutEditorInterfaceParams) (PutEditorInterfaceRes, error) {
	res, err := c.sendPutEditorInterface(ctx, request, params)
	return res, err
}

func (c *Client) sendPutEditorInterface(ctx context.Context, request *PutEditorInterfaceReq, params PutEditorInterfaceParams) (res PutEditorInterfaceRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [7]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/content_types/"
	{
		// Encode "content_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "content_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ContentTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	pathParts[6] = "/editor_interface"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutEditorInterfaceRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	h := uri.NewHeaderEncoder(r.Header)
	{
		cfg := uri.HeaderParameterEncodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.IntToString(params.XContentfulVersion))
		}); err != nil {
			return res, errors.Wrap(err, "encode header")
		}
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "PutEditorInterface", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePutEditorInterfaceResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// RevokePersonalAccessToken invokes revokePersonalAccessToken operation.
//
// Revoke a personal access token.
//
// PUT /users/me/access_tokens/{access_token_id}/revoked
func (c *Client) RevokePersonalAccessToken(ctx context.Context, params RevokePersonalAccessTokenParams) (RevokePersonalAccessTokenRes, error) {
	res, err := c.sendRevokePersonalAccessToken(ctx, params)
	return res, err
}

func (c *Client) sendRevokePersonalAccessToken(ctx context.Context, params RevokePersonalAccessTokenParams) (res RevokePersonalAccessTokenRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/users/me/access_tokens/"
	{
		// Encode "access_token_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "access_token_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AccessTokenID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/revoked"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "RevokePersonalAccessToken", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeRevokePersonalAccessTokenResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateDeliveryApiKey invokes updateDeliveryApiKey operation.
//
// Update a single delivery api key.
//
// PUT /spaces/{space_id}/api_keys/{api_key_id}
func (c *Client) UpdateDeliveryApiKey(ctx context.Context, request *UpdateDeliveryApiKeyReq, params UpdateDeliveryApiKeyParams) (UpdateDeliveryApiKeyRes, error) {
	res, err := c.sendUpdateDeliveryApiKey(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateDeliveryApiKey(ctx context.Context, request *UpdateDeliveryApiKeyReq, params UpdateDeliveryApiKeyParams) (res UpdateDeliveryApiKeyRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/api_keys/"
	{
		// Encode "api_key_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "api_key_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.APIKeyID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateDeliveryApiKeyRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	h := uri.NewHeaderEncoder(r.Header)
	{
		cfg := uri.HeaderParameterEncodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.IntToString(params.XContentfulVersion))
		}); err != nil {
			return res, errors.Wrap(err, "encode header")
		}
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, "UpdateDeliveryApiKey", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateDeliveryApiKeyResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
