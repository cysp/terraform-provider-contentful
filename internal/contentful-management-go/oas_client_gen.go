// Code generated by ogen, DO NOT EDIT.

package contentfulmanagement

import (
	"context"
	"net/url"
	"strings"

	"github.com/go-faster/errors"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// ActivateContentType invokes activateContentType operation.
	//
	// Activate a content type.
	//
	// PUT /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/published
	ActivateContentType(ctx context.Context, params ActivateContentTypeParams) (ActivateContentTypeRes, error)
	// CreateAppDefinition invokes createAppDefinition operation.
	//
	// Create an app definition.
	//
	// POST /organizations/{organization_id}/app_definitions
	CreateAppDefinition(ctx context.Context, request *AppDefinitionFields, params CreateAppDefinitionParams) (CreateAppDefinitionRes, error)
	// CreateDeliveryApiKey invokes createDeliveryApiKey operation.
	//
	// Create a delivery api key.
	//
	// POST /spaces/{space_id}/api_keys
	CreateDeliveryApiKey(ctx context.Context, request *ApiKeyRequestFields, params CreateDeliveryApiKeyParams) (CreateDeliveryApiKeyRes, error)
	// CreatePersonalAccessToken invokes createPersonalAccessToken operation.
	//
	// Create a personal access token.
	//
	// POST /users/me/access_tokens
	CreatePersonalAccessToken(ctx context.Context, request *PersonalAccessTokenRequestFields) (CreatePersonalAccessTokenRes, error)
	// CreateRole invokes createRole operation.
	//
	// Create a role.
	//
	// POST /spaces/{space_id}/roles
	CreateRole(ctx context.Context, request *RoleFields, params CreateRoleParams) (CreateRoleRes, error)
	// CreateWebhookDefinition invokes createWebhookDefinition operation.
	//
	// Create a webhook definition.
	//
	// POST /spaces/{space_id}/webhook_definitions
	CreateWebhookDefinition(ctx context.Context, request *WebhookDefinitionFields, params CreateWebhookDefinitionParams) (CreateWebhookDefinitionRes, error)
	// DeactivateContentType invokes deactivateContentType operation.
	//
	// Deactivate a content type.
	//
	// DELETE /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/published
	DeactivateContentType(ctx context.Context, params DeactivateContentTypeParams) (DeactivateContentTypeRes, error)
	// DeleteAppDefinition invokes deleteAppDefinition operation.
	//
	// Delete an app definition.
	//
	// DELETE /organizations/{organization_id}/app_definitions/{app_definition_id}
	DeleteAppDefinition(ctx context.Context, params DeleteAppDefinitionParams) (DeleteAppDefinitionRes, error)
	// DeleteAppInstallation invokes deleteAppInstallation operation.
	//
	// Uninstall an app.
	//
	// DELETE /spaces/{space_id}/environments/{environment_id}/app_installations/{app_definition_id}
	DeleteAppInstallation(ctx context.Context, params DeleteAppInstallationParams) (DeleteAppInstallationRes, error)
	// DeleteAppSigningSecret invokes deleteAppSigningSecret operation.
	//
	// Delete an app signing secret.
	//
	// DELETE /organizations/{organization_id}/app_definitions/{app_definition_id}/signing_secret
	DeleteAppSigningSecret(ctx context.Context, params DeleteAppSigningSecretParams) (DeleteAppSigningSecretRes, error)
	// DeleteContentType invokes deleteContentType operation.
	//
	// Delete a content type.
	//
	// DELETE /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}
	DeleteContentType(ctx context.Context, params DeleteContentTypeParams) (DeleteContentTypeRes, error)
	// DeleteDeliveryApiKey invokes deleteDeliveryApiKey operation.
	//
	// Delete a single delivery api key.
	//
	// DELETE /spaces/{space_id}/api_keys/{api_key_id}
	DeleteDeliveryApiKey(ctx context.Context, params DeleteDeliveryApiKeyParams) (DeleteDeliveryApiKeyRes, error)
	// DeleteExtension invokes deleteExtension operation.
	//
	// Delete an extension.
	//
	// DELETE /spaces/{space_id}/environments/{environment_id}/extensions/{extension_id}
	DeleteExtension(ctx context.Context, params DeleteExtensionParams) (DeleteExtensionRes, error)
	// DeleteResourceProvider invokes deleteResourceProvider operation.
	//
	// Delete a resource provider definition.
	//
	// DELETE /organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider
	DeleteResourceProvider(ctx context.Context, params DeleteResourceProviderParams) (DeleteResourceProviderRes, error)
	// DeleteResourceType invokes deleteResourceType operation.
	//
	// Delete a resource type definition.
	//
	// DELETE /organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider/resource_types/{resource_type_id}
	DeleteResourceType(ctx context.Context, params DeleteResourceTypeParams) (DeleteResourceTypeRes, error)
	// DeleteRole invokes deleteRole operation.
	//
	// Delete a role.
	//
	// DELETE /spaces/{space_id}/roles/{role_id}
	DeleteRole(ctx context.Context, params DeleteRoleParams) (DeleteRoleRes, error)
	// DeleteWebhookDefinition invokes deleteWebhookDefinition operation.
	//
	// Delete a webhook definition.
	//
	// DELETE /spaces/{space_id}/webhook_definitions/{webhook_definition_id}
	DeleteWebhookDefinition(ctx context.Context, params DeleteWebhookDefinitionParams) (DeleteWebhookDefinitionRes, error)
	// GetAppDefinition invokes getAppDefinition operation.
	//
	// Get one app definition.
	//
	// GET /organizations/{organization_id}/app_definitions/{app_definition_id}
	GetAppDefinition(ctx context.Context, params GetAppDefinitionParams) (GetAppDefinitionRes, error)
	// GetAppInstallation invokes getAppInstallation operation.
	//
	// Get one app installation.
	//
	// GET /spaces/{space_id}/environments/{environment_id}/app_installations/{app_definition_id}
	GetAppInstallation(ctx context.Context, params GetAppInstallationParams) (GetAppInstallationRes, error)
	// GetAppSigningSecret invokes getAppSigningSecret operation.
	//
	// Get one app signing secret.
	//
	// GET /organizations/{organization_id}/app_definitions/{app_definition_id}/signing_secret
	GetAppSigningSecret(ctx context.Context, params GetAppSigningSecretParams) (GetAppSigningSecretRes, error)
	// GetAuthenticatedUser invokes getAuthenticatedUser operation.
	//
	// Get the authenticated user.
	//
	// GET /users/me
	GetAuthenticatedUser(ctx context.Context) (GetAuthenticatedUserRes, error)
	// GetContentType invokes getContentType operation.
	//
	// Get a content type.
	//
	// GET /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}
	GetContentType(ctx context.Context, params GetContentTypeParams) (GetContentTypeRes, error)
	// GetDeliveryApiKey invokes getDeliveryApiKey operation.
	//
	// Get a single delivery api key.
	//
	// GET /spaces/{space_id}/api_keys/{api_key_id}
	GetDeliveryApiKey(ctx context.Context, params GetDeliveryApiKeyParams) (GetDeliveryApiKeyRes, error)
	// GetEditorInterface invokes getEditorInterface operation.
	//
	// Get the editor interface for a content type.
	//
	// GET /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/editor_interface
	GetEditorInterface(ctx context.Context, params GetEditorInterfaceParams) (GetEditorInterfaceRes, error)
	// GetExtension invokes getExtension operation.
	//
	// Get a single extension.
	//
	// GET /spaces/{space_id}/environments/{environment_id}/extensions/{extension_id}
	GetExtension(ctx context.Context, params GetExtensionParams) (GetExtensionRes, error)
	// GetMarketplaceAppDefinitions invokes getMarketplaceAppDefinitions operation.
	//
	// Get marketplace app definitions.
	//
	// GET /app_definitions
	GetMarketplaceAppDefinitions(ctx context.Context, params GetMarketplaceAppDefinitionsParams) (GetMarketplaceAppDefinitionsRes, error)
	// GetPersonalAccessToken invokes getPersonalAccessToken operation.
	//
	// Get a single personal access token.
	//
	// GET /users/me/access_tokens/{access_token_id}
	GetPersonalAccessToken(ctx context.Context, params GetPersonalAccessTokenParams) (GetPersonalAccessTokenRes, error)
	// GetPreviewApiKey invokes getPreviewApiKey operation.
	//
	// Get a single preview api key.
	//
	// GET /spaces/{space_id}/preview_api_keys/{preview_api_key_id}
	GetPreviewApiKey(ctx context.Context, params GetPreviewApiKeyParams) (GetPreviewApiKeyRes, error)
	// GetResourceProvider invokes getResourceProvider operation.
	//
	// Get one resource provider definition.
	//
	// GET /organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider
	GetResourceProvider(ctx context.Context, params GetResourceProviderParams) (GetResourceProviderRes, error)
	// GetResourceType invokes getResourceType operation.
	//
	// Get one resource type definition.
	//
	// GET /organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider/resource_types/{resource_type_id}
	GetResourceType(ctx context.Context, params GetResourceTypeParams) (GetResourceTypeRes, error)
	// GetRole invokes getRole operation.
	//
	// Get a role.
	//
	// GET /spaces/{space_id}/roles/{role_id}
	GetRole(ctx context.Context, params GetRoleParams) (GetRoleRes, error)
	// GetSpaceEnablements invokes getSpaceEnablements operation.
	//
	// Get enablements for a space.
	//
	// GET /spaces/{space_id}/enablements
	GetSpaceEnablements(ctx context.Context, params GetSpaceEnablementsParams) (GetSpaceEnablementsRes, error)
	// GetWebhookDefinition invokes getWebhookDefinition operation.
	//
	// Get a webhook definition.
	//
	// GET /spaces/{space_id}/webhook_definitions/{webhook_definition_id}
	GetWebhookDefinition(ctx context.Context, params GetWebhookDefinitionParams) (GetWebhookDefinitionRes, error)
	// PutAppDefinition invokes putAppDefinition operation.
	//
	// Create or update an app definition.
	//
	// PUT /organizations/{organization_id}/app_definitions/{app_definition_id}
	PutAppDefinition(ctx context.Context, request *AppDefinitionFields, params PutAppDefinitionParams) (PutAppDefinitionRes, error)
	// PutAppInstallation invokes putAppInstallation operation.
	//
	// Install or update an app.
	//
	// PUT /spaces/{space_id}/environments/{environment_id}/app_installations/{app_definition_id}
	PutAppInstallation(ctx context.Context, request *AppInstallationFields, params PutAppInstallationParams) (PutAppInstallationRes, error)
	// PutAppSigningSecret invokes putAppSigningSecret operation.
	//
	// Create or update an app signing secret.
	//
	// PUT /organizations/{organization_id}/app_definitions/{app_definition_id}/signing_secret
	PutAppSigningSecret(ctx context.Context, request *AppSigningSecretRequestFields, params PutAppSigningSecretParams) (PutAppSigningSecretRes, error)
	// PutContentType invokes putContentType operation.
	//
	// Update a content type.
	//
	// PUT /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}
	PutContentType(ctx context.Context, request *ContentTypeRequestFields, params PutContentTypeParams) (PutContentTypeRes, error)
	// PutEditorInterface invokes putEditorInterface operation.
	//
	// Update the editor interface for a content type.
	//
	// PUT /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/editor_interface
	PutEditorInterface(ctx context.Context, request *EditorInterfaceFields, params PutEditorInterfaceParams) (PutEditorInterfaceRes, error)
	// PutExtension invokes putExtension operation.
	//
	// Create or update an extension.
	//
	// PUT /spaces/{space_id}/environments/{environment_id}/extensions/{extension_id}
	PutExtension(ctx context.Context, request *ExtensionFields, params PutExtensionParams) (PutExtensionRes, error)
	// PutResourceProvider invokes putResourceProvider operation.
	//
	// Create or update a resource provider definition.
	//
	// PUT /organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider
	PutResourceProvider(ctx context.Context, request *ResourceProviderRequest, params PutResourceProviderParams) (PutResourceProviderRes, error)
	// PutResourceType invokes putResourceType operation.
	//
	// Create or update a resource type definition.
	//
	// PUT /organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider/resource_types/{resource_type_id}
	PutResourceType(ctx context.Context, request *ResourceTypeFields, params PutResourceTypeParams) (PutResourceTypeRes, error)
	// PutSpaceEnablements invokes putSpaceEnablements operation.
	//
	// Update enablements for a space.
	//
	// PUT /spaces/{space_id}/enablements
	PutSpaceEnablements(ctx context.Context, request *SpaceEnablementFields, params PutSpaceEnablementsParams) (PutSpaceEnablementsRes, error)
	// RevokePersonalAccessToken invokes revokePersonalAccessToken operation.
	//
	// Revoke a personal access token.
	//
	// PUT /users/me/access_tokens/{access_token_id}/revoked
	RevokePersonalAccessToken(ctx context.Context, params RevokePersonalAccessTokenParams) (RevokePersonalAccessTokenRes, error)
	// UpdateDeliveryApiKey invokes updateDeliveryApiKey operation.
	//
	// Update a single delivery api key.
	//
	// PUT /spaces/{space_id}/api_keys/{api_key_id}
	UpdateDeliveryApiKey(ctx context.Context, request *ApiKeyRequestFields, params UpdateDeliveryApiKeyParams) (UpdateDeliveryApiKeyRes, error)
	// UpdateRole invokes updateRole operation.
	//
	// Update a role.
	//
	// PUT /spaces/{space_id}/roles/{role_id}
	UpdateRole(ctx context.Context, request *RoleFields, params UpdateRoleParams) (UpdateRoleRes, error)
	// UpdateWebhookDefinition invokes updateWebhookDefinition operation.
	//
	// Update a webhook definition.
	//
	// PUT /spaces/{space_id}/webhook_definitions/{webhook_definition_id}
	UpdateWebhookDefinition(ctx context.Context, request *WebhookDefinitionFields, params UpdateWebhookDefinitionParams) (UpdateWebhookDefinitionRes, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	sec       SecuritySource
	baseClient
}

var _ Handler = struct {
	*Client
}{}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, sec SecuritySource, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		sec:        sec,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// ActivateContentType invokes activateContentType operation.
//
// Activate a content type.
//
// PUT /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/published
func (c *Client) ActivateContentType(ctx context.Context, params ActivateContentTypeParams) (ActivateContentTypeRes, error) {
	res, err := c.sendActivateContentType(ctx, params)
	return res, err
}

func (c *Client) sendActivateContentType(ctx context.Context, params ActivateContentTypeParams) (res ActivateContentTypeRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [7]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/content_types/"
	{
		// Encode "content_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "content_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ContentTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	pathParts[6] = "/published"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	h := uri.NewHeaderEncoder(r.Header)
	{
		cfg := uri.HeaderParameterEncodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.IntToString(params.XContentfulVersion))
		}); err != nil {
			return res, errors.Wrap(err, "encode header")
		}
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, ActivateContentTypeOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeActivateContentTypeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateAppDefinition invokes createAppDefinition operation.
//
// Create an app definition.
//
// POST /organizations/{organization_id}/app_definitions
func (c *Client) CreateAppDefinition(ctx context.Context, request *AppDefinitionFields, params CreateAppDefinitionParams) (CreateAppDefinitionRes, error) {
	res, err := c.sendCreateAppDefinition(ctx, request, params)
	return res, err
}

func (c *Client) sendCreateAppDefinition(ctx context.Context, request *AppDefinitionFields, params CreateAppDefinitionParams) (res CreateAppDefinitionRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/organizations/"
	{
		// Encode "organization_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "organization_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.OrganizationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/app_definitions"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateAppDefinitionRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, CreateAppDefinitionOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateAppDefinitionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateDeliveryApiKey invokes createDeliveryApiKey operation.
//
// Create a delivery api key.
//
// POST /spaces/{space_id}/api_keys
func (c *Client) CreateDeliveryApiKey(ctx context.Context, request *ApiKeyRequestFields, params CreateDeliveryApiKeyParams) (CreateDeliveryApiKeyRes, error) {
	res, err := c.sendCreateDeliveryApiKey(ctx, request, params)
	return res, err
}

func (c *Client) sendCreateDeliveryApiKey(ctx context.Context, request *ApiKeyRequestFields, params CreateDeliveryApiKeyParams) (res CreateDeliveryApiKeyRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/api_keys"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateDeliveryApiKeyRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, CreateDeliveryApiKeyOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateDeliveryApiKeyResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreatePersonalAccessToken invokes createPersonalAccessToken operation.
//
// Create a personal access token.
//
// POST /users/me/access_tokens
func (c *Client) CreatePersonalAccessToken(ctx context.Context, request *PersonalAccessTokenRequestFields) (CreatePersonalAccessTokenRes, error) {
	res, err := c.sendCreatePersonalAccessToken(ctx, request)
	return res, err
}

func (c *Client) sendCreatePersonalAccessToken(ctx context.Context, request *PersonalAccessTokenRequestFields) (res CreatePersonalAccessTokenRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/users/me/access_tokens"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreatePersonalAccessTokenRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, CreatePersonalAccessTokenOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreatePersonalAccessTokenResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateRole invokes createRole operation.
//
// Create a role.
//
// POST /spaces/{space_id}/roles
func (c *Client) CreateRole(ctx context.Context, request *RoleFields, params CreateRoleParams) (CreateRoleRes, error) {
	res, err := c.sendCreateRole(ctx, request, params)
	return res, err
}

func (c *Client) sendCreateRole(ctx context.Context, request *RoleFields, params CreateRoleParams) (res CreateRoleRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/roles"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateRoleRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, CreateRoleOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateRoleResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateWebhookDefinition invokes createWebhookDefinition operation.
//
// Create a webhook definition.
//
// POST /spaces/{space_id}/webhook_definitions
func (c *Client) CreateWebhookDefinition(ctx context.Context, request *WebhookDefinitionFields, params CreateWebhookDefinitionParams) (CreateWebhookDefinitionRes, error) {
	res, err := c.sendCreateWebhookDefinition(ctx, request, params)
	return res, err
}

func (c *Client) sendCreateWebhookDefinition(ctx context.Context, request *WebhookDefinitionFields, params CreateWebhookDefinitionParams) (res CreateWebhookDefinitionRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webhook_definitions"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateWebhookDefinitionRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, CreateWebhookDefinitionOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateWebhookDefinitionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeactivateContentType invokes deactivateContentType operation.
//
// Deactivate a content type.
//
// DELETE /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/published
func (c *Client) DeactivateContentType(ctx context.Context, params DeactivateContentTypeParams) (DeactivateContentTypeRes, error) {
	res, err := c.sendDeactivateContentType(ctx, params)
	return res, err
}

func (c *Client) sendDeactivateContentType(ctx context.Context, params DeactivateContentTypeParams) (res DeactivateContentTypeRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [7]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/content_types/"
	{
		// Encode "content_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "content_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ContentTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	pathParts[6] = "/published"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, DeactivateContentTypeOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeactivateContentTypeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteAppDefinition invokes deleteAppDefinition operation.
//
// Delete an app definition.
//
// DELETE /organizations/{organization_id}/app_definitions/{app_definition_id}
func (c *Client) DeleteAppDefinition(ctx context.Context, params DeleteAppDefinitionParams) (DeleteAppDefinitionRes, error) {
	res, err := c.sendDeleteAppDefinition(ctx, params)
	return res, err
}

func (c *Client) sendDeleteAppDefinition(ctx context.Context, params DeleteAppDefinitionParams) (res DeleteAppDefinitionRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/organizations/"
	{
		// Encode "organization_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "organization_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.OrganizationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/app_definitions/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, DeleteAppDefinitionOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteAppDefinitionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteAppInstallation invokes deleteAppInstallation operation.
//
// Uninstall an app.
//
// DELETE /spaces/{space_id}/environments/{environment_id}/app_installations/{app_definition_id}
func (c *Client) DeleteAppInstallation(ctx context.Context, params DeleteAppInstallationParams) (DeleteAppInstallationRes, error) {
	res, err := c.sendDeleteAppInstallation(ctx, params)
	return res, err
}

func (c *Client) sendDeleteAppInstallation(ctx context.Context, params DeleteAppInstallationParams) (res DeleteAppInstallationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/app_installations/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, DeleteAppInstallationOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteAppInstallationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteAppSigningSecret invokes deleteAppSigningSecret operation.
//
// Delete an app signing secret.
//
// DELETE /organizations/{organization_id}/app_definitions/{app_definition_id}/signing_secret
func (c *Client) DeleteAppSigningSecret(ctx context.Context, params DeleteAppSigningSecretParams) (DeleteAppSigningSecretRes, error) {
	res, err := c.sendDeleteAppSigningSecret(ctx, params)
	return res, err
}

func (c *Client) sendDeleteAppSigningSecret(ctx context.Context, params DeleteAppSigningSecretParams) (res DeleteAppSigningSecretRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/organizations/"
	{
		// Encode "organization_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "organization_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.OrganizationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/app_definitions/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/signing_secret"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, DeleteAppSigningSecretOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteAppSigningSecretResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteContentType invokes deleteContentType operation.
//
// Delete a content type.
//
// DELETE /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}
func (c *Client) DeleteContentType(ctx context.Context, params DeleteContentTypeParams) (DeleteContentTypeRes, error) {
	res, err := c.sendDeleteContentType(ctx, params)
	return res, err
}

func (c *Client) sendDeleteContentType(ctx context.Context, params DeleteContentTypeParams) (res DeleteContentTypeRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/content_types/"
	{
		// Encode "content_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "content_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ContentTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, DeleteContentTypeOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteContentTypeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteDeliveryApiKey invokes deleteDeliveryApiKey operation.
//
// Delete a single delivery api key.
//
// DELETE /spaces/{space_id}/api_keys/{api_key_id}
func (c *Client) DeleteDeliveryApiKey(ctx context.Context, params DeleteDeliveryApiKeyParams) (DeleteDeliveryApiKeyRes, error) {
	res, err := c.sendDeleteDeliveryApiKey(ctx, params)
	return res, err
}

func (c *Client) sendDeleteDeliveryApiKey(ctx context.Context, params DeleteDeliveryApiKeyParams) (res DeleteDeliveryApiKeyRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/api_keys/"
	{
		// Encode "api_key_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "api_key_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.APIKeyID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, DeleteDeliveryApiKeyOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteDeliveryApiKeyResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteExtension invokes deleteExtension operation.
//
// Delete an extension.
//
// DELETE /spaces/{space_id}/environments/{environment_id}/extensions/{extension_id}
func (c *Client) DeleteExtension(ctx context.Context, params DeleteExtensionParams) (DeleteExtensionRes, error) {
	res, err := c.sendDeleteExtension(ctx, params)
	return res, err
}

func (c *Client) sendDeleteExtension(ctx context.Context, params DeleteExtensionParams) (res DeleteExtensionRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/extensions/"
	{
		// Encode "extension_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "extension_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ExtensionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, DeleteExtensionOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteExtensionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteResourceProvider invokes deleteResourceProvider operation.
//
// Delete a resource provider definition.
//
// DELETE /organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider
func (c *Client) DeleteResourceProvider(ctx context.Context, params DeleteResourceProviderParams) (DeleteResourceProviderRes, error) {
	res, err := c.sendDeleteResourceProvider(ctx, params)
	return res, err
}

func (c *Client) sendDeleteResourceProvider(ctx context.Context, params DeleteResourceProviderParams) (res DeleteResourceProviderRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/organizations/"
	{
		// Encode "organization_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "organization_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.OrganizationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/app_definitions/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/resource_provider"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, DeleteResourceProviderOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteResourceProviderResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteResourceType invokes deleteResourceType operation.
//
// Delete a resource type definition.
//
// DELETE /organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider/resource_types/{resource_type_id}
func (c *Client) DeleteResourceType(ctx context.Context, params DeleteResourceTypeParams) (DeleteResourceTypeRes, error) {
	res, err := c.sendDeleteResourceType(ctx, params)
	return res, err
}

func (c *Client) sendDeleteResourceType(ctx context.Context, params DeleteResourceTypeParams) (res DeleteResourceTypeRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/organizations/"
	{
		// Encode "organization_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "organization_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.OrganizationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/app_definitions/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/resource_provider/resource_types/"
	{
		// Encode "resource_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "resource_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ResourceTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, DeleteResourceTypeOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteResourceTypeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteRole invokes deleteRole operation.
//
// Delete a role.
//
// DELETE /spaces/{space_id}/roles/{role_id}
func (c *Client) DeleteRole(ctx context.Context, params DeleteRoleParams) (DeleteRoleRes, error) {
	res, err := c.sendDeleteRole(ctx, params)
	return res, err
}

func (c *Client) sendDeleteRole(ctx context.Context, params DeleteRoleParams) (res DeleteRoleRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/roles/"
	{
		// Encode "role_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "role_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.RoleID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, DeleteRoleOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteRoleResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteWebhookDefinition invokes deleteWebhookDefinition operation.
//
// Delete a webhook definition.
//
// DELETE /spaces/{space_id}/webhook_definitions/{webhook_definition_id}
func (c *Client) DeleteWebhookDefinition(ctx context.Context, params DeleteWebhookDefinitionParams) (DeleteWebhookDefinitionRes, error) {
	res, err := c.sendDeleteWebhookDefinition(ctx, params)
	return res, err
}

func (c *Client) sendDeleteWebhookDefinition(ctx context.Context, params DeleteWebhookDefinitionParams) (res DeleteWebhookDefinitionRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webhook_definitions/"
	{
		// Encode "webhook_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "webhook_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.WebhookDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, DeleteWebhookDefinitionOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteWebhookDefinitionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAppDefinition invokes getAppDefinition operation.
//
// Get one app definition.
//
// GET /organizations/{organization_id}/app_definitions/{app_definition_id}
func (c *Client) GetAppDefinition(ctx context.Context, params GetAppDefinitionParams) (GetAppDefinitionRes, error) {
	res, err := c.sendGetAppDefinition(ctx, params)
	return res, err
}

func (c *Client) sendGetAppDefinition(ctx context.Context, params GetAppDefinitionParams) (res GetAppDefinitionRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/organizations/"
	{
		// Encode "organization_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "organization_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.OrganizationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/app_definitions/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, GetAppDefinitionOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAppDefinitionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAppInstallation invokes getAppInstallation operation.
//
// Get one app installation.
//
// GET /spaces/{space_id}/environments/{environment_id}/app_installations/{app_definition_id}
func (c *Client) GetAppInstallation(ctx context.Context, params GetAppInstallationParams) (GetAppInstallationRes, error) {
	res, err := c.sendGetAppInstallation(ctx, params)
	return res, err
}

func (c *Client) sendGetAppInstallation(ctx context.Context, params GetAppInstallationParams) (res GetAppInstallationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/app_installations/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, GetAppInstallationOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAppInstallationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAppSigningSecret invokes getAppSigningSecret operation.
//
// Get one app signing secret.
//
// GET /organizations/{organization_id}/app_definitions/{app_definition_id}/signing_secret
func (c *Client) GetAppSigningSecret(ctx context.Context, params GetAppSigningSecretParams) (GetAppSigningSecretRes, error) {
	res, err := c.sendGetAppSigningSecret(ctx, params)
	return res, err
}

func (c *Client) sendGetAppSigningSecret(ctx context.Context, params GetAppSigningSecretParams) (res GetAppSigningSecretRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/organizations/"
	{
		// Encode "organization_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "organization_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.OrganizationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/app_definitions/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/signing_secret"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, GetAppSigningSecretOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAppSigningSecretResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAuthenticatedUser invokes getAuthenticatedUser operation.
//
// Get the authenticated user.
//
// GET /users/me
func (c *Client) GetAuthenticatedUser(ctx context.Context) (GetAuthenticatedUserRes, error) {
	res, err := c.sendGetAuthenticatedUser(ctx)
	return res, err
}

func (c *Client) sendGetAuthenticatedUser(ctx context.Context) (res GetAuthenticatedUserRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/users/me"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, GetAuthenticatedUserOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAuthenticatedUserResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetContentType invokes getContentType operation.
//
// Get a content type.
//
// GET /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}
func (c *Client) GetContentType(ctx context.Context, params GetContentTypeParams) (GetContentTypeRes, error) {
	res, err := c.sendGetContentType(ctx, params)
	return res, err
}

func (c *Client) sendGetContentType(ctx context.Context, params GetContentTypeParams) (res GetContentTypeRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/content_types/"
	{
		// Encode "content_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "content_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ContentTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, GetContentTypeOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetContentTypeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetDeliveryApiKey invokes getDeliveryApiKey operation.
//
// Get a single delivery api key.
//
// GET /spaces/{space_id}/api_keys/{api_key_id}
func (c *Client) GetDeliveryApiKey(ctx context.Context, params GetDeliveryApiKeyParams) (GetDeliveryApiKeyRes, error) {
	res, err := c.sendGetDeliveryApiKey(ctx, params)
	return res, err
}

func (c *Client) sendGetDeliveryApiKey(ctx context.Context, params GetDeliveryApiKeyParams) (res GetDeliveryApiKeyRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/api_keys/"
	{
		// Encode "api_key_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "api_key_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.APIKeyID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, GetDeliveryApiKeyOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetDeliveryApiKeyResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetEditorInterface invokes getEditorInterface operation.
//
// Get the editor interface for a content type.
//
// GET /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/editor_interface
func (c *Client) GetEditorInterface(ctx context.Context, params GetEditorInterfaceParams) (GetEditorInterfaceRes, error) {
	res, err := c.sendGetEditorInterface(ctx, params)
	return res, err
}

func (c *Client) sendGetEditorInterface(ctx context.Context, params GetEditorInterfaceParams) (res GetEditorInterfaceRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [7]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/content_types/"
	{
		// Encode "content_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "content_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ContentTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	pathParts[6] = "/editor_interface"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, GetEditorInterfaceOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetEditorInterfaceResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetExtension invokes getExtension operation.
//
// Get a single extension.
//
// GET /spaces/{space_id}/environments/{environment_id}/extensions/{extension_id}
func (c *Client) GetExtension(ctx context.Context, params GetExtensionParams) (GetExtensionRes, error) {
	res, err := c.sendGetExtension(ctx, params)
	return res, err
}

func (c *Client) sendGetExtension(ctx context.Context, params GetExtensionParams) (res GetExtensionRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/extensions/"
	{
		// Encode "extension_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "extension_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ExtensionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, GetExtensionOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetExtensionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetMarketplaceAppDefinitions invokes getMarketplaceAppDefinitions operation.
//
// Get marketplace app definitions.
//
// GET /app_definitions
func (c *Client) GetMarketplaceAppDefinitions(ctx context.Context, params GetMarketplaceAppDefinitionsParams) (GetMarketplaceAppDefinitionsRes, error) {
	res, err := c.sendGetMarketplaceAppDefinitions(ctx, params)
	return res, err
}

func (c *Client) sendGetMarketplaceAppDefinitions(ctx context.Context, params GetMarketplaceAppDefinitionsParams) (res GetMarketplaceAppDefinitionsRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/app_definitions"
	uri.AddPathParts(u, pathParts[:]...)

	q := uri.NewQueryEncoder()
	{
		// Encode "sys.id[in]" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "sys.id[in]",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.SysIDIn {
					if err := func() error {
						return e.EncodeValue(conv.StringToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, GetMarketplaceAppDefinitionsOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetMarketplaceAppDefinitionsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetPersonalAccessToken invokes getPersonalAccessToken operation.
//
// Get a single personal access token.
//
// GET /users/me/access_tokens/{access_token_id}
func (c *Client) GetPersonalAccessToken(ctx context.Context, params GetPersonalAccessTokenParams) (GetPersonalAccessTokenRes, error) {
	res, err := c.sendGetPersonalAccessToken(ctx, params)
	return res, err
}

func (c *Client) sendGetPersonalAccessToken(ctx context.Context, params GetPersonalAccessTokenParams) (res GetPersonalAccessTokenRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/users/me/access_tokens/"
	{
		// Encode "access_token_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "access_token_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AccessTokenID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, GetPersonalAccessTokenOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetPersonalAccessTokenResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetPreviewApiKey invokes getPreviewApiKey operation.
//
// Get a single preview api key.
//
// GET /spaces/{space_id}/preview_api_keys/{preview_api_key_id}
func (c *Client) GetPreviewApiKey(ctx context.Context, params GetPreviewApiKeyParams) (GetPreviewApiKeyRes, error) {
	res, err := c.sendGetPreviewApiKey(ctx, params)
	return res, err
}

func (c *Client) sendGetPreviewApiKey(ctx context.Context, params GetPreviewApiKeyParams) (res GetPreviewApiKeyRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/preview_api_keys/"
	{
		// Encode "preview_api_key_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "preview_api_key_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.PreviewAPIKeyID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, GetPreviewApiKeyOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetPreviewApiKeyResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetResourceProvider invokes getResourceProvider operation.
//
// Get one resource provider definition.
//
// GET /organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider
func (c *Client) GetResourceProvider(ctx context.Context, params GetResourceProviderParams) (GetResourceProviderRes, error) {
	res, err := c.sendGetResourceProvider(ctx, params)
	return res, err
}

func (c *Client) sendGetResourceProvider(ctx context.Context, params GetResourceProviderParams) (res GetResourceProviderRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/organizations/"
	{
		// Encode "organization_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "organization_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.OrganizationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/app_definitions/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/resource_provider"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, GetResourceProviderOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetResourceProviderResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetResourceType invokes getResourceType operation.
//
// Get one resource type definition.
//
// GET /organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider/resource_types/{resource_type_id}
func (c *Client) GetResourceType(ctx context.Context, params GetResourceTypeParams) (GetResourceTypeRes, error) {
	res, err := c.sendGetResourceType(ctx, params)
	return res, err
}

func (c *Client) sendGetResourceType(ctx context.Context, params GetResourceTypeParams) (res GetResourceTypeRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/organizations/"
	{
		// Encode "organization_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "organization_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.OrganizationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/app_definitions/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/resource_provider/resource_types/"
	{
		// Encode "resource_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "resource_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ResourceTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, GetResourceTypeOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetResourceTypeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetRole invokes getRole operation.
//
// Get a role.
//
// GET /spaces/{space_id}/roles/{role_id}
func (c *Client) GetRole(ctx context.Context, params GetRoleParams) (GetRoleRes, error) {
	res, err := c.sendGetRole(ctx, params)
	return res, err
}

func (c *Client) sendGetRole(ctx context.Context, params GetRoleParams) (res GetRoleRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/roles/"
	{
		// Encode "role_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "role_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.RoleID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, GetRoleOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetRoleResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetSpaceEnablements invokes getSpaceEnablements operation.
//
// Get enablements for a space.
//
// GET /spaces/{space_id}/enablements
func (c *Client) GetSpaceEnablements(ctx context.Context, params GetSpaceEnablementsParams) (GetSpaceEnablementsRes, error) {
	res, err := c.sendGetSpaceEnablements(ctx, params)
	return res, err
}

func (c *Client) sendGetSpaceEnablements(ctx context.Context, params GetSpaceEnablementsParams) (res GetSpaceEnablementsRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/enablements"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, GetSpaceEnablementsOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetSpaceEnablementsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetWebhookDefinition invokes getWebhookDefinition operation.
//
// Get a webhook definition.
//
// GET /spaces/{space_id}/webhook_definitions/{webhook_definition_id}
func (c *Client) GetWebhookDefinition(ctx context.Context, params GetWebhookDefinitionParams) (GetWebhookDefinitionRes, error) {
	res, err := c.sendGetWebhookDefinition(ctx, params)
	return res, err
}

func (c *Client) sendGetWebhookDefinition(ctx context.Context, params GetWebhookDefinitionParams) (res GetWebhookDefinitionRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webhook_definitions/"
	{
		// Encode "webhook_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "webhook_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.WebhookDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, GetWebhookDefinitionOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetWebhookDefinitionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutAppDefinition invokes putAppDefinition operation.
//
// Create or update an app definition.
//
// PUT /organizations/{organization_id}/app_definitions/{app_definition_id}
func (c *Client) PutAppDefinition(ctx context.Context, request *AppDefinitionFields, params PutAppDefinitionParams) (PutAppDefinitionRes, error) {
	res, err := c.sendPutAppDefinition(ctx, request, params)
	return res, err
}

func (c *Client) sendPutAppDefinition(ctx context.Context, request *AppDefinitionFields, params PutAppDefinitionParams) (res PutAppDefinitionRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/organizations/"
	{
		// Encode "organization_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "organization_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.OrganizationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/app_definitions/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutAppDefinitionRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, PutAppDefinitionOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePutAppDefinitionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutAppInstallation invokes putAppInstallation operation.
//
// Install or update an app.
//
// PUT /spaces/{space_id}/environments/{environment_id}/app_installations/{app_definition_id}
func (c *Client) PutAppInstallation(ctx context.Context, request *AppInstallationFields, params PutAppInstallationParams) (PutAppInstallationRes, error) {
	res, err := c.sendPutAppInstallation(ctx, request, params)
	return res, err
}

func (c *Client) sendPutAppInstallation(ctx context.Context, request *AppInstallationFields, params PutAppInstallationParams) (res PutAppInstallationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/app_installations/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutAppInstallationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	h := uri.NewHeaderEncoder(r.Header)
	{
		cfg := uri.HeaderParameterEncodingConfig{
			Name:    "X-Contentful-Marketplace",
			Explode: false,
		}
		if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.XContentfulMarketplace.Get(); ok {
				return e.EncodeValue(conv.StringToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode header")
		}
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, PutAppInstallationOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePutAppInstallationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutAppSigningSecret invokes putAppSigningSecret operation.
//
// Create or update an app signing secret.
//
// PUT /organizations/{organization_id}/app_definitions/{app_definition_id}/signing_secret
func (c *Client) PutAppSigningSecret(ctx context.Context, request *AppSigningSecretRequestFields, params PutAppSigningSecretParams) (PutAppSigningSecretRes, error) {
	res, err := c.sendPutAppSigningSecret(ctx, request, params)
	return res, err
}

func (c *Client) sendPutAppSigningSecret(ctx context.Context, request *AppSigningSecretRequestFields, params PutAppSigningSecretParams) (res PutAppSigningSecretRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/organizations/"
	{
		// Encode "organization_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "organization_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.OrganizationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/app_definitions/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/signing_secret"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutAppSigningSecretRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, PutAppSigningSecretOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePutAppSigningSecretResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutContentType invokes putContentType operation.
//
// Update a content type.
//
// PUT /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}
func (c *Client) PutContentType(ctx context.Context, request *ContentTypeRequestFields, params PutContentTypeParams) (PutContentTypeRes, error) {
	res, err := c.sendPutContentType(ctx, request, params)
	return res, err
}

func (c *Client) sendPutContentType(ctx context.Context, request *ContentTypeRequestFields, params PutContentTypeParams) (res PutContentTypeRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/content_types/"
	{
		// Encode "content_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "content_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ContentTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutContentTypeRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	h := uri.NewHeaderEncoder(r.Header)
	{
		cfg := uri.HeaderParameterEncodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.IntToString(params.XContentfulVersion))
		}); err != nil {
			return res, errors.Wrap(err, "encode header")
		}
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, PutContentTypeOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePutContentTypeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutEditorInterface invokes putEditorInterface operation.
//
// Update the editor interface for a content type.
//
// PUT /spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/editor_interface
func (c *Client) PutEditorInterface(ctx context.Context, request *EditorInterfaceFields, params PutEditorInterfaceParams) (PutEditorInterfaceRes, error) {
	res, err := c.sendPutEditorInterface(ctx, request, params)
	return res, err
}

func (c *Client) sendPutEditorInterface(ctx context.Context, request *EditorInterfaceFields, params PutEditorInterfaceParams) (res PutEditorInterfaceRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [7]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/content_types/"
	{
		// Encode "content_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "content_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ContentTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	pathParts[6] = "/editor_interface"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutEditorInterfaceRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	h := uri.NewHeaderEncoder(r.Header)
	{
		cfg := uri.HeaderParameterEncodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.IntToString(params.XContentfulVersion))
		}); err != nil {
			return res, errors.Wrap(err, "encode header")
		}
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, PutEditorInterfaceOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePutEditorInterfaceResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutExtension invokes putExtension operation.
//
// Create or update an extension.
//
// PUT /spaces/{space_id}/environments/{environment_id}/extensions/{extension_id}
func (c *Client) PutExtension(ctx context.Context, request *ExtensionFields, params PutExtensionParams) (PutExtensionRes, error) {
	res, err := c.sendPutExtension(ctx, request, params)
	return res, err
}

func (c *Client) sendPutExtension(ctx context.Context, request *ExtensionFields, params PutExtensionParams) (res PutExtensionRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/environments/"
	{
		// Encode "environment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "environment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.EnvironmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/extensions/"
	{
		// Encode "extension_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "extension_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ExtensionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutExtensionRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	h := uri.NewHeaderEncoder(r.Header)
	{
		cfg := uri.HeaderParameterEncodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.IntToString(params.XContentfulVersion))
		}); err != nil {
			return res, errors.Wrap(err, "encode header")
		}
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, PutExtensionOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePutExtensionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutResourceProvider invokes putResourceProvider operation.
//
// Create or update a resource provider definition.
//
// PUT /organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider
func (c *Client) PutResourceProvider(ctx context.Context, request *ResourceProviderRequest, params PutResourceProviderParams) (PutResourceProviderRes, error) {
	res, err := c.sendPutResourceProvider(ctx, request, params)
	return res, err
}

func (c *Client) sendPutResourceProvider(ctx context.Context, request *ResourceProviderRequest, params PutResourceProviderParams) (res PutResourceProviderRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/organizations/"
	{
		// Encode "organization_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "organization_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.OrganizationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/app_definitions/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/resource_provider"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutResourceProviderRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, PutResourceProviderOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePutResourceProviderResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutResourceType invokes putResourceType operation.
//
// Create or update a resource type definition.
//
// PUT /organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider/resource_types/{resource_type_id}
func (c *Client) PutResourceType(ctx context.Context, request *ResourceTypeFields, params PutResourceTypeParams) (PutResourceTypeRes, error) {
	res, err := c.sendPutResourceType(ctx, request, params)
	return res, err
}

func (c *Client) sendPutResourceType(ctx context.Context, request *ResourceTypeFields, params PutResourceTypeParams) (res PutResourceTypeRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [6]string
	pathParts[0] = "/organizations/"
	{
		// Encode "organization_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "organization_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.OrganizationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/app_definitions/"
	{
		// Encode "app_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "app_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AppDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/resource_provider/resource_types/"
	{
		// Encode "resource_type_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "resource_type_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ResourceTypeID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[5] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutResourceTypeRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, PutResourceTypeOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePutResourceTypeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutSpaceEnablements invokes putSpaceEnablements operation.
//
// Update enablements for a space.
//
// PUT /spaces/{space_id}/enablements
func (c *Client) PutSpaceEnablements(ctx context.Context, request *SpaceEnablementFields, params PutSpaceEnablementsParams) (PutSpaceEnablementsRes, error) {
	res, err := c.sendPutSpaceEnablements(ctx, request, params)
	return res, err
}

func (c *Client) sendPutSpaceEnablements(ctx context.Context, request *SpaceEnablementFields, params PutSpaceEnablementsParams) (res PutSpaceEnablementsRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/enablements"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutSpaceEnablementsRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	h := uri.NewHeaderEncoder(r.Header)
	{
		cfg := uri.HeaderParameterEncodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.IntToString(params.XContentfulVersion))
		}); err != nil {
			return res, errors.Wrap(err, "encode header")
		}
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, PutSpaceEnablementsOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePutSpaceEnablementsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// RevokePersonalAccessToken invokes revokePersonalAccessToken operation.
//
// Revoke a personal access token.
//
// PUT /users/me/access_tokens/{access_token_id}/revoked
func (c *Client) RevokePersonalAccessToken(ctx context.Context, params RevokePersonalAccessTokenParams) (RevokePersonalAccessTokenRes, error) {
	res, err := c.sendRevokePersonalAccessToken(ctx, params)
	return res, err
}

func (c *Client) sendRevokePersonalAccessToken(ctx context.Context, params RevokePersonalAccessTokenParams) (res RevokePersonalAccessTokenRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/users/me/access_tokens/"
	{
		// Encode "access_token_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "access_token_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.AccessTokenID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/revoked"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, RevokePersonalAccessTokenOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeRevokePersonalAccessTokenResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateDeliveryApiKey invokes updateDeliveryApiKey operation.
//
// Update a single delivery api key.
//
// PUT /spaces/{space_id}/api_keys/{api_key_id}
func (c *Client) UpdateDeliveryApiKey(ctx context.Context, request *ApiKeyRequestFields, params UpdateDeliveryApiKeyParams) (UpdateDeliveryApiKeyRes, error) {
	res, err := c.sendUpdateDeliveryApiKey(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateDeliveryApiKey(ctx context.Context, request *ApiKeyRequestFields, params UpdateDeliveryApiKeyParams) (res UpdateDeliveryApiKeyRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/api_keys/"
	{
		// Encode "api_key_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "api_key_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.APIKeyID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateDeliveryApiKeyRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	h := uri.NewHeaderEncoder(r.Header)
	{
		cfg := uri.HeaderParameterEncodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.IntToString(params.XContentfulVersion))
		}); err != nil {
			return res, errors.Wrap(err, "encode header")
		}
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, UpdateDeliveryApiKeyOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateDeliveryApiKeyResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateRole invokes updateRole operation.
//
// Update a role.
//
// PUT /spaces/{space_id}/roles/{role_id}
func (c *Client) UpdateRole(ctx context.Context, request *RoleFields, params UpdateRoleParams) (UpdateRoleRes, error) {
	res, err := c.sendUpdateRole(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateRole(ctx context.Context, request *RoleFields, params UpdateRoleParams) (res UpdateRoleRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/roles/"
	{
		// Encode "role_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "role_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.RoleID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateRoleRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	h := uri.NewHeaderEncoder(r.Header)
	{
		cfg := uri.HeaderParameterEncodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.IntToString(params.XContentfulVersion))
		}); err != nil {
			return res, errors.Wrap(err, "encode header")
		}
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, UpdateRoleOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateRoleResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateWebhookDefinition invokes updateWebhookDefinition operation.
//
// Update a webhook definition.
//
// PUT /spaces/{space_id}/webhook_definitions/{webhook_definition_id}
func (c *Client) UpdateWebhookDefinition(ctx context.Context, request *WebhookDefinitionFields, params UpdateWebhookDefinitionParams) (UpdateWebhookDefinitionRes, error) {
	res, err := c.sendUpdateWebhookDefinition(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateWebhookDefinition(ctx context.Context, request *WebhookDefinitionFields, params UpdateWebhookDefinitionParams) (res UpdateWebhookDefinitionRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/spaces/"
	{
		// Encode "space_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "space_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SpaceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/webhook_definitions/"
	{
		// Encode "webhook_definition_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "webhook_definition_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.WebhookDefinitionID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateWebhookDefinitionRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	h := uri.NewHeaderEncoder(r.Header)
	{
		cfg := uri.HeaderParameterEncodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.IntToString(params.XContentfulVersion))
		}); err != nil {
			return res, errors.Wrap(err, "encode header")
		}
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityAccessToken(ctx, UpdateWebhookDefinitionOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"AccessToken\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateWebhookDefinitionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
