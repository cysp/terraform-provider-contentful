// Code generated by ogen, DO NOT EDIT.

package contentfulmanagement

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// ActivateContentTypeParams is parameters of activateContentType operation.
type ActivateContentTypeParams struct {
	SpaceID            string
	EnvironmentID      string
	ContentTypeID      string
	XContentfulVersion int
}

func unpackActivateContentTypeParams(packed middleware.Parameters) (params ActivateContentTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "content_type_id",
			In:   "path",
		}
		params.ContentTypeID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Contentful-Version",
			In:   "header",
		}
		params.XContentfulVersion = packed[key].(int)
	}
	return params
}

func decodeActivateContentTypeParams(args [3]string, argsEscaped bool, r *http.Request) (params ActivateContentTypeParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: environment_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: content_type_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "content_type_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContentTypeID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "content_type_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode header: X-Contentful-Version.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.XContentfulVersion = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Contentful-Version",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// CreateAppDefinitionParams is parameters of createAppDefinition operation.
type CreateAppDefinitionParams struct {
	OrganizationID string
}

func unpackCreateAppDefinitionParams(packed middleware.Parameters) (params CreateAppDefinitionParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_id",
			In:   "path",
		}
		params.OrganizationID = packed[key].(string)
	}
	return params
}

func decodeCreateAppDefinitionParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateAppDefinitionParams, _ error) {
	// Decode path: organization_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateDeliveryApiKeyParams is parameters of createDeliveryApiKey operation.
type CreateDeliveryApiKeyParams struct {
	SpaceID string
}

func unpackCreateDeliveryApiKeyParams(packed middleware.Parameters) (params CreateDeliveryApiKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	return params
}

func decodeCreateDeliveryApiKeyParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateDeliveryApiKeyParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateRoleParams is parameters of createRole operation.
type CreateRoleParams struct {
	SpaceID string
}

func unpackCreateRoleParams(packed middleware.Parameters) (params CreateRoleParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	return params
}

func decodeCreateRoleParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateRoleParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateWebhookDefinitionParams is parameters of createWebhookDefinition operation.
type CreateWebhookDefinitionParams struct {
	SpaceID string
}

func unpackCreateWebhookDefinitionParams(packed middleware.Parameters) (params CreateWebhookDefinitionParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	return params
}

func decodeCreateWebhookDefinitionParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateWebhookDefinitionParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeactivateContentTypeParams is parameters of deactivateContentType operation.
type DeactivateContentTypeParams struct {
	SpaceID       string
	EnvironmentID string
	ContentTypeID string
}

func unpackDeactivateContentTypeParams(packed middleware.Parameters) (params DeactivateContentTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "content_type_id",
			In:   "path",
		}
		params.ContentTypeID = packed[key].(string)
	}
	return params
}

func decodeDeactivateContentTypeParams(args [3]string, argsEscaped bool, r *http.Request) (params DeactivateContentTypeParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: environment_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: content_type_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "content_type_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContentTypeID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "content_type_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteAppDefinitionParams is parameters of deleteAppDefinition operation.
type DeleteAppDefinitionParams struct {
	OrganizationID  string
	AppDefinitionID string
}

func unpackDeleteAppDefinitionParams(packed middleware.Parameters) (params DeleteAppDefinitionParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_id",
			In:   "path",
		}
		params.OrganizationID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "app_definition_id",
			In:   "path",
		}
		params.AppDefinitionID = packed[key].(string)
	}
	return params
}

func decodeDeleteAppDefinitionParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteAppDefinitionParams, _ error) {
	// Decode path: organization_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: app_definition_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "app_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteAppInstallationParams is parameters of deleteAppInstallation operation.
type DeleteAppInstallationParams struct {
	SpaceID         string
	EnvironmentID   string
	AppDefinitionID string
}

func unpackDeleteAppInstallationParams(packed middleware.Parameters) (params DeleteAppInstallationParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "app_definition_id",
			In:   "path",
		}
		params.AppDefinitionID = packed[key].(string)
	}
	return params
}

func decodeDeleteAppInstallationParams(args [3]string, argsEscaped bool, r *http.Request) (params DeleteAppInstallationParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: environment_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: app_definition_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "app_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteAppSigningSecretParams is parameters of deleteAppSigningSecret operation.
type DeleteAppSigningSecretParams struct {
	OrganizationID  string
	AppDefinitionID string
}

func unpackDeleteAppSigningSecretParams(packed middleware.Parameters) (params DeleteAppSigningSecretParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_id",
			In:   "path",
		}
		params.OrganizationID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "app_definition_id",
			In:   "path",
		}
		params.AppDefinitionID = packed[key].(string)
	}
	return params
}

func decodeDeleteAppSigningSecretParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteAppSigningSecretParams, _ error) {
	// Decode path: organization_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: app_definition_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "app_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteContentTypeParams is parameters of deleteContentType operation.
type DeleteContentTypeParams struct {
	SpaceID       string
	EnvironmentID string
	ContentTypeID string
}

func unpackDeleteContentTypeParams(packed middleware.Parameters) (params DeleteContentTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "content_type_id",
			In:   "path",
		}
		params.ContentTypeID = packed[key].(string)
	}
	return params
}

func decodeDeleteContentTypeParams(args [3]string, argsEscaped bool, r *http.Request) (params DeleteContentTypeParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: environment_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: content_type_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "content_type_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContentTypeID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "content_type_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteDeliveryApiKeyParams is parameters of deleteDeliveryApiKey operation.
type DeleteDeliveryApiKeyParams struct {
	SpaceID  string
	APIKeyID string
}

func unpackDeleteDeliveryApiKeyParams(packed middleware.Parameters) (params DeleteDeliveryApiKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "api_key_id",
			In:   "path",
		}
		params.APIKeyID = packed[key].(string)
	}
	return params
}

func decodeDeleteDeliveryApiKeyParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteDeliveryApiKeyParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: api_key_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "api_key_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.APIKeyID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "api_key_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteExtensionParams is parameters of deleteExtension operation.
type DeleteExtensionParams struct {
	SpaceID       string
	EnvironmentID string
	ExtensionID   string
}

func unpackDeleteExtensionParams(packed middleware.Parameters) (params DeleteExtensionParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "extension_id",
			In:   "path",
		}
		params.ExtensionID = packed[key].(string)
	}
	return params
}

func decodeDeleteExtensionParams(args [3]string, argsEscaped bool, r *http.Request) (params DeleteExtensionParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: environment_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: extension_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "extension_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ExtensionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "extension_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteResourceProviderParams is parameters of deleteResourceProvider operation.
type DeleteResourceProviderParams struct {
	OrganizationID  string
	AppDefinitionID string
}

func unpackDeleteResourceProviderParams(packed middleware.Parameters) (params DeleteResourceProviderParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_id",
			In:   "path",
		}
		params.OrganizationID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "app_definition_id",
			In:   "path",
		}
		params.AppDefinitionID = packed[key].(string)
	}
	return params
}

func decodeDeleteResourceProviderParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteResourceProviderParams, _ error) {
	// Decode path: organization_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: app_definition_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "app_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteResourceTypeParams is parameters of deleteResourceType operation.
type DeleteResourceTypeParams struct {
	OrganizationID  string
	AppDefinitionID string
	ResourceTypeID  string
}

func unpackDeleteResourceTypeParams(packed middleware.Parameters) (params DeleteResourceTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_id",
			In:   "path",
		}
		params.OrganizationID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "app_definition_id",
			In:   "path",
		}
		params.AppDefinitionID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "resource_type_id",
			In:   "path",
		}
		params.ResourceTypeID = packed[key].(string)
	}
	return params
}

func decodeDeleteResourceTypeParams(args [3]string, argsEscaped bool, r *http.Request) (params DeleteResourceTypeParams, _ error) {
	// Decode path: organization_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: app_definition_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "app_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: resource_type_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "resource_type_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ResourceTypeID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "resource_type_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteRoleParams is parameters of deleteRole operation.
type DeleteRoleParams struct {
	SpaceID string
	RoleID  string
}

func unpackDeleteRoleParams(packed middleware.Parameters) (params DeleteRoleParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "role_id",
			In:   "path",
		}
		params.RoleID = packed[key].(string)
	}
	return params
}

func decodeDeleteRoleParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteRoleParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: role_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteWebhookDefinitionParams is parameters of deleteWebhookDefinition operation.
type DeleteWebhookDefinitionParams struct {
	SpaceID             string
	WebhookDefinitionID string
}

func unpackDeleteWebhookDefinitionParams(packed middleware.Parameters) (params DeleteWebhookDefinitionParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "webhook_definition_id",
			In:   "path",
		}
		params.WebhookDefinitionID = packed[key].(string)
	}
	return params
}

func decodeDeleteWebhookDefinitionParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteWebhookDefinitionParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: webhook_definition_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "webhook_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.WebhookDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "webhook_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetAppDefinitionParams is parameters of getAppDefinition operation.
type GetAppDefinitionParams struct {
	OrganizationID  string
	AppDefinitionID string
}

func unpackGetAppDefinitionParams(packed middleware.Parameters) (params GetAppDefinitionParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_id",
			In:   "path",
		}
		params.OrganizationID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "app_definition_id",
			In:   "path",
		}
		params.AppDefinitionID = packed[key].(string)
	}
	return params
}

func decodeGetAppDefinitionParams(args [2]string, argsEscaped bool, r *http.Request) (params GetAppDefinitionParams, _ error) {
	// Decode path: organization_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: app_definition_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "app_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetAppInstallationParams is parameters of getAppInstallation operation.
type GetAppInstallationParams struct {
	SpaceID         string
	EnvironmentID   string
	AppDefinitionID string
}

func unpackGetAppInstallationParams(packed middleware.Parameters) (params GetAppInstallationParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "app_definition_id",
			In:   "path",
		}
		params.AppDefinitionID = packed[key].(string)
	}
	return params
}

func decodeGetAppInstallationParams(args [3]string, argsEscaped bool, r *http.Request) (params GetAppInstallationParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: environment_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: app_definition_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "app_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetAppSigningSecretParams is parameters of getAppSigningSecret operation.
type GetAppSigningSecretParams struct {
	OrganizationID  string
	AppDefinitionID string
}

func unpackGetAppSigningSecretParams(packed middleware.Parameters) (params GetAppSigningSecretParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_id",
			In:   "path",
		}
		params.OrganizationID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "app_definition_id",
			In:   "path",
		}
		params.AppDefinitionID = packed[key].(string)
	}
	return params
}

func decodeGetAppSigningSecretParams(args [2]string, argsEscaped bool, r *http.Request) (params GetAppSigningSecretParams, _ error) {
	// Decode path: organization_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: app_definition_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "app_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetContentTypeParams is parameters of getContentType operation.
type GetContentTypeParams struct {
	SpaceID       string
	EnvironmentID string
	ContentTypeID string
}

func unpackGetContentTypeParams(packed middleware.Parameters) (params GetContentTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "content_type_id",
			In:   "path",
		}
		params.ContentTypeID = packed[key].(string)
	}
	return params
}

func decodeGetContentTypeParams(args [3]string, argsEscaped bool, r *http.Request) (params GetContentTypeParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: environment_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: content_type_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "content_type_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContentTypeID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "content_type_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetContentTypesParams is parameters of getContentTypes operation.
type GetContentTypesParams struct {
	SpaceID       string
	EnvironmentID string
}

func unpackGetContentTypesParams(packed middleware.Parameters) (params GetContentTypesParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(string)
	}
	return params
}

func decodeGetContentTypesParams(args [2]string, argsEscaped bool, r *http.Request) (params GetContentTypesParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: environment_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDeliveryApiKeyParams is parameters of getDeliveryApiKey operation.
type GetDeliveryApiKeyParams struct {
	SpaceID  string
	APIKeyID string
}

func unpackGetDeliveryApiKeyParams(packed middleware.Parameters) (params GetDeliveryApiKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "api_key_id",
			In:   "path",
		}
		params.APIKeyID = packed[key].(string)
	}
	return params
}

func decodeGetDeliveryApiKeyParams(args [2]string, argsEscaped bool, r *http.Request) (params GetDeliveryApiKeyParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: api_key_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "api_key_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.APIKeyID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "api_key_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetEditorInterfaceParams is parameters of getEditorInterface operation.
type GetEditorInterfaceParams struct {
	SpaceID       string
	EnvironmentID string
	ContentTypeID string
}

func unpackGetEditorInterfaceParams(packed middleware.Parameters) (params GetEditorInterfaceParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "content_type_id",
			In:   "path",
		}
		params.ContentTypeID = packed[key].(string)
	}
	return params
}

func decodeGetEditorInterfaceParams(args [3]string, argsEscaped bool, r *http.Request) (params GetEditorInterfaceParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: environment_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: content_type_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "content_type_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContentTypeID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "content_type_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetExtensionParams is parameters of getExtension operation.
type GetExtensionParams struct {
	SpaceID       string
	EnvironmentID string
	ExtensionID   string
}

func unpackGetExtensionParams(packed middleware.Parameters) (params GetExtensionParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "extension_id",
			In:   "path",
		}
		params.ExtensionID = packed[key].(string)
	}
	return params
}

func decodeGetExtensionParams(args [3]string, argsEscaped bool, r *http.Request) (params GetExtensionParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: environment_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: extension_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "extension_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ExtensionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "extension_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetMarketplaceAppDefinitionsParams is parameters of getMarketplaceAppDefinitions operation.
type GetMarketplaceAppDefinitionsParams struct {
	SysIDIn []string `json:",omitempty"`
}

func unpackGetMarketplaceAppDefinitionsParams(packed middleware.Parameters) (params GetMarketplaceAppDefinitionsParams) {
	{
		key := middleware.ParameterKey{
			Name: "sys.id[in]",
			In:   "query",
		}
		params.SysIDIn = packed[key].([]string)
	}
	return params
}

func decodeGetMarketplaceAppDefinitionsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetMarketplaceAppDefinitionsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: sys.id[in].
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sys.id[in]",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotSysIDInVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotSysIDInVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.SysIDIn = append(params.SysIDIn, paramsDotSysIDInVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.SysIDIn == nil {
					return errors.New("nil is invalid value")
				}
				if err := (validate.Array{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    0,
					MaxLengthSet: false,
				}).ValidateLength(len(params.SysIDIn)); err != nil {
					return errors.Wrap(err, "array")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sys.id[in]",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetPersonalAccessTokenParams is parameters of getPersonalAccessToken operation.
type GetPersonalAccessTokenParams struct {
	AccessTokenID string
}

func unpackGetPersonalAccessTokenParams(packed middleware.Parameters) (params GetPersonalAccessTokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "access_token_id",
			In:   "path",
		}
		params.AccessTokenID = packed[key].(string)
	}
	return params
}

func decodeGetPersonalAccessTokenParams(args [1]string, argsEscaped bool, r *http.Request) (params GetPersonalAccessTokenParams, _ error) {
	// Decode path: access_token_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "access_token_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AccessTokenID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "access_token_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetPreviewApiKeyParams is parameters of getPreviewApiKey operation.
type GetPreviewApiKeyParams struct {
	SpaceID         string
	PreviewAPIKeyID string
}

func unpackGetPreviewApiKeyParams(packed middleware.Parameters) (params GetPreviewApiKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "preview_api_key_id",
			In:   "path",
		}
		params.PreviewAPIKeyID = packed[key].(string)
	}
	return params
}

func decodeGetPreviewApiKeyParams(args [2]string, argsEscaped bool, r *http.Request) (params GetPreviewApiKeyParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: preview_api_key_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "preview_api_key_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PreviewAPIKeyID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "preview_api_key_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetResourceProviderParams is parameters of getResourceProvider operation.
type GetResourceProviderParams struct {
	OrganizationID  string
	AppDefinitionID string
}

func unpackGetResourceProviderParams(packed middleware.Parameters) (params GetResourceProviderParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_id",
			In:   "path",
		}
		params.OrganizationID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "app_definition_id",
			In:   "path",
		}
		params.AppDefinitionID = packed[key].(string)
	}
	return params
}

func decodeGetResourceProviderParams(args [2]string, argsEscaped bool, r *http.Request) (params GetResourceProviderParams, _ error) {
	// Decode path: organization_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: app_definition_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "app_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetResourceTypeParams is parameters of getResourceType operation.
type GetResourceTypeParams struct {
	OrganizationID  string
	AppDefinitionID string
	ResourceTypeID  string
}

func unpackGetResourceTypeParams(packed middleware.Parameters) (params GetResourceTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_id",
			In:   "path",
		}
		params.OrganizationID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "app_definition_id",
			In:   "path",
		}
		params.AppDefinitionID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "resource_type_id",
			In:   "path",
		}
		params.ResourceTypeID = packed[key].(string)
	}
	return params
}

func decodeGetResourceTypeParams(args [3]string, argsEscaped bool, r *http.Request) (params GetResourceTypeParams, _ error) {
	// Decode path: organization_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: app_definition_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "app_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: resource_type_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "resource_type_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ResourceTypeID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "resource_type_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetRoleParams is parameters of getRole operation.
type GetRoleParams struct {
	SpaceID string
	RoleID  string
}

func unpackGetRoleParams(packed middleware.Parameters) (params GetRoleParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "role_id",
			In:   "path",
		}
		params.RoleID = packed[key].(string)
	}
	return params
}

func decodeGetRoleParams(args [2]string, argsEscaped bool, r *http.Request) (params GetRoleParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: role_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetSpaceEnablementsParams is parameters of getSpaceEnablements operation.
type GetSpaceEnablementsParams struct {
	SpaceID string
}

func unpackGetSpaceEnablementsParams(packed middleware.Parameters) (params GetSpaceEnablementsParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	return params
}

func decodeGetSpaceEnablementsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetSpaceEnablementsParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetWebhookDefinitionParams is parameters of getWebhookDefinition operation.
type GetWebhookDefinitionParams struct {
	SpaceID             string
	WebhookDefinitionID string
}

func unpackGetWebhookDefinitionParams(packed middleware.Parameters) (params GetWebhookDefinitionParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "webhook_definition_id",
			In:   "path",
		}
		params.WebhookDefinitionID = packed[key].(string)
	}
	return params
}

func decodeGetWebhookDefinitionParams(args [2]string, argsEscaped bool, r *http.Request) (params GetWebhookDefinitionParams, _ error) {
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: webhook_definition_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "webhook_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.WebhookDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "webhook_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PutAppDefinitionParams is parameters of putAppDefinition operation.
type PutAppDefinitionParams struct {
	OrganizationID  string
	AppDefinitionID string
}

func unpackPutAppDefinitionParams(packed middleware.Parameters) (params PutAppDefinitionParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_id",
			In:   "path",
		}
		params.OrganizationID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "app_definition_id",
			In:   "path",
		}
		params.AppDefinitionID = packed[key].(string)
	}
	return params
}

func decodePutAppDefinitionParams(args [2]string, argsEscaped bool, r *http.Request) (params PutAppDefinitionParams, _ error) {
	// Decode path: organization_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: app_definition_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "app_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PutAppInstallationParams is parameters of putAppInstallation operation.
type PutAppInstallationParams struct {
	SpaceID                string
	EnvironmentID          string
	AppDefinitionID        string
	XContentfulMarketplace OptString `json:",omitempty,omitzero"`
}

func unpackPutAppInstallationParams(packed middleware.Parameters) (params PutAppInstallationParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "app_definition_id",
			In:   "path",
		}
		params.AppDefinitionID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Contentful-Marketplace",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.XContentfulMarketplace = v.(OptString)
		}
	}
	return params
}

func decodePutAppInstallationParams(args [3]string, argsEscaped bool, r *http.Request) (params PutAppInstallationParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: environment_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: app_definition_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "app_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode header: X-Contentful-Marketplace.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Contentful-Marketplace",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotXContentfulMarketplaceVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotXContentfulMarketplaceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.XContentfulMarketplace.SetTo(paramsDotXContentfulMarketplaceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Contentful-Marketplace",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// PutAppSigningSecretParams is parameters of putAppSigningSecret operation.
type PutAppSigningSecretParams struct {
	OrganizationID  string
	AppDefinitionID string
}

func unpackPutAppSigningSecretParams(packed middleware.Parameters) (params PutAppSigningSecretParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_id",
			In:   "path",
		}
		params.OrganizationID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "app_definition_id",
			In:   "path",
		}
		params.AppDefinitionID = packed[key].(string)
	}
	return params
}

func decodePutAppSigningSecretParams(args [2]string, argsEscaped bool, r *http.Request) (params PutAppSigningSecretParams, _ error) {
	// Decode path: organization_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: app_definition_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "app_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PutContentTypeParams is parameters of putContentType operation.
type PutContentTypeParams struct {
	SpaceID            string
	EnvironmentID      string
	ContentTypeID      string
	XContentfulVersion int
}

func unpackPutContentTypeParams(packed middleware.Parameters) (params PutContentTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "content_type_id",
			In:   "path",
		}
		params.ContentTypeID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Contentful-Version",
			In:   "header",
		}
		params.XContentfulVersion = packed[key].(int)
	}
	return params
}

func decodePutContentTypeParams(args [3]string, argsEscaped bool, r *http.Request) (params PutContentTypeParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: environment_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: content_type_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "content_type_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContentTypeID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "content_type_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode header: X-Contentful-Version.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.XContentfulVersion = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Contentful-Version",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// PutEditorInterfaceParams is parameters of putEditorInterface operation.
type PutEditorInterfaceParams struct {
	SpaceID            string
	EnvironmentID      string
	ContentTypeID      string
	XContentfulVersion int
}

func unpackPutEditorInterfaceParams(packed middleware.Parameters) (params PutEditorInterfaceParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "content_type_id",
			In:   "path",
		}
		params.ContentTypeID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Contentful-Version",
			In:   "header",
		}
		params.XContentfulVersion = packed[key].(int)
	}
	return params
}

func decodePutEditorInterfaceParams(args [3]string, argsEscaped bool, r *http.Request) (params PutEditorInterfaceParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: environment_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: content_type_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "content_type_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContentTypeID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "content_type_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode header: X-Contentful-Version.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.XContentfulVersion = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Contentful-Version",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// PutExtensionParams is parameters of putExtension operation.
type PutExtensionParams struct {
	SpaceID            string
	EnvironmentID      string
	ExtensionID        string
	XContentfulVersion int
}

func unpackPutExtensionParams(packed middleware.Parameters) (params PutExtensionParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment_id",
			In:   "path",
		}
		params.EnvironmentID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "extension_id",
			In:   "path",
		}
		params.ExtensionID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Contentful-Version",
			In:   "header",
		}
		params.XContentfulVersion = packed[key].(int)
	}
	return params
}

func decodePutExtensionParams(args [3]string, argsEscaped bool, r *http.Request) (params PutExtensionParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: environment_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: extension_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "extension_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ExtensionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "extension_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode header: X-Contentful-Version.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.XContentfulVersion = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Contentful-Version",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// PutResourceProviderParams is parameters of putResourceProvider operation.
type PutResourceProviderParams struct {
	OrganizationID  string
	AppDefinitionID string
}

func unpackPutResourceProviderParams(packed middleware.Parameters) (params PutResourceProviderParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_id",
			In:   "path",
		}
		params.OrganizationID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "app_definition_id",
			In:   "path",
		}
		params.AppDefinitionID = packed[key].(string)
	}
	return params
}

func decodePutResourceProviderParams(args [2]string, argsEscaped bool, r *http.Request) (params PutResourceProviderParams, _ error) {
	// Decode path: organization_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: app_definition_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "app_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PutResourceTypeParams is parameters of putResourceType operation.
type PutResourceTypeParams struct {
	OrganizationID  string
	AppDefinitionID string
	ResourceTypeID  string
}

func unpackPutResourceTypeParams(packed middleware.Parameters) (params PutResourceTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "organization_id",
			In:   "path",
		}
		params.OrganizationID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "app_definition_id",
			In:   "path",
		}
		params.AppDefinitionID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "resource_type_id",
			In:   "path",
		}
		params.ResourceTypeID = packed[key].(string)
	}
	return params
}

func decodePutResourceTypeParams(args [3]string, argsEscaped bool, r *http.Request) (params PutResourceTypeParams, _ error) {
	// Decode path: organization_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organization_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organization_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: app_definition_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "app_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: resource_type_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "resource_type_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ResourceTypeID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "resource_type_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PutSpaceEnablementsParams is parameters of putSpaceEnablements operation.
type PutSpaceEnablementsParams struct {
	SpaceID            string
	XContentfulVersion int
}

func unpackPutSpaceEnablementsParams(packed middleware.Parameters) (params PutSpaceEnablementsParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Contentful-Version",
			In:   "header",
		}
		params.XContentfulVersion = packed[key].(int)
	}
	return params
}

func decodePutSpaceEnablementsParams(args [1]string, argsEscaped bool, r *http.Request) (params PutSpaceEnablementsParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode header: X-Contentful-Version.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.XContentfulVersion = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Contentful-Version",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// RevokePersonalAccessTokenParams is parameters of revokePersonalAccessToken operation.
type RevokePersonalAccessTokenParams struct {
	AccessTokenID string
}

func unpackRevokePersonalAccessTokenParams(packed middleware.Parameters) (params RevokePersonalAccessTokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "access_token_id",
			In:   "path",
		}
		params.AccessTokenID = packed[key].(string)
	}
	return params
}

func decodeRevokePersonalAccessTokenParams(args [1]string, argsEscaped bool, r *http.Request) (params RevokePersonalAccessTokenParams, _ error) {
	// Decode path: access_token_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "access_token_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AccessTokenID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "access_token_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateDeliveryApiKeyParams is parameters of updateDeliveryApiKey operation.
type UpdateDeliveryApiKeyParams struct {
	SpaceID            string
	APIKeyID           string
	XContentfulVersion int
}

func unpackUpdateDeliveryApiKeyParams(packed middleware.Parameters) (params UpdateDeliveryApiKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "api_key_id",
			In:   "path",
		}
		params.APIKeyID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Contentful-Version",
			In:   "header",
		}
		params.XContentfulVersion = packed[key].(int)
	}
	return params
}

func decodeUpdateDeliveryApiKeyParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateDeliveryApiKeyParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: api_key_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "api_key_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.APIKeyID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "api_key_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode header: X-Contentful-Version.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.XContentfulVersion = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Contentful-Version",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateRoleParams is parameters of updateRole operation.
type UpdateRoleParams struct {
	SpaceID            string
	RoleID             string
	XContentfulVersion int
}

func unpackUpdateRoleParams(packed middleware.Parameters) (params UpdateRoleParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "role_id",
			In:   "path",
		}
		params.RoleID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Contentful-Version",
			In:   "header",
		}
		params.XContentfulVersion = packed[key].(int)
	}
	return params
}

func decodeUpdateRoleParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateRoleParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: role_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "role_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RoleID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "role_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode header: X-Contentful-Version.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.XContentfulVersion = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Contentful-Version",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateWebhookDefinitionParams is parameters of updateWebhookDefinition operation.
type UpdateWebhookDefinitionParams struct {
	SpaceID             string
	WebhookDefinitionID string
	XContentfulVersion  int
}

func unpackUpdateWebhookDefinitionParams(packed middleware.Parameters) (params UpdateWebhookDefinitionParams) {
	{
		key := middleware.ParameterKey{
			Name: "space_id",
			In:   "path",
		}
		params.SpaceID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "webhook_definition_id",
			In:   "path",
		}
		params.WebhookDefinitionID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Contentful-Version",
			In:   "header",
		}
		params.XContentfulVersion = packed[key].(int)
	}
	return params
}

func decodeUpdateWebhookDefinitionParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateWebhookDefinitionParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: space_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "space_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "space_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: webhook_definition_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "webhook_definition_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.WebhookDefinitionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "webhook_definition_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode header: X-Contentful-Version.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Contentful-Version",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.XContentfulVersion = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Contentful-Version",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}
