// Code generated by ogen, DO NOT EDIT.

package contentfulmanagement

import (
	"context"
	"net/http"
	"strings"

	"github.com/go-faster/errors"
	"github.com/ogen-go/ogen/ogenerrors"
)

// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
	// HandleAccessToken handles accessToken security.
	HandleAccessToken(ctx context.Context, operationName OperationName, t AccessToken) (context.Context, error)
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

var operationRolesAccessToken = map[string][]string{
	ActivateContentTypeOperation:          []string{},
	CreateAppDefinitionOperation:          []string{},
	CreateDeliveryApiKeyOperation:         []string{},
	CreateEntryOperation:                  []string{},
	CreatePersonalAccessTokenOperation:    []string{},
	CreateRoleOperation:                   []string{},
	CreateWebhookDefinitionOperation:      []string{},
	DeactivateContentTypeOperation:        []string{},
	DeleteAppDefinitionOperation:          []string{},
	DeleteAppInstallationOperation:        []string{},
	DeleteAppSigningSecretOperation:       []string{},
	DeleteContentTypeOperation:            []string{},
	DeleteDeliveryApiKeyOperation:         []string{},
	DeleteEntryOperation:                  []string{},
	DeleteExtensionOperation:              []string{},
	DeleteResourceProviderOperation:       []string{},
	DeleteResourceTypeOperation:           []string{},
	DeleteRoleOperation:                   []string{},
	DeleteWebhookDefinitionOperation:      []string{},
	GetAppDefinitionOperation:             []string{},
	GetAppInstallationOperation:           []string{},
	GetAppSigningSecretOperation:          []string{},
	GetAuthenticatedUserOperation:         []string{},
	GetContentTypeOperation:               []string{},
	GetDeliveryApiKeyOperation:            []string{},
	GetEditorInterfaceOperation:           []string{},
	GetEntryOperation:                     []string{},
	GetExtensionOperation:                 []string{},
	GetMarketplaceAppDefinitionsOperation: []string{},
	GetPersonalAccessTokenOperation:       []string{},
	GetPreviewApiKeyOperation:             []string{},
	GetResourceProviderOperation:          []string{},
	GetResourceTypeOperation:              []string{},
	GetRoleOperation:                      []string{},
	GetSpaceEnablementsOperation:          []string{},
	GetWebhookDefinitionOperation:         []string{},
	PublishEntryOperation:                 []string{},
	PutAppDefinitionOperation:             []string{},
	PutAppInstallationOperation:           []string{},
	PutAppSigningSecretOperation:          []string{},
	PutContentTypeOperation:               []string{},
	PutEditorInterfaceOperation:           []string{},
	PutEntryOperation:                     []string{},
	PutExtensionOperation:                 []string{},
	PutResourceProviderOperation:          []string{},
	PutResourceTypeOperation:              []string{},
	PutSpaceEnablementsOperation:          []string{},
	RevokePersonalAccessTokenOperation:    []string{},
	UnpublishEntryOperation:               []string{},
	UpdateDeliveryApiKeyOperation:         []string{},
	UpdateRoleOperation:                   []string{},
	UpdateWebhookDefinitionOperation:      []string{},
}

func (s *Server) securityAccessToken(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t AccessToken
	token, ok := findAuthorization(req.Header, "Bearer")
	if !ok {
		return ctx, false, nil
	}
	t.Token = token
	t.Roles = operationRolesAccessToken[operationName]
	rctx, err := s.sec.HandleAccessToken(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

// SecuritySource is provider of security values (tokens, passwords, etc.).
type SecuritySource interface {
	// AccessToken provides accessToken security value.
	AccessToken(ctx context.Context, operationName OperationName, client *Client) (AccessToken, error)
}

func (s *Client) securityAccessToken(ctx context.Context, operationName OperationName, req *http.Request) error {
	t, err := s.sec.AccessToken(ctx, operationName, s)
	if err != nil {
		return errors.Wrap(err, "security source \"AccessToken\"")
	}
	req.Header.Set("Authorization", "Bearer "+t.Token)
	return nil
}
