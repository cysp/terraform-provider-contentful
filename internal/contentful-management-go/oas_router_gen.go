// Code generated by ogen, DO NOT EDIT.

package contentfulmanagement

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [3]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "app_definitions"

				if l := len("app_definitions"); len(elem) >= l && elem[0:l] == "app_definitions" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetMarketplaceAppDefinitionsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 'o': // Prefix: "organizations/"

				if l := len("organizations/"); len(elem) >= l && elem[0:l] == "organizations/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "organization_id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/app_definitions"

					if l := len("/app_definitions"); len(elem) >= l && elem[0:l] == "/app_definitions" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleCreateAppDefinitionRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "app_definition_id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[1] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteAppDefinitionRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetAppDefinitionRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handlePutAppDefinitionRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'r': // Prefix: "resource_provider"

								if l := len("resource_provider"); len(elem) >= l && elem[0:l] == "resource_provider" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "DELETE":
										s.handleDeleteResourceProviderRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									case "GET":
										s.handleGetResourceProviderRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									case "PUT":
										s.handlePutResourceProviderRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET,PUT")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/resource_types/"

									if l := len("/resource_types/"); len(elem) >= l && elem[0:l] == "/resource_types/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "resource_type_id"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[2] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleDeleteResourceTypeRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleGetResourceTypeRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										case "PUT":
											s.handlePutResourceTypeRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,PUT")
										}

										return
									}

								}

							case 's': // Prefix: "signing_secret"

								if l := len("signing_secret"); len(elem) >= l && elem[0:l] == "signing_secret" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "DELETE":
										s.handleDeleteAppSigningSecretRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									case "GET":
										s.handleGetAppSigningSecretRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									case "PUT":
										s.handlePutAppSigningSecretRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET,PUT")
									}

									return
								}

							}

						}

					}

				}

			case 's': // Prefix: "spaces/"

				if l := len("spaces/"); len(elem) >= l && elem[0:l] == "spaces/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "space_id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "api_keys"

						if l := len("api_keys"); len(elem) >= l && elem[0:l] == "api_keys" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleCreateDeliveryApiKeyRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "api_key_id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteDeliveryApiKeyRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetDeliveryApiKeyRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleUpdateDeliveryApiKeyRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PUT")
								}

								return
							}

						}

					case 'e': // Prefix: "en"

						if l := len("en"); len(elem) >= l && elem[0:l] == "en" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "ablements"

							if l := len("ablements"); len(elem) >= l && elem[0:l] == "ablements" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetSpaceEnablementsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handlePutSpaceEnablementsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PUT")
								}

								return
							}

						case 'v': // Prefix: "vironments/"

							if l := len("vironments/"); len(elem) >= l && elem[0:l] == "vironments/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "environment_id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "app_installations/"

									if l := len("app_installations/"); len(elem) >= l && elem[0:l] == "app_installations/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "app_definition_id"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[2] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleDeleteAppInstallationRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleGetAppInstallationRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										case "PUT":
											s.handlePutAppInstallationRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,PUT")
										}

										return
									}

								case 'c': // Prefix: "content_types/"

									if l := len("content_types/"); len(elem) >= l && elem[0:l] == "content_types/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "content_type_id"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[2] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch r.Method {
										case "DELETE":
											s.handleDeleteContentTypeRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleGetContentTypeRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										case "PUT":
											s.handlePutContentTypeRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,PUT")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"

										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'e': // Prefix: "editor_interface"

											if l := len("editor_interface"); len(elem) >= l && elem[0:l] == "editor_interface" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleGetEditorInterfaceRequest([3]string{
														args[0],
														args[1],
														args[2],
													}, elemIsEscaped, w, r)
												case "PUT":
													s.handlePutEditorInterfaceRequest([3]string{
														args[0],
														args[1],
														args[2],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET,PUT")
												}

												return
											}

										case 'p': // Prefix: "published"

											if l := len("published"); len(elem) >= l && elem[0:l] == "published" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "DELETE":
													s.handleDeactivateContentTypeRequest([3]string{
														args[0],
														args[1],
														args[2],
													}, elemIsEscaped, w, r)
												case "PUT":
													s.handleActivateContentTypeRequest([3]string{
														args[0],
														args[1],
														args[2],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "DELETE,PUT")
												}

												return
											}

										}

									}

								case 'e': // Prefix: "e"

									if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'n': // Prefix: "ntries"

										if l := len("ntries"); len(elem) >= l && elem[0:l] == "ntries" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleCreateEntryRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"

											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "entry_id"
											// Leaf parameter, slashes are prohibited
											idx := strings.IndexByte(elem, '/')
											if idx >= 0 {
												break
											}
											args[2] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "DELETE":
													s.handleDeleteEntryRequest([3]string{
														args[0],
														args[1],
														args[2],
													}, elemIsEscaped, w, r)
												case "GET":
													s.handleGetEntryRequest([3]string{
														args[0],
														args[1],
														args[2],
													}, elemIsEscaped, w, r)
												case "PUT":
													s.handlePutEntryRequest([3]string{
														args[0],
														args[1],
														args[2],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "DELETE,GET,PUT")
												}

												return
											}

										}

									case 'x': // Prefix: "xtensions/"

										if l := len("xtensions/"); len(elem) >= l && elem[0:l] == "xtensions/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "extension_id"
										// Leaf parameter, slashes are prohibited
										idx := strings.IndexByte(elem, '/')
										if idx >= 0 {
											break
										}
										args[2] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "DELETE":
												s.handleDeleteExtensionRequest([3]string{
													args[0],
													args[1],
													args[2],
												}, elemIsEscaped, w, r)
											case "GET":
												s.handleGetExtensionRequest([3]string{
													args[0],
													args[1],
													args[2],
												}, elemIsEscaped, w, r)
											case "PUT":
												s.handlePutExtensionRequest([3]string{
													args[0],
													args[1],
													args[2],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "DELETE,GET,PUT")
											}

											return
										}

									}

								}

							}

						}

					case 'p': // Prefix: "preview_api_keys/"

						if l := len("preview_api_keys/"); len(elem) >= l && elem[0:l] == "preview_api_keys/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "preview_api_key_id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetPreviewApiKeyRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					case 'r': // Prefix: "roles"

						if l := len("roles"); len(elem) >= l && elem[0:l] == "roles" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleCreateRoleRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "role_id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteRoleRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetRoleRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleUpdateRoleRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PUT")
								}

								return
							}

						}

					case 'w': // Prefix: "webhook_definitions"

						if l := len("webhook_definitions"); len(elem) >= l && elem[0:l] == "webhook_definitions" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleCreateWebhookDefinitionRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "webhook_definition_id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteWebhookDefinitionRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetWebhookDefinitionRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleUpdateWebhookDefinitionRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PUT")
								}

								return
							}

						}

					}

				}

			case 'u': // Prefix: "users/me"

				if l := len("users/me"); len(elem) >= l && elem[0:l] == "users/me" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetAuthenticatedUserRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/access_tokens"

					if l := len("/access_tokens"); len(elem) >= l && elem[0:l] == "/access_tokens" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleCreatePersonalAccessTokenRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "access_token_id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetPersonalAccessTokenRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/revoked"

							if l := len("/revoked"); len(elem) >= l && elem[0:l] == "/revoked" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PUT":
									s.handleRevokePersonalAccessTokenRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PUT")
								}

								return
							}

						}

					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [3]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "app_definitions"

				if l := len("app_definitions"); len(elem) >= l && elem[0:l] == "app_definitions" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = GetMarketplaceAppDefinitionsOperation
						r.summary = "Get marketplace app definitions"
						r.operationID = "getMarketplaceAppDefinitions"
						r.pathPattern = "/app_definitions"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'o': // Prefix: "organizations/"

				if l := len("organizations/"); len(elem) >= l && elem[0:l] == "organizations/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "organization_id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/app_definitions"

					if l := len("/app_definitions"); len(elem) >= l && elem[0:l] == "/app_definitions" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = CreateAppDefinitionOperation
							r.summary = "Create an app definition"
							r.operationID = "createAppDefinition"
							r.pathPattern = "/organizations/{organization_id}/app_definitions"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "app_definition_id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[1] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = DeleteAppDefinitionOperation
								r.summary = "Delete an app definition"
								r.operationID = "deleteAppDefinition"
								r.pathPattern = "/organizations/{organization_id}/app_definitions/{app_definition_id}"
								r.args = args
								r.count = 2
								return r, true
							case "GET":
								r.name = GetAppDefinitionOperation
								r.summary = "Get one app definition"
								r.operationID = "getAppDefinition"
								r.pathPattern = "/organizations/{organization_id}/app_definitions/{app_definition_id}"
								r.args = args
								r.count = 2
								return r, true
							case "PUT":
								r.name = PutAppDefinitionOperation
								r.summary = "Create or update an app definition"
								r.operationID = "putAppDefinition"
								r.pathPattern = "/organizations/{organization_id}/app_definitions/{app_definition_id}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'r': // Prefix: "resource_provider"

								if l := len("resource_provider"); len(elem) >= l && elem[0:l] == "resource_provider" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "DELETE":
										r.name = DeleteResourceProviderOperation
										r.summary = "Delete a resource provider definition"
										r.operationID = "deleteResourceProvider"
										r.pathPattern = "/organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider"
										r.args = args
										r.count = 2
										return r, true
									case "GET":
										r.name = GetResourceProviderOperation
										r.summary = "Get one resource provider definition"
										r.operationID = "getResourceProvider"
										r.pathPattern = "/organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider"
										r.args = args
										r.count = 2
										return r, true
									case "PUT":
										r.name = PutResourceProviderOperation
										r.summary = "Create or update a resource provider definition"
										r.operationID = "putResourceProvider"
										r.pathPattern = "/organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/resource_types/"

									if l := len("/resource_types/"); len(elem) >= l && elem[0:l] == "/resource_types/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "resource_type_id"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[2] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = DeleteResourceTypeOperation
											r.summary = "Delete a resource type definition"
											r.operationID = "deleteResourceType"
											r.pathPattern = "/organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider/resource_types/{resource_type_id}"
											r.args = args
											r.count = 3
											return r, true
										case "GET":
											r.name = GetResourceTypeOperation
											r.summary = "Get one resource type definition"
											r.operationID = "getResourceType"
											r.pathPattern = "/organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider/resource_types/{resource_type_id}"
											r.args = args
											r.count = 3
											return r, true
										case "PUT":
											r.name = PutResourceTypeOperation
											r.summary = "Create or update a resource type definition"
											r.operationID = "putResourceType"
											r.pathPattern = "/organizations/{organization_id}/app_definitions/{app_definition_id}/resource_provider/resource_types/{resource_type_id}"
											r.args = args
											r.count = 3
											return r, true
										default:
											return
										}
									}

								}

							case 's': // Prefix: "signing_secret"

								if l := len("signing_secret"); len(elem) >= l && elem[0:l] == "signing_secret" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "DELETE":
										r.name = DeleteAppSigningSecretOperation
										r.summary = "Delete an app signing secret"
										r.operationID = "deleteAppSigningSecret"
										r.pathPattern = "/organizations/{organization_id}/app_definitions/{app_definition_id}/signing_secret"
										r.args = args
										r.count = 2
										return r, true
									case "GET":
										r.name = GetAppSigningSecretOperation
										r.summary = "Get one app signing secret"
										r.operationID = "getAppSigningSecret"
										r.pathPattern = "/organizations/{organization_id}/app_definitions/{app_definition_id}/signing_secret"
										r.args = args
										r.count = 2
										return r, true
									case "PUT":
										r.name = PutAppSigningSecretOperation
										r.summary = "Create or update an app signing secret"
										r.operationID = "putAppSigningSecret"
										r.pathPattern = "/organizations/{organization_id}/app_definitions/{app_definition_id}/signing_secret"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

							}

						}

					}

				}

			case 's': // Prefix: "spaces/"

				if l := len("spaces/"); len(elem) >= l && elem[0:l] == "spaces/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "space_id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "api_keys"

						if l := len("api_keys"); len(elem) >= l && elem[0:l] == "api_keys" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = CreateDeliveryApiKeyOperation
								r.summary = "Create a delivery api key"
								r.operationID = "createDeliveryApiKey"
								r.pathPattern = "/spaces/{space_id}/api_keys"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "api_key_id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = DeleteDeliveryApiKeyOperation
									r.summary = "Delete a single delivery api key"
									r.operationID = "deleteDeliveryApiKey"
									r.pathPattern = "/spaces/{space_id}/api_keys/{api_key_id}"
									r.args = args
									r.count = 2
									return r, true
								case "GET":
									r.name = GetDeliveryApiKeyOperation
									r.summary = "Get a single delivery api key"
									r.operationID = "getDeliveryApiKey"
									r.pathPattern = "/spaces/{space_id}/api_keys/{api_key_id}"
									r.args = args
									r.count = 2
									return r, true
								case "PUT":
									r.name = UpdateDeliveryApiKeyOperation
									r.summary = "Update a single delivery api key"
									r.operationID = "updateDeliveryApiKey"
									r.pathPattern = "/spaces/{space_id}/api_keys/{api_key_id}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}

						}

					case 'e': // Prefix: "en"

						if l := len("en"); len(elem) >= l && elem[0:l] == "en" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "ablements"

							if l := len("ablements"); len(elem) >= l && elem[0:l] == "ablements" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetSpaceEnablementsOperation
									r.summary = "Get enablements for a space"
									r.operationID = "getSpaceEnablements"
									r.pathPattern = "/spaces/{space_id}/enablements"
									r.args = args
									r.count = 1
									return r, true
								case "PUT":
									r.name = PutSpaceEnablementsOperation
									r.summary = "Update enablements for a space"
									r.operationID = "putSpaceEnablements"
									r.pathPattern = "/spaces/{space_id}/enablements"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						case 'v': // Prefix: "vironments/"

							if l := len("vironments/"); len(elem) >= l && elem[0:l] == "vironments/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "environment_id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "app_installations/"

									if l := len("app_installations/"); len(elem) >= l && elem[0:l] == "app_installations/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "app_definition_id"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[2] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = DeleteAppInstallationOperation
											r.summary = "Uninstall an app"
											r.operationID = "deleteAppInstallation"
											r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/app_installations/{app_definition_id}"
											r.args = args
											r.count = 3
											return r, true
										case "GET":
											r.name = GetAppInstallationOperation
											r.summary = "Get one app installation"
											r.operationID = "getAppInstallation"
											r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/app_installations/{app_definition_id}"
											r.args = args
											r.count = 3
											return r, true
										case "PUT":
											r.name = PutAppInstallationOperation
											r.summary = "Install or update an app"
											r.operationID = "putAppInstallation"
											r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/app_installations/{app_definition_id}"
											r.args = args
											r.count = 3
											return r, true
										default:
											return
										}
									}

								case 'c': // Prefix: "content_types/"

									if l := len("content_types/"); len(elem) >= l && elem[0:l] == "content_types/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "content_type_id"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[2] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch method {
										case "DELETE":
											r.name = DeleteContentTypeOperation
											r.summary = "Delete a content type"
											r.operationID = "deleteContentType"
											r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}"
											r.args = args
											r.count = 3
											return r, true
										case "GET":
											r.name = GetContentTypeOperation
											r.summary = "Get a content type"
											r.operationID = "getContentType"
											r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}"
											r.args = args
											r.count = 3
											return r, true
										case "PUT":
											r.name = PutContentTypeOperation
											r.summary = "Update a content type"
											r.operationID = "putContentType"
											r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}"
											r.args = args
											r.count = 3
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"

										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'e': // Prefix: "editor_interface"

											if l := len("editor_interface"); len(elem) >= l && elem[0:l] == "editor_interface" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "GET":
													r.name = GetEditorInterfaceOperation
													r.summary = "Get the editor interface for a content type"
													r.operationID = "getEditorInterface"
													r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/editor_interface"
													r.args = args
													r.count = 3
													return r, true
												case "PUT":
													r.name = PutEditorInterfaceOperation
													r.summary = "Update the editor interface for a content type"
													r.operationID = "putEditorInterface"
													r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/editor_interface"
													r.args = args
													r.count = 3
													return r, true
												default:
													return
												}
											}

										case 'p': // Prefix: "published"

											if l := len("published"); len(elem) >= l && elem[0:l] == "published" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "DELETE":
													r.name = DeactivateContentTypeOperation
													r.summary = "Deactivate a content type"
													r.operationID = "deactivateContentType"
													r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/published"
													r.args = args
													r.count = 3
													return r, true
												case "PUT":
													r.name = ActivateContentTypeOperation
													r.summary = "Activate a content type"
													r.operationID = "activateContentType"
													r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/content_types/{content_type_id}/published"
													r.args = args
													r.count = 3
													return r, true
												default:
													return
												}
											}

										}

									}

								case 'e': // Prefix: "e"

									if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'n': // Prefix: "ntries"

										if l := len("ntries"); len(elem) >= l && elem[0:l] == "ntries" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = CreateEntryOperation
												r.summary = "Create an entry"
												r.operationID = "createEntry"
												r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/entries"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"

											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "entry_id"
											// Leaf parameter, slashes are prohibited
											idx := strings.IndexByte(elem, '/')
											if idx >= 0 {
												break
											}
											args[2] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "DELETE":
													r.name = DeleteEntryOperation
													r.summary = "Delete an entry"
													r.operationID = "deleteEntry"
													r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/entries/{entry_id}"
													r.args = args
													r.count = 3
													return r, true
												case "GET":
													r.name = GetEntryOperation
													r.summary = "Get a single entry"
													r.operationID = "getEntry"
													r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/entries/{entry_id}"
													r.args = args
													r.count = 3
													return r, true
												case "PUT":
													r.name = PutEntryOperation
													r.summary = "Create or update an entry"
													r.operationID = "putEntry"
													r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/entries/{entry_id}"
													r.args = args
													r.count = 3
													return r, true
												default:
													return
												}
											}

										}

									case 'x': // Prefix: "xtensions/"

										if l := len("xtensions/"); len(elem) >= l && elem[0:l] == "xtensions/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "extension_id"
										// Leaf parameter, slashes are prohibited
										idx := strings.IndexByte(elem, '/')
										if idx >= 0 {
											break
										}
										args[2] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "DELETE":
												r.name = DeleteExtensionOperation
												r.summary = "Delete an extension"
												r.operationID = "deleteExtension"
												r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/extensions/{extension_id}"
												r.args = args
												r.count = 3
												return r, true
											case "GET":
												r.name = GetExtensionOperation
												r.summary = "Get a single extension"
												r.operationID = "getExtension"
												r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/extensions/{extension_id}"
												r.args = args
												r.count = 3
												return r, true
											case "PUT":
												r.name = PutExtensionOperation
												r.summary = "Create or update an extension"
												r.operationID = "putExtension"
												r.pathPattern = "/spaces/{space_id}/environments/{environment_id}/extensions/{extension_id}"
												r.args = args
												r.count = 3
												return r, true
											default:
												return
											}
										}

									}

								}

							}

						}

					case 'p': // Prefix: "preview_api_keys/"

						if l := len("preview_api_keys/"); len(elem) >= l && elem[0:l] == "preview_api_keys/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "preview_api_key_id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetPreviewApiKeyOperation
								r.summary = "Get a single preview api key"
								r.operationID = "getPreviewApiKey"
								r.pathPattern = "/spaces/{space_id}/preview_api_keys/{preview_api_key_id}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}

					case 'r': // Prefix: "roles"

						if l := len("roles"); len(elem) >= l && elem[0:l] == "roles" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = CreateRoleOperation
								r.summary = "Create a role"
								r.operationID = "createRole"
								r.pathPattern = "/spaces/{space_id}/roles"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "role_id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = DeleteRoleOperation
									r.summary = "Delete a role"
									r.operationID = "deleteRole"
									r.pathPattern = "/spaces/{space_id}/roles/{role_id}"
									r.args = args
									r.count = 2
									return r, true
								case "GET":
									r.name = GetRoleOperation
									r.summary = "Get a role"
									r.operationID = "getRole"
									r.pathPattern = "/spaces/{space_id}/roles/{role_id}"
									r.args = args
									r.count = 2
									return r, true
								case "PUT":
									r.name = UpdateRoleOperation
									r.summary = "Update a role"
									r.operationID = "updateRole"
									r.pathPattern = "/spaces/{space_id}/roles/{role_id}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}

						}

					case 'w': // Prefix: "webhook_definitions"

						if l := len("webhook_definitions"); len(elem) >= l && elem[0:l] == "webhook_definitions" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = CreateWebhookDefinitionOperation
								r.summary = "Create a webhook definition"
								r.operationID = "createWebhookDefinition"
								r.pathPattern = "/spaces/{space_id}/webhook_definitions"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "webhook_definition_id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = DeleteWebhookDefinitionOperation
									r.summary = "Delete a webhook definition"
									r.operationID = "deleteWebhookDefinition"
									r.pathPattern = "/spaces/{space_id}/webhook_definitions/{webhook_definition_id}"
									r.args = args
									r.count = 2
									return r, true
								case "GET":
									r.name = GetWebhookDefinitionOperation
									r.summary = "Get a webhook definition"
									r.operationID = "getWebhookDefinition"
									r.pathPattern = "/spaces/{space_id}/webhook_definitions/{webhook_definition_id}"
									r.args = args
									r.count = 2
									return r, true
								case "PUT":
									r.name = UpdateWebhookDefinitionOperation
									r.summary = "Update a webhook definition"
									r.operationID = "updateWebhookDefinition"
									r.pathPattern = "/spaces/{space_id}/webhook_definitions/{webhook_definition_id}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			case 'u': // Prefix: "users/me"

				if l := len("users/me"); len(elem) >= l && elem[0:l] == "users/me" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetAuthenticatedUserOperation
						r.summary = "Get the authenticated user"
						r.operationID = "getAuthenticatedUser"
						r.pathPattern = "/users/me"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/access_tokens"

					if l := len("/access_tokens"); len(elem) >= l && elem[0:l] == "/access_tokens" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = CreatePersonalAccessTokenOperation
							r.summary = "Create a personal access token"
							r.operationID = "createPersonalAccessToken"
							r.pathPattern = "/users/me/access_tokens"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "access_token_id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = GetPersonalAccessTokenOperation
								r.summary = "Get a single personal access token"
								r.operationID = "getPersonalAccessToken"
								r.pathPattern = "/users/me/access_tokens/{access_token_id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/revoked"

							if l := len("/revoked"); len(elem) >= l && elem[0:l] == "/revoked" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "PUT":
									r.name = RevokePersonalAccessTokenOperation
									r.summary = "Revoke a personal access token"
									r.operationID = "revokePersonalAccessToken"
									r.pathPattern = "/users/me/access_tokens/{access_token_id}/revoked"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			}

		}
	}
	return r, false
}
