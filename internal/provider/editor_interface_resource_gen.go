// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func EditorInterfaceResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"content_type_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"controls": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"field_id": schema.StringAttribute{
							Required: true,
						},
						"settings": schema.StringAttribute{
							CustomType: jsontypes.NormalizedType{},
							Optional:   true,
						},
						"widget_id": schema.StringAttribute{
							Optional: true,
						},
						"widget_namespace": schema.StringAttribute{
							Optional: true,
						},
					},
					CustomType: ControlsType{
						ObjectType: types.ObjectType{
							AttrTypes: ControlsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional: true,
			},
			"environment_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"sidebar": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"disabled": schema.BoolAttribute{
							Optional: true,
						},
						"settings": schema.StringAttribute{
							CustomType: jsontypes.NormalizedType{},
							Optional:   true,
						},
						"widget_id": schema.StringAttribute{
							Required: true,
						},
						"widget_namespace": schema.StringAttribute{
							Required: true,
						},
					},
					CustomType: SidebarType{
						ObjectType: types.ObjectType{
							AttrTypes: SidebarValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional: true,
			},
			"space_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

type EditorInterfaceModel struct {
	ContentTypeId types.String `tfsdk:"content_type_id"`
	Controls      types.List   `tfsdk:"controls"`
	EnvironmentId types.String `tfsdk:"environment_id"`
	Sidebar       types.List   `tfsdk:"sidebar"`
	SpaceId       types.String `tfsdk:"space_id"`
}

var _ basetypes.ObjectTypable = ControlsType{}

type ControlsType struct {
	basetypes.ObjectType
}

func (t ControlsType) Equal(o attr.Type) bool {
	other, ok := o.(ControlsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ControlsType) String() string {
	return "ControlsType"
}

func (t ControlsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	fieldIdAttribute, ok := attributes["field_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field_id is missing from object`)

		return nil, diags
	}

	fieldIdVal, ok := fieldIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field_id expected to be basetypes.StringValue, was: %T`, fieldIdAttribute))
	}

	settingsAttribute, ok := attributes["settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settings is missing from object`)

		return nil, diags
	}

	settingsVal, ok := settingsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settings expected to be basetypes.StringValue, was: %T`, settingsAttribute))
	}

	widgetIdAttribute, ok := attributes["widget_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`widget_id is missing from object`)

		return nil, diags
	}

	widgetIdVal, ok := widgetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`widget_id expected to be basetypes.StringValue, was: %T`, widgetIdAttribute))
	}

	widgetNamespaceAttribute, ok := attributes["widget_namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`widget_namespace is missing from object`)

		return nil, diags
	}

	widgetNamespaceVal, ok := widgetNamespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`widget_namespace expected to be basetypes.StringValue, was: %T`, widgetNamespaceAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ControlsValue{
		FieldId:         fieldIdVal,
		Settings:        settingsVal,
		WidgetId:        widgetIdVal,
		WidgetNamespace: widgetNamespaceVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewControlsValueNull() ControlsValue {
	return ControlsValue{
		state: attr.ValueStateNull,
	}
}

func NewControlsValueUnknown() ControlsValue {
	return ControlsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewControlsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ControlsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ControlsValue Attribute Value",
				"While creating a ControlsValue value, a missing attribute value was detected. "+
					"A ControlsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ControlsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ControlsValue Attribute Type",
				"While creating a ControlsValue value, an invalid attribute value was detected. "+
					"A ControlsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ControlsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ControlsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ControlsValue Attribute Value",
				"While creating a ControlsValue value, an extra attribute value was detected. "+
					"A ControlsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ControlsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewControlsValueUnknown(), diags
	}

	fieldIdAttribute, ok := attributes["field_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field_id is missing from object`)

		return NewControlsValueUnknown(), diags
	}

	fieldIdVal, ok := fieldIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field_id expected to be basetypes.StringValue, was: %T`, fieldIdAttribute))
	}

	settingsAttribute, ok := attributes["settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settings is missing from object`)

		return NewControlsValueUnknown(), diags
	}

	settingsVal, ok := settingsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settings expected to be basetypes.StringValue, was: %T`, settingsAttribute))
	}

	widgetIdAttribute, ok := attributes["widget_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`widget_id is missing from object`)

		return NewControlsValueUnknown(), diags
	}

	widgetIdVal, ok := widgetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`widget_id expected to be basetypes.StringValue, was: %T`, widgetIdAttribute))
	}

	widgetNamespaceAttribute, ok := attributes["widget_namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`widget_namespace is missing from object`)

		return NewControlsValueUnknown(), diags
	}

	widgetNamespaceVal, ok := widgetNamespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`widget_namespace expected to be basetypes.StringValue, was: %T`, widgetNamespaceAttribute))
	}

	if diags.HasError() {
		return NewControlsValueUnknown(), diags
	}

	return ControlsValue{
		FieldId:         fieldIdVal,
		Settings:        settingsVal,
		WidgetId:        widgetIdVal,
		WidgetNamespace: widgetNamespaceVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewControlsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ControlsValue {
	object, diags := NewControlsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewControlsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ControlsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewControlsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewControlsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewControlsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewControlsValueMust(ControlsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ControlsType) ValueType(ctx context.Context) attr.Value {
	return ControlsValue{}
}

var _ basetypes.ObjectValuable = ControlsValue{}

type ControlsValue struct {
	FieldId         basetypes.StringValue `tfsdk:"field_id"`
	Settings        basetypes.StringValue `tfsdk:"settings"`
	WidgetId        basetypes.StringValue `tfsdk:"widget_id"`
	WidgetNamespace basetypes.StringValue `tfsdk:"widget_namespace"`
	state           attr.ValueState
}

func (v ControlsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["field_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["settings"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["widget_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["widget_namespace"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.FieldId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field_id"] = val

		val, err = v.Settings.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["settings"] = val

		val, err = v.WidgetId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["widget_id"] = val

		val, err = v.WidgetNamespace.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["widget_namespace"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ControlsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ControlsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ControlsValue) String() string {
	return "ControlsValue"
}

func (v ControlsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"field_id":         basetypes.StringType{},
		"settings":         basetypes.StringType{},
		"widget_id":        basetypes.StringType{},
		"widget_namespace": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"field_id":         v.FieldId,
			"settings":         v.Settings,
			"widget_id":        v.WidgetId,
			"widget_namespace": v.WidgetNamespace,
		})

	return objVal, diags
}

func (v ControlsValue) Equal(o attr.Value) bool {
	other, ok := o.(ControlsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.FieldId.Equal(other.FieldId) {
		return false
	}

	if !v.Settings.Equal(other.Settings) {
		return false
	}

	if !v.WidgetId.Equal(other.WidgetId) {
		return false
	}

	if !v.WidgetNamespace.Equal(other.WidgetNamespace) {
		return false
	}

	return true
}

func (v ControlsValue) Type(ctx context.Context) attr.Type {
	return ControlsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ControlsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"field_id":         basetypes.StringType{},
		"settings":         basetypes.StringType{},
		"widget_id":        basetypes.StringType{},
		"widget_namespace": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SidebarType{}

type SidebarType struct {
	basetypes.ObjectType
}

func (t SidebarType) Equal(o attr.Type) bool {
	other, ok := o.(SidebarType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SidebarType) String() string {
	return "SidebarType"
}

func (t SidebarType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	disabledAttribute, ok := attributes["disabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disabled is missing from object`)

		return nil, diags
	}

	disabledVal, ok := disabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disabled expected to be basetypes.BoolValue, was: %T`, disabledAttribute))
	}

	settingsAttribute, ok := attributes["settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settings is missing from object`)

		return nil, diags
	}

	settingsVal, ok := settingsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settings expected to be basetypes.StringValue, was: %T`, settingsAttribute))
	}

	widgetIdAttribute, ok := attributes["widget_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`widget_id is missing from object`)

		return nil, diags
	}

	widgetIdVal, ok := widgetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`widget_id expected to be basetypes.StringValue, was: %T`, widgetIdAttribute))
	}

	widgetNamespaceAttribute, ok := attributes["widget_namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`widget_namespace is missing from object`)

		return nil, diags
	}

	widgetNamespaceVal, ok := widgetNamespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`widget_namespace expected to be basetypes.StringValue, was: %T`, widgetNamespaceAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SidebarValue{
		Disabled:        disabledVal,
		Settings:        settingsVal,
		WidgetId:        widgetIdVal,
		WidgetNamespace: widgetNamespaceVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewSidebarValueNull() SidebarValue {
	return SidebarValue{
		state: attr.ValueStateNull,
	}
}

func NewSidebarValueUnknown() SidebarValue {
	return SidebarValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSidebarValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SidebarValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SidebarValue Attribute Value",
				"While creating a SidebarValue value, a missing attribute value was detected. "+
					"A SidebarValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SidebarValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SidebarValue Attribute Type",
				"While creating a SidebarValue value, an invalid attribute value was detected. "+
					"A SidebarValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SidebarValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SidebarValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SidebarValue Attribute Value",
				"While creating a SidebarValue value, an extra attribute value was detected. "+
					"A SidebarValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SidebarValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSidebarValueUnknown(), diags
	}

	disabledAttribute, ok := attributes["disabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disabled is missing from object`)

		return NewSidebarValueUnknown(), diags
	}

	disabledVal, ok := disabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disabled expected to be basetypes.BoolValue, was: %T`, disabledAttribute))
	}

	settingsAttribute, ok := attributes["settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settings is missing from object`)

		return NewSidebarValueUnknown(), diags
	}

	settingsVal, ok := settingsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settings expected to be basetypes.StringValue, was: %T`, settingsAttribute))
	}

	widgetIdAttribute, ok := attributes["widget_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`widget_id is missing from object`)

		return NewSidebarValueUnknown(), diags
	}

	widgetIdVal, ok := widgetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`widget_id expected to be basetypes.StringValue, was: %T`, widgetIdAttribute))
	}

	widgetNamespaceAttribute, ok := attributes["widget_namespace"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`widget_namespace is missing from object`)

		return NewSidebarValueUnknown(), diags
	}

	widgetNamespaceVal, ok := widgetNamespaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`widget_namespace expected to be basetypes.StringValue, was: %T`, widgetNamespaceAttribute))
	}

	if diags.HasError() {
		return NewSidebarValueUnknown(), diags
	}

	return SidebarValue{
		Disabled:        disabledVal,
		Settings:        settingsVal,
		WidgetId:        widgetIdVal,
		WidgetNamespace: widgetNamespaceVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewSidebarValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SidebarValue {
	object, diags := NewSidebarValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSidebarValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SidebarType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSidebarValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSidebarValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSidebarValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSidebarValueMust(SidebarValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SidebarType) ValueType(ctx context.Context) attr.Value {
	return SidebarValue{}
}

var _ basetypes.ObjectValuable = SidebarValue{}

type SidebarValue struct {
	Disabled        basetypes.BoolValue   `tfsdk:"disabled"`
	Settings        basetypes.StringValue `tfsdk:"settings"`
	WidgetId        basetypes.StringValue `tfsdk:"widget_id"`
	WidgetNamespace basetypes.StringValue `tfsdk:"widget_namespace"`
	state           attr.ValueState
}

func (v SidebarValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["disabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["settings"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["widget_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["widget_namespace"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Disabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["disabled"] = val

		val, err = v.Settings.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["settings"] = val

		val, err = v.WidgetId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["widget_id"] = val

		val, err = v.WidgetNamespace.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["widget_namespace"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SidebarValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SidebarValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SidebarValue) String() string {
	return "SidebarValue"
}

func (v SidebarValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"disabled":         basetypes.BoolType{},
		"settings":         basetypes.StringType{},
		"widget_id":        basetypes.StringType{},
		"widget_namespace": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"disabled":         v.Disabled,
			"settings":         v.Settings,
			"widget_id":        v.WidgetId,
			"widget_namespace": v.WidgetNamespace,
		})

	return objVal, diags
}

func (v SidebarValue) Equal(o attr.Value) bool {
	other, ok := o.(SidebarValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Disabled.Equal(other.Disabled) {
		return false
	}

	if !v.Settings.Equal(other.Settings) {
		return false
	}

	if !v.WidgetId.Equal(other.WidgetId) {
		return false
	}

	if !v.WidgetNamespace.Equal(other.WidgetNamespace) {
		return false
	}

	return true
}

func (v SidebarValue) Type(ctx context.Context) attr.Type {
	return SidebarType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SidebarValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"disabled":         basetypes.BoolType{},
		"settings":         basetypes.StringType{},
		"widget_id":        basetypes.StringType{},
		"widget_namespace": basetypes.StringType{},
	}
}
