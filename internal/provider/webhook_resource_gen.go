// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func WebhookResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"active": schema.BoolAttribute{
				Optional: true,
				Computed: true,
				Default:  booldefault.StaticBool(true),
			},
			"filters": schema.ListAttribute{
				ElementType: jsontypes.NormalizedType{},
				Optional:    true,
			},
			"headers": schema.MapAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"http_basic_password": schema.StringAttribute{
				Optional: true,
			},
			"http_basic_username": schema.StringAttribute{
				Optional: true,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"space_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"topics": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
			},
			"transformation": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"body": schema.StringAttribute{
						CustomType: jsontypes.NormalizedType{},
						Optional:   true,
					},
					"content_type": schema.StringAttribute{
						Optional: true,
					},
					"include_content_length": schema.BoolAttribute{
						Optional: true,
					},
					"method": schema.StringAttribute{
						Optional: true,
					},
				},
				CustomType: TransformationType{
					ObjectType: types.ObjectType{
						AttrTypes: TransformationValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
			},
			"url": schema.StringAttribute{
				Required: true,
			},
			"webhook_id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

type WebhookModel struct {
	Active            types.Bool          `tfsdk:"active"`
	Filters           types.List          `tfsdk:"filters"`
	Headers           types.Map           `tfsdk:"headers"`
	HttpBasicPassword types.String        `tfsdk:"http_basic_password"`
	HttpBasicUsername types.String        `tfsdk:"http_basic_username"`
	Name              types.String        `tfsdk:"name"`
	SpaceId           types.String        `tfsdk:"space_id"`
	Topics            types.List          `tfsdk:"topics"`
	Transformation    TransformationValue `tfsdk:"transformation"`
	Url               types.String        `tfsdk:"url"`
	WebhookId         types.String        `tfsdk:"webhook_id"`
}

var _ basetypes.ObjectTypable = TransformationType{}

type TransformationType struct {
	basetypes.ObjectType
}

func (t TransformationType) Equal(o attr.Type) bool {
	other, ok := o.(TransformationType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TransformationType) String() string {
	return "TransformationType"
}

func (t TransformationType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	bodyAttribute, ok := attributes["body"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`body is missing from object`)

		return nil, diags
	}

	bodyVal, ok := bodyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`body expected to be basetypes.StringValue, was: %T`, bodyAttribute))
	}

	contentTypeAttribute, ok := attributes["content_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`content_type is missing from object`)

		return nil, diags
	}

	contentTypeVal, ok := contentTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`content_type expected to be basetypes.StringValue, was: %T`, contentTypeAttribute))
	}

	includeContentLengthAttribute, ok := attributes["include_content_length"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`include_content_length is missing from object`)

		return nil, diags
	}

	includeContentLengthVal, ok := includeContentLengthAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`include_content_length expected to be basetypes.BoolValue, was: %T`, includeContentLengthAttribute))
	}

	methodAttribute, ok := attributes["method"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`method is missing from object`)

		return nil, diags
	}

	methodVal, ok := methodAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`method expected to be basetypes.StringValue, was: %T`, methodAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TransformationValue{
		Body:                 bodyVal,
		ContentType:          contentTypeVal,
		IncludeContentLength: includeContentLengthVal,
		Method:               methodVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewTransformationValueNull() TransformationValue {
	return TransformationValue{
		state: attr.ValueStateNull,
	}
}

func NewTransformationValueUnknown() TransformationValue {
	return TransformationValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTransformationValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TransformationValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TransformationValue Attribute Value",
				"While creating a TransformationValue value, a missing attribute value was detected. "+
					"A TransformationValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TransformationValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TransformationValue Attribute Type",
				"While creating a TransformationValue value, an invalid attribute value was detected. "+
					"A TransformationValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TransformationValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TransformationValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TransformationValue Attribute Value",
				"While creating a TransformationValue value, an extra attribute value was detected. "+
					"A TransformationValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TransformationValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTransformationValueUnknown(), diags
	}

	bodyAttribute, ok := attributes["body"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`body is missing from object`)

		return NewTransformationValueUnknown(), diags
	}

	bodyVal, ok := bodyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`body expected to be basetypes.StringValue, was: %T`, bodyAttribute))
	}

	contentTypeAttribute, ok := attributes["content_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`content_type is missing from object`)

		return NewTransformationValueUnknown(), diags
	}

	contentTypeVal, ok := contentTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`content_type expected to be basetypes.StringValue, was: %T`, contentTypeAttribute))
	}

	includeContentLengthAttribute, ok := attributes["include_content_length"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`include_content_length is missing from object`)

		return NewTransformationValueUnknown(), diags
	}

	includeContentLengthVal, ok := includeContentLengthAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`include_content_length expected to be basetypes.BoolValue, was: %T`, includeContentLengthAttribute))
	}

	methodAttribute, ok := attributes["method"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`method is missing from object`)

		return NewTransformationValueUnknown(), diags
	}

	methodVal, ok := methodAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`method expected to be basetypes.StringValue, was: %T`, methodAttribute))
	}

	if diags.HasError() {
		return NewTransformationValueUnknown(), diags
	}

	return TransformationValue{
		Body:                 bodyVal,
		ContentType:          contentTypeVal,
		IncludeContentLength: includeContentLengthVal,
		Method:               methodVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewTransformationValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TransformationValue {
	object, diags := NewTransformationValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTransformationValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TransformationType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTransformationValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTransformationValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTransformationValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTransformationValueMust(TransformationValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TransformationType) ValueType(ctx context.Context) attr.Value {
	return TransformationValue{}
}

var _ basetypes.ObjectValuable = TransformationValue{}

type TransformationValue struct {
	Body                 basetypes.StringValue `tfsdk:"body"`
	ContentType          basetypes.StringValue `tfsdk:"content_type"`
	IncludeContentLength basetypes.BoolValue   `tfsdk:"include_content_length"`
	Method               basetypes.StringValue `tfsdk:"method"`
	state                attr.ValueState
}

func (v TransformationValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["body"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["content_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["include_content_length"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["method"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Body.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["body"] = val

		val, err = v.ContentType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["content_type"] = val

		val, err = v.IncludeContentLength.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["include_content_length"] = val

		val, err = v.Method.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["method"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TransformationValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TransformationValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TransformationValue) String() string {
	return "TransformationValue"
}

func (v TransformationValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"body":                   basetypes.StringType{},
		"content_type":           basetypes.StringType{},
		"include_content_length": basetypes.BoolType{},
		"method":                 basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"body":                   v.Body,
			"content_type":           v.ContentType,
			"include_content_length": v.IncludeContentLength,
			"method":                 v.Method,
		})

	return objVal, diags
}

func (v TransformationValue) Equal(o attr.Value) bool {
	other, ok := o.(TransformationValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Body.Equal(other.Body) {
		return false
	}

	if !v.ContentType.Equal(other.ContentType) {
		return false
	}

	if !v.IncludeContentLength.Equal(other.IncludeContentLength) {
		return false
	}

	if !v.Method.Equal(other.Method) {
		return false
	}

	return true
}

func (v TransformationValue) Type(ctx context.Context) attr.Type {
	return TransformationType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TransformationValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"body":                   basetypes.StringType{},
		"content_type":           basetypes.StringType{},
		"include_content_length": basetypes.BoolType{},
		"method":                 basetypes.StringType{},
	}
}
