// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func RoleResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"description": schema.StringAttribute{
				Optional: true,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"permissions": schema.MapAttribute{
				ElementType: types.ListType{
					ElemType: types.StringType,
				},
				Required: true,
			},
			"policies": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"actions": schema.ListAttribute{
							ElementType: types.StringType,
							Required:    true,
						},
						"constraint": schema.StringAttribute{
							CustomType: jsontypes.NormalizedType{},
							Optional:   true,
						},
						"effect": schema.StringAttribute{
							Required: true,
						},
					},
					CustomType: PoliciesType{
						ObjectType: types.ObjectType{
							AttrTypes: PoliciesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Required: true,
			},
			"role_id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"space_id": schema.StringAttribute{
				Required: true,
			},
		},
	}
}

type RoleModel struct {
	Description types.String `tfsdk:"description"`
	Name        types.String `tfsdk:"name"`
	Permissions types.Map    `tfsdk:"permissions"`
	Policies    types.List   `tfsdk:"policies"`
	RoleId      types.String `tfsdk:"role_id"`
	SpaceId     types.String `tfsdk:"space_id"`
}

var _ basetypes.ObjectTypable = PoliciesType{}

type PoliciesType struct {
	basetypes.ObjectType
}

func (t PoliciesType) Equal(o attr.Type) bool {
	other, ok := o.(PoliciesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PoliciesType) String() string {
	return "PoliciesType"
}

func (t PoliciesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	actionsAttribute, ok := attributes["actions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`actions is missing from object`)

		return nil, diags
	}

	actionsVal, ok := actionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`actions expected to be basetypes.ListValue, was: %T`, actionsAttribute))
	}

	constraintAttribute, ok := attributes["constraint"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`constraint is missing from object`)

		return nil, diags
	}

	constraintVal, ok := constraintAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`constraint expected to be basetypes.StringValue, was: %T`, constraintAttribute))
	}

	effectAttribute, ok := attributes["effect"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`effect is missing from object`)

		return nil, diags
	}

	effectVal, ok := effectAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`effect expected to be basetypes.StringValue, was: %T`, effectAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PoliciesValue{
		Actions:    actionsVal,
		Constraint: constraintVal,
		Effect:     effectVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewPoliciesValueNull() PoliciesValue {
	return PoliciesValue{
		state: attr.ValueStateNull,
	}
}

func NewPoliciesValueUnknown() PoliciesValue {
	return PoliciesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPoliciesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PoliciesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PoliciesValue Attribute Value",
				"While creating a PoliciesValue value, a missing attribute value was detected. "+
					"A PoliciesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PoliciesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PoliciesValue Attribute Type",
				"While creating a PoliciesValue value, an invalid attribute value was detected. "+
					"A PoliciesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PoliciesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PoliciesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PoliciesValue Attribute Value",
				"While creating a PoliciesValue value, an extra attribute value was detected. "+
					"A PoliciesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PoliciesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPoliciesValueUnknown(), diags
	}

	actionsAttribute, ok := attributes["actions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`actions is missing from object`)

		return NewPoliciesValueUnknown(), diags
	}

	actionsVal, ok := actionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`actions expected to be basetypes.ListValue, was: %T`, actionsAttribute))
	}

	constraintAttribute, ok := attributes["constraint"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`constraint is missing from object`)

		return NewPoliciesValueUnknown(), diags
	}

	constraintVal, ok := constraintAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`constraint expected to be basetypes.StringValue, was: %T`, constraintAttribute))
	}

	effectAttribute, ok := attributes["effect"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`effect is missing from object`)

		return NewPoliciesValueUnknown(), diags
	}

	effectVal, ok := effectAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`effect expected to be basetypes.StringValue, was: %T`, effectAttribute))
	}

	if diags.HasError() {
		return NewPoliciesValueUnknown(), diags
	}

	return PoliciesValue{
		Actions:    actionsVal,
		Constraint: constraintVal,
		Effect:     effectVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewPoliciesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PoliciesValue {
	object, diags := NewPoliciesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPoliciesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PoliciesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPoliciesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPoliciesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPoliciesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPoliciesValueMust(PoliciesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PoliciesType) ValueType(ctx context.Context) attr.Value {
	return PoliciesValue{}
}

var _ basetypes.ObjectValuable = PoliciesValue{}

type PoliciesValue struct {
	Actions    basetypes.ListValue   `tfsdk:"actions"`
	Constraint basetypes.StringValue `tfsdk:"constraint"`
	Effect     basetypes.StringValue `tfsdk:"effect"`
	state      attr.ValueState
}

func (v PoliciesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["actions"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["constraint"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["effect"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Actions.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["actions"] = val

		val, err = v.Constraint.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["constraint"] = val

		val, err = v.Effect.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["effect"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PoliciesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PoliciesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PoliciesValue) String() string {
	return "PoliciesValue"
}

func (v PoliciesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var actionsVal basetypes.ListValue
	switch {
	case v.Actions.IsUnknown():
		actionsVal = types.ListUnknown(types.StringType)
	case v.Actions.IsNull():
		actionsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		actionsVal, d = types.ListValue(types.StringType, v.Actions.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"actions": basetypes.ListType{
				ElemType: types.StringType,
			},
			"constraint": basetypes.StringType{},
			"effect":     basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"actions": basetypes.ListType{
			ElemType: types.StringType,
		},
		"constraint": basetypes.StringType{},
		"effect":     basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"actions":    actionsVal,
			"constraint": v.Constraint,
			"effect":     v.Effect,
		})

	return objVal, diags
}

func (v PoliciesValue) Equal(o attr.Value) bool {
	other, ok := o.(PoliciesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Actions.Equal(other.Actions) {
		return false
	}

	if !v.Constraint.Equal(other.Constraint) {
		return false
	}

	if !v.Effect.Equal(other.Effect) {
		return false
	}

	return true
}

func (v PoliciesValue) Type(ctx context.Context) attr.Type {
	return PoliciesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PoliciesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"actions": basetypes.ListType{
			ElemType: types.StringType,
		},
		"constraint": basetypes.StringType{},
		"effect":     basetypes.StringType{},
	}
}
